# https://taskfile.dev/usage/
# https://pkg.go.dev/text/template
# https://go-task.github.io/slim-sprig/
version: "3"

vars:
  TASKFILE_DIR:
    sh: pwd
  # The path to the virtual environment to use when using a virtual
  # environment.
  VENV_PATH: '{{(env "VENV_PATH") | default (osClean (print .TASKFILE_DIR "/.venv"))}}'
  # Non empty string results in tasks using a virtual environment.
  WITH_VENV: '{{env "WITH_VENV" | default "false"}}'
  # The virtual environemtn specific python interpreter to use.
  VENV_BINPREFIX: '{{if (mustFromJson .WITH_VENV)}}{{if (eq OS "windows")}}{{.VENV_PATH}}/Scripts/{{else}}{{.VENV_PATH}}/bin/{{end}}{{end}}'
  VENV_PYTHON: '{{if (eq OS "windows")}}{{.VENV_BINPREFIX}}python.exe{{else}}{{.VENV_BINPREFIX}}python{{end}}'
  # The python interpreter to use.
  PYTHON: python
  _PYTHON: '{{if (mustFromJson .WITH_VENV)}}{{.VENV_PYTHON}}{{else}}{{.PYTHON}}{{end}}'
  # Truthish values ("true", "1", etc.) results in java being installed as a
  # system dependency.
  INSTALL_SYSTEM_DEPS_JAVA: "false"
  # Truthish values ("true", "1", etc.) results in extras being installed with
  # pip.
  INSTALL_PIP_EXTRAS: "false"
  # Truthish values ("true", "1", etc.) results in extensive tests being ran and
  # dependencies for extensive tests being installed.
  EXTENSIVE: "false"
  # The python version for which tox should run, empty string does not restrict
  # python versions.
  TOX_PYTHON_VERSION: ""
  TEST_HARNESS: '{{if (and (mustFromJson .EXTENSIVE) (not (eq OS "windows")))}}./with-fuseki.sh{{end}} '
  # Truthish values ("true", "1", etc.) results in github specific things being
  # done.
  WITH_GITHUB_ACTIONS: "false"
  # Truthish values ("true", "1", etc.) results in coverage being generated for
  # relevant commands.
  WITH_COVERAGE: "false"

tasks:
  install:system-deps:
    desc: Install system dependencies
    cmds:
      - echo "OS = {{OS}}"
      - echo "ARCH = {{ARCH}}"
      - |
        {{if (and (mustFromJson .EXTENSIVE) (eq OS "linux"))}}
          if type apt-get >/dev/null 2>&1
          then
            sudo apt-get install -y libdb-dev
          elif type dnf >/dev/null 2>&1
          then
            sudo dnf install -y libdb-devel
          fi
        {{else if (and (mustFromJson .EXTENSIVE) (eq OS "darwin"))}}
          brew install berkeley-db@4
        {{end}}

  install:tox:
    desc: Install tox
    cmds:
      - '{{._PYTHON}} -m pip install tox {{if (mustFromJson .WITH_GITHUB_ACTIONS)}}tox-gh-actions{{end}}'

  install:pip-deps:
    desc: Install pip dependencies
    cmds:
      - '{{._PYTHON}} -m pip install --upgrade -r requirements.txt -r requirements.dev.txt -r docs/sphinx-requirements.txt {{if (mustFromJson .INSTALL_PIP_EXTRAS)}}-r requirements.dev-extras.txt{{end}}'

  install:flake8:
    desc: Install flake8 dependencies
    cmds:
      - "{{._PYTHON}} -m pip install --upgrade -r requirements.flake8.txt"

  install:deps:
    desc: Install all dependencies
    cmds:
      - task: install:system-deps
      - task: install:tox
      - task: install:pip-deps

  venv:install:
    desc: Install a venv to VENV_PATH(={{.VENV_PATH}})
    cmds:
      - "{{.PYTHON}} -m venv {{.VENV_PATH}}"
      - task: install:pip-deps
        vars: { _PYTHON: "{{.VENV_PYTHON}}" }

  venv:clean:
    desc: Remove the venv at VENV_PATH(={{.VENV_PATH}})
    cmds:
      - task: _rimraf
        vars: { _PYTHON: "{{.PYTHON}}", RIMRAF_TARGET: "{{.VENV_PATH}}" }

  venv:run:
    desc: Run a command inside the venv
    cmds:
      - cmd: |
          VIRTUAL_ENV="{{.VENV_PATH}}" PATH="{{.VENV_PATH}}/bin${PATH:+:${PATH}}" {{.CLI_ARGS}}

  run:
    desc: Run a command. If WITH_VENV is truthish, the command will be run inside the virtual environment.
    cmds:
      - cmd: |
          {{if (mustFromJson .WITH_VENV)}}
          VIRTUAL_ENV="{{.VENV_PATH}}" PATH="{{.VENV_PATH}}/bin${PATH:+:${PATH}}" {{.CLI_ARGS}}
          {{else}}
          {{.CLI_ARGS}}
          {{end}}

  tox:
    desc: Run tox
    cmds:
      - echo "TOXENV=${TOXENV}"
      - |
        {{if .TOX_PYTEST_ARGS}}TOX_PYTEST_ARGS={{shellQuote .TOX_PYTEST_ARGS}}{{end}} \
        {{if .TOX_EXTRA_COMMAND}}TOX_EXTRA_COMMAND={{shellQuote .TOX_EXTRA_COMMAND}}{{end}} \
        {{if .COVERAGE_FILE}}COVERAGE_FILE={{shellQuote .COVERAGE_FILE}}{{end}} \
        {{.TEST_HARNESS}} \
        {{._PYTHON}} \
          -m tox \
          {{.CLI_ARGS}}
    env:
      TOXENV: '{{if .TOX_PYTHON_VERSION}}py{{mustRegexReplaceAll "^([0-9]+)[.]([0-9]+).*" .TOX_PYTHON_VERSION "${1}${2}"}}{{if (mustFromJson .EXTENSIVE)}}-extensive{{end}}{{.TOXENV_SUFFIX | default ""}}{{end}}'
  test:
    desc: Run tests
    cmds:
      - '{{.TEST_HARNESS}}{{.VENV_BINPREFIX}}pytest {{if (mustFromJson .WITH_COVERAGE)}}--cov --cov-report={{end}} {{.CLI_ARGS}}'

  flake8:
    desc: Run flake8
    cmds:
      - "{{._PYTHON}} -m flakeheaven lint {{.CLI_ARGS}}"

  black:
    desc: Run black
    cmds:
      - '{{._PYTHON}} -m black {{if (mustFromJson (.CHECK | default "false"))}}--check --diff {{end}}{{.CLI_ARGS | default "."}}'
  isort:
    desc: Run isort
    cmds:
      - '{{._PYTHON}} -m isort {{if (mustFromJson (.CHECK | default "false"))}}--check --diff {{end}}{{.CLI_ARGS | default "."}}'
  mypy:
    desc: Run mypy
    cmds:
      - "{{._PYTHON}} -m mypy --show-error-context --show-error-codes"

  lint:fix:
    desc: Fix auto-fixable linting errors
    cmds:
      - task: isort
      - task: black

  lint:
    desc: Perform linting
    cmds:
      - task: isort
        vars: { CHECK: true }
      - task: black
        vars: { CHECK: true }
      - task: flake8

  validate:static:
    desc: Perform static validation
    cmds:
      - task: lint
      - task: mypy

  validate:fix:
    desc: Fix auto-fixable validation errors.
    cmds:
      - task: lint:fix

  validate:
    desc: Perform all validation
    cmds:
      - task: validate:static
      - task: test

  docs:clean:
    desc: Clean generated documentation
    cmds:
      - task: _rimraf
        vars: { RIMRAF_TARGET: "docs/_build/" }

  docs:
    desc: Build documentation
    cmds:
      - echo "PYTHONPATH=${PYTHONPATH}"
      - "{{._PYTHON}} -m sphinx.cmd.build -b html -d docs/_build/doctrees docs/ docs/_build/html -W {{.CLI_ARGS}}"

  docs:live-server:
    desc: Run a live server on generated docs
    cmds:
      - 'echo "NOTE: Docs must be built for this to work"'
      - npx -p live-server live-server docs/_build/html/ {{.CLI_ARGS}}

  default:
    desc: Run validate
    cmds:
      - task: validate

  clean:mypy:
    desc: Clean mypy cache
    cmds:
      - task: _rimraf
        vars: { RIMRAF_TARGET: ".mypy_cache" }
      - task: clean:tox:mypy

  clean:tox:
    desc: Clean tox environments
    cmds:
      - task: _rimraf
        vars: { RIMRAF_TARGET: ".tox" }

  clean:tox:mypy:
    desc: Clean mypy cache inside tox environments
    cmds:
      - task: _rimraf
        vars: { RIMRAF_TARGET: ".tox/*/.mypy_cache/" }

  clean:
    desc: Clean everything
    cmds:
      - task: docs:clean
      - task: clean:tox
      - task: clean:mypy
      - task: venv:clean

  test:data:fetch:
    desc: Fetch test data.
    cmds:
      - "{{._PYTHON}} test/data/fetcher.py {{.CLI_ARGS}}"

  pre-commit:install:
    desc: Install pre-commit hooks
    cmds:
      - pre-commit install {{.CLI_ARGS}}

  pre-commit:run:
    desc: Run pre-commit
    cmds:
      - pre-commit run {{.CLI_ARGS}}

  pre-commit:run:all-files:
    desc: Run pre-commit on all files
    cmds:
      - pre-commit run --all-files  {{.CLI_ARGS}}

  gha:validate:
    desc: GitHub Actions Validation Workflow
    env:
      COVERALLS_PARALLEL: true
      COVERALLS_FLAG_NAME: "{{.OS}}-{{.TOX_PYTHON_VERSION}}"
      COVERALLS_SERVICE_NAME: '{{.COVERALLS_SERVICE_NAME | default (env "COVERALLS_SERVICE_NAME") | default "github"}}'
    cmds:
      - task: install:system-deps
      - task: install:tox
        vars:
          WITH_GITHUB_ACTIONS: true
      - cmd: "{{._PYTHON}} -m pip install coveralls"
      - task: tox
        vars:
          COVERAGE_FILE: ".coverage"
      - cmd: coveralls


  gha:flake8:
    desc: GitHub Actions flake8 workflow
    cmds:
      - task: install:flake8
      - task: flake8

  _rimraf:
    # This task is a utility task for recursively removing directories, it is
    # similar to rm -rf but not identical and it should work wherever there is
    # a python interpreter. The name is inspired by
    # <https://www.npmjs.com/package/rimraf>.
    - cmd: |
        {{._PYTHON}} -c '
        from pathlib import Path;
        import sys, shutil;
        for path in sys.argv[1:]:
          if Path(path).exists():
            sys.stderr.write(f"removing {path}\n")
            shutil.rmtree(path, ignore_errors=True)
        ' {{.RIMRAF_TARGET}}
