#Processed by EYE v20.0218.2044 josd
#eye --no-genid http://josd.github.io/brain/rif/rifP.n3 --query http://josd.github.io/brain/rif/rifQ.n3

@prefix func: <http://www.w3.org/2007/rif-builtin-function#>.
@prefix pred: <http://www.w3.org/2007/rif-builtin-predicate#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix : <http://eulersharp.sourceforge.net/2007/07test#>.
@prefix r: <http://www.w3.org/2000/10/swap/reason#>.
@prefix var: <http://josd.github.io/var#>.
@prefix n3: <http://www.w3.org/2004/06/rei#>.

[] a r:Proof, r:Conjunction;
  r:component <#lemma1>;
  r:component <#lemma2>;
  r:component <#lemma3>;
  r:component <#lemma4>;
  r:component <#lemma5>;
  r:component <#lemma6>;
  r:component <#lemma7>;
  r:component <#lemma8>;
  r:component <#lemma9>;
  r:component <#lemma10>;
  r:component <#lemma11>;
  r:component <#lemma12>;
  r:component <#lemma13>;
  r:component <#lemma14>;
  r:component <#lemma15>;
  r:component <#lemma16>;
  r:component <#lemma17>;
  r:component <#lemma18>;
  r:component <#lemma19>;
  r:component <#lemma20>;
  r:component <#lemma21>;
  r:component <#lemma22>;
  r:component <#lemma23>;
  r:component <#lemma24>;
  r:component <#lemma25>;
  r:component <#lemma26>;
  r:component <#lemma27>;
  r:component <#lemma28>;
  r:component <#lemma29>;
  r:component <#lemma30>;
  r:component <#lemma31>;
  r:component <#lemma32>;
  r:component <#lemma33>;
  r:component <#lemma34>;
  r:component <#lemma35>;
  r:component <#lemma36>;
  r:component <#lemma37>;
  r:component <#lemma38>;
  r:component <#lemma39>;
  r:component <#lemma40>;
  r:component <#lemma41>;
  r:component <#lemma42>;
  r:component <#lemma43>;
  r:component <#lemma44>;
  r:component <#lemma45>;
  r:component <#lemma46>;
  r:component <#lemma47>;
  r:component <#lemma48>;
  r:component <#lemma49>;
  r:component <#lemma50>;
  r:component <#lemma51>;
  r:component <#lemma52>;
  r:component <#lemma53>;
  r:component <#lemma54>;
  r:component <#lemma55>;
  r:component <#lemma56>;
  r:component <#lemma57>;
  r:component <#lemma58>;
  r:component <#lemma59>;
  r:component <#lemma60>;
  r:component <#lemma61>;
  r:component <#lemma62>;
  r:component <#lemma63>;
  r:component <#lemma64>;
  r:component <#lemma65>;
  r:component <#lemma66>;
  r:component <#lemma67>;
  r:component <#lemma68>;
  r:component <#lemma69>;
  r:component <#lemma70>;
  r:component <#lemma71>;
  r:component <#lemma72>;
  r:component <#lemma73>;
  r:component <#lemma74>;
  r:component <#lemma75>;
  r:component <#lemma76>;
  r:component <#lemma77>;
  r:component <#lemma78>;
  r:component <#lemma79>;
  r:component <#lemma80>;
  r:component <#lemma81>;
  r:component <#lemma82>;
  r:component <#lemma83>;
  r:component <#lemma84>;
  r:component <#lemma85>;
  r:component <#lemma86>;
  r:component <#lemma87>;
  r:component <#lemma88>;
  r:component <#lemma89>;
  r:component <#lemma90>;
  r:component <#lemma91>;
  r:component <#lemma92>;
  r:component <#lemma93>;
  r:component <#lemma94>;
  r:component <#lemma95>;
  r:component <#lemma96>;
  r:component <#lemma97>;
  r:component <#lemma98>;
  r:component <#lemma99>;
  r:component <#lemma100>;
  r:component <#lemma101>;
  r:component <#lemma102>;
  r:component <#lemma103>;
  r:component <#lemma104>;
  r:component <#lemma105>;
  r:component <#lemma106>;
  r:component <#lemma107>;
  r:component <#lemma108>;
  r:component <#lemma109>;
  r:component <#lemma110>;
  r:component <#lemma111>;
  r:component <#lemma112>;
  r:component <#lemma113>;
  r:component <#lemma114>;
  r:component <#lemma115>;
  r:component <#lemma116>;
  r:component <#lemma117>;
  r:component <#lemma118>;
  r:component <#lemma119>;
  r:component <#lemma120>;
  r:component <#lemma121>;
  r:component <#lemma122>;
  r:component <#lemma123>;
  r:component <#lemma124>;
  r:component <#lemma125>;
  r:component <#lemma126>;
  r:component <#lemma127>;
  r:component <#lemma128>;
  r:component <#lemma129>;
  r:component <#lemma130>;
  r:component <#lemma131>;
  r:component <#lemma132>;
  r:component <#lemma133>;
  r:component <#lemma134>;
  r:component <#lemma135>;
  r:component <#lemma136>;
  r:component <#lemma137>;
  r:component <#lemma138>;
  r:component <#lemma139>;
  r:component <#lemma140>;
  r:component <#lemma141>;
  r:component <#lemma142>;
  r:component <#lemma143>;
  r:component <#lemma144>;
  r:component <#lemma145>;
  r:component <#lemma146>;
  r:component <#lemma147>;
  r:component <#lemma148>;
  r:component <#lemma149>;
  r:component <#lemma150>;
  r:component <#lemma151>;
  r:component <#lemma152>;
  r:component <#lemma153>;
  r:component <#lemma154>;
  r:component <#lemma155>;
  r:component <#lemma156>;
  r:component <#lemma157>;
  r:component <#lemma158>;
  r:component <#lemma159>;
  r:component <#lemma160>;
  r:component <#lemma161>;
  r:component <#lemma162>;
  r:component <#lemma163>;
  r:component <#lemma164>;
  r:component <#lemma165>;
  r:component <#lemma166>;
  r:component <#lemma167>;
  r:component <#lemma168>;
  r:component <#lemma169>;
  r:component <#lemma170>;
  r:component <#lemma171>;
  r:component <#lemma172>;
  r:component <#lemma173>;
  r:component <#lemma174>;
  r:component <#lemma175>;
  r:component <#lemma176>;
  r:component <#lemma177>;
  r:component <#lemma178>;
  r:component <#lemma179>;
  r:component <#lemma180>;
  r:component <#lemma181>;
  r:component <#lemma182>;
  r:component <#lemma183>;
  r:component <#lemma184>;
  r:component <#lemma185>;
  r:component <#lemma186>;
  r:component <#lemma187>;
  r:component <#lemma188>;
  r:component <#lemma189>;
  r:component <#lemma190>;
  r:component <#lemma191>;
  r:component <#lemma192>;
  r:component <#lemma193>;
  r:component <#lemma194>;
  r:component <#lemma195>;
  r:component <#lemma196>;
  r:component <#lemma197>;
  r:component <#lemma198>;
  r:component <#lemma199>;
  r:component <#lemma200>;
  r:component <#lemma201>;
  r:component <#lemma202>;
  r:component <#lemma203>;
  r:component <#lemma204>;
  r:component <#lemma205>;
  r:component <#lemma206>;
  r:component <#lemma207>;
  r:component <#lemma208>;
  r:component <#lemma209>;
  r:component <#lemma210>;
  r:component <#lemma211>;
  r:component <#lemma212>;
  r:component <#lemma213>;
  r:component <#lemma214>;
  r:component <#lemma215>;
  r:component <#lemma216>;
  r:component <#lemma217>;
  r:component <#lemma218>;
  r:component <#lemma219>;
  r:component <#lemma220>;
  r:component <#lemma221>;
  r:component <#lemma222>;
  r:gives {
    {{("chat"@fr "chien"@fr) pred:literal-not-identical true} => {:literal-not-identical-1 :result true}} a :PASS.
    {{(:case "http://eulersharp.sourceforge.net/2007/07test#case") pred:iri-string true} => {:iri-string-1 :result true}} a :PASS.
    {{(1 1) func:numeric-add 2} => {:numeric-add-1 :result true}} a :PASS.
    {{(5 2) func:numeric-subtract 3} => {:numeric-subtract-1 :result true}} a :PASS.
    {{(5 2) func:numeric-multiply 10} => {:numeric-multiply-1 :result true}} a :PASS.
    {{(5 2) func:numeric-divide 2.5} => {:numeric-divide-1 :result true}} a :PASS.
    {{(5 2) func:numeric-integer-divide 2} => {:numeric-integer-divide-1 :result true}} a :PASS.
    {{(10 3) func:numeric-mod 1} => {:numeric-mod-1 :result true}} a :PASS.
    {{(6 -2) func:numeric-mod 0} => {:numeric-mod-2 :result true}} a :PASS.
    {{(4.5 1.2) func:numeric-mod 0.9000000000000004} => {:numeric-mod-3 :result true}} a :PASS.
    {{(123.0 6.0) func:numeric-mod 3.0} => {:numeric-mod-4 :result true}} a :PASS.
    {{(1 1.0) pred:numeric-equal true} => {:numeric-equal-1 :result true}} a :PASS.
    {{(2.0 3) pred:numeric-less-than true} => {:numeric-less-than-1 :result true}} a :PASS.
    {{(1.0 0) pred:numeric-greater-than true} => {:numeric-greater-than-1 :result true}} a :PASS.
    {{(1 1.01) pred:numeric-not-equal true} => {:numeric-not-equal-1 :result true}} a :PASS.
    {{(3 5.0) pred:numeric-less-than-or-equal true} => {:numeric-less-than-or-equal-1 :result true}} a :PASS.
    {{(1.0 1) pred:numeric-greater-than-or-equal true} => {:numeric-greater-than-or-equal-1 :result true}} a :PASS.
    {{(false) func:not true} => {:not-1 :result true}} a :PASS.
    {{(true) func:not false} => {:not-2 :result true}} a :PASS.
    {{(false false) pred:boolean-equal true} => {:boolean-equal-1 :result true}} a :PASS.
    {{(false true) pred:boolean-less-than true} => {:boolean-less-than-1 :result true}} a :PASS.
    {{(true false) pred:boolean-greater-than true} => {:boolean-greater-than-1 :result true}} a :PASS.
    {{("abc" "abc") func:compare 0} => {:compare-1 :result true}} a :PASS.
    {{("Straßen" "Straße") func:compare 1} => {:compare-2 :result true}} a :PASS.
    {{("Ingratitude, " "thou " "marble-hearted" " fiend!") func:concat "Ingratitude, thou marble-hearted fiend!"} => {:concat-1 :result true}} a :PASS.
    {{(("Now" "is" "the" "time" "...") " ") func:string-join "Now is the time ..."} => {:string-join-1 :result true}} a :PASS.
    {{(("Blow, " "blow, " "thou " "winter " "wind!") "") func:string-join "Blow, blow, thou winter wind!"} => {:string-join-2 :result true}} a :PASS.
    {{(() "separator") func:string-join ""} => {:string-join-3 :result true}} a :PASS.
    {{("motor car" 6) func:substring " car"} => {:substring-1 :result true}} a :PASS.
    {{("metadata" 4 3) func:substring "ada"} => {:substring-2 :result true}} a :PASS.
    {{("12345" 1.5 2.6) func:substring "234"} => {:substring-3 :result true}} a :PASS.
    {{("12345" 0 3) func:substring "12"} => {:substring-4 :result true}} a :PASS.
    {{("12345" 5 -3) func:substring ""} => {:substring-5 :result true}} a :PASS.
    {{("12345" -3 5) func:substring "1"} => {:substring-6 :result true}} a :PASS.
    {{("Harp not on that string, madam; that is past.") func:string-length 45} => {:string-length-1 :result true}} a :PASS.
    {{(""@en) func:string-length 0} => {:string-length-2 :result true}} a :PASS.
    {{("abCd0") func:upper-case "ABCD0"} => {:upper-case-1 :result true}} a :PASS.
    {{("ABc!D") func:lower-case "abc!d"} => {:lower-case-1 :result true}} a :PASS.
    {{("00/Weather/CA/Los%20Angeles#ocean") func:encode-for-uri "00%2fWeather%2fCA%2fLos%2520Angeles%23ocean"} => {:encode-for-uri-1 :result true}} a :PASS.
    {{("~bébé") func:encode-for-uri "~b%c3%a9b%c3%a9"} => {:encode-for-uri-2 :result true}} a :PASS.
    {{("100% organic") func:encode-for-uri "100%25%20organic"} => {:encode-for-uri-3 :result true}} a :PASS.
    {{("tattoo" "attoo") func:substring-before "t"} => {:substring-before-1 :result true}} a :PASS.
    {{("tattoo" "tatto") func:substring-before ""} => {:substring-before-2 :result true}} a :PASS.
    {{("tattoo" "tat") func:substring-after "too"} => {:substring-after-1 :result true}} a :PASS.
    {{("tattoo" "tattoo") func:substring-after ""} => {:substring-after-2 :result true}} a :PASS.
    {{("tattoo" "t") pred:contains true} => {:contains-1 :result true}} a :PASS.
    {{("tattoo" "tat") pred:starts-with true} => {:starts-with-1 :result true}} a :PASS.
    {{("tattoo" "tattoo") pred:ends-with true} => {:ends-with-1 :result true}} a :PASS.
    {{("abracadabra" "bra") pred:matches true} => {:matches-1 :result true}} a :PASS.
    {{("abracadabra" "^a.*a$") pred:matches true} => {:matches-2 :result true}} a :PASS.
    {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:year-from-dateTime 1999} => {:year-from-dateTime-1 :result true}} a :PASS.
    {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:month-from-dateTime 5} => {:month-from-dateTime-1 :result true}} a :PASS.
    {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:day-from-dateTime 31} => {:day-from-dateTime-1 :result true}} a :PASS.
    {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:hours-from-dateTime 13} => {:hours-from-dateTime-1 :result true}} a :PASS.
    {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:minutes-from-dateTime 20} => {:minutes-from-dateTime-1 :result true}} a :PASS.
    {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:seconds-from-dateTime 0} => {:seconds-from-dateTime-1 :result true}} a :PASS.
    {{("1999-05-31-05:00"^^xsd:date) func:year-from-date 1999} => {:year-from-date-1 :result true}} a :PASS.
    {{("1999-05-31-05:00"^^xsd:date) func:month-from-date 5} => {:month-from-date-1 :result true}} a :PASS.
    {{("1999-05-31-05:00"^^xsd:date) func:day-from-date 31} => {:day-from-date-1 :result true}} a :PASS.
    {{("13:20:00-05:00"^^xsd:time) func:hours-from-time 13} => {:hours-from-time-1 :result true}} a :PASS.
    {{("13:20:00-05:00"^^xsd:time) func:minutes-from-time 20} => {:minutes-from-time-1 :result true}} a :PASS.
    {{("13:20:00-05:00"^^xsd:time) func:seconds-from-time 0} => {:seconds-from-time-1 :result true}} a :PASS.
    {{("P20Y15M"^^xsd:yearMonthDuration) func:years-from-duration 21} => {:years-from-duration-1 :result true}} a :PASS.
    {{("-P15M"^^xsd:yearMonthDuration) func:years-from-duration -1} => {:years-from-duration-2 :result true}} a :PASS.
    {{("-P2DT15H"^^xsd:dayTimeDuration) func:years-from-duration 0} => {:years-from-duration-3 :result true}} a :PASS.
    {{("P20Y15M"^^xsd:yearMonthDuration) func:months-from-duration 3} => {:months-from-duration-1 :result true}} a :PASS.
    {{("-P20Y18M"^^xsd:yearMonthDuration) func:months-from-duration -6} => {:months-from-duration-2 :result true}} a :PASS.
    {{("-P2DT15H0M0S"^^xsd:dayTimeDuration) func:months-from-duration 0} => {:months-from-duration-3 :result true}} a :PASS.
    {{("P3DT10H"^^xsd:dayTimeDuration) func:days-from-duration 3} => {:days-from-duration-1 :result true}} a :PASS.
    {{("P3DT55H"^^xsd:dayTimeDuration) func:days-from-duration 5} => {:days-from-duration-2 :result true}} a :PASS.
    {{("P3Y5M"^^xsd:yearMonthDuration) func:days-from-duration 0} => {:days-from-duration-3 :result true}} a :PASS.
    {{("P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration 10} => {:hours-from-duration-1 :result true}} a :PASS.
    {{("P3DT12H32M12S"^^xsd:dayTimeDuration) func:hours-from-duration 12} => {:hours-from-duration-2 :result true}} a :PASS.
    {{("PT123H"^^xsd:dayTimeDuration) func:hours-from-duration 3} => {:hours-from-duration-3 :result true}} a :PASS.
    {{("-P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration -10} => {:hours-from-duration-4 :result true}} a :PASS.
    {{("P3DT10H"^^xsd:dayTimeDuration) func:minutes-from-duration 0} => {:minutes-from-duration-1 :result true}} a :PASS.
    {{("-P5DT12H30M"^^xsd:dayTimeDuration) func:minutes-from-duration -30} => {:minutes-from-duration-2 :result true}} a :PASS.
    {{("P3DT10H12.5S"^^xsd:dayTimeDuration) func:seconds-from-duration 12.5} => {:seconds-from-duration-1 :result true}} a :PASS.
    {{("-PT256S"^^xsd:dayTimeDuration) func:seconds-from-duration -16.0} => {:seconds-from-duration-2 :result true}} a :PASS.
    {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:timezone-from-dateTime "-PT5H"^^xsd:dayTimeDuration} => {:timezone-from-dateTime-1 :result true}} a :PASS.
    {{("2000-06-12T13:20:00Z"^^xsd:dateTime) func:timezone-from-dateTime "PT0S"^^xsd:dayTimeDuration} => {:timezone-from-dateTime-2 :result true}} a :PASS.
    {{("1999-05-31-05:00"^^xsd:date) func:timezone-from-date "-PT5H"^^xsd:dayTimeDuration} => {:timezone-from-date-1 :result true}} a :PASS.
    {{("2000-06-12Z"^^xsd:date) func:timezone-from-date "PT0S"^^xsd:dayTimeDuration} => {:timezone-from-date-2 :result true}} a :PASS.
    {{("13:20:00-05:00"^^xsd:time) func:timezone-from-time "-PT5H"^^xsd:dayTimeDuration} => {:timezone-from-time-1 :result true}} a :PASS.
    {{("13:20:00Z"^^xsd:time) func:timezone-from-time "PT0S"^^xsd:dayTimeDuration} => {:timezone-from-time-2 :result true}} a :PASS.
    {{("2000-10-30T06:12:00-05:00"^^xsd:dateTime "1999-11-28T09:00:00Z"^^xsd:dateTime) func:subtract-dateTimes "P337DT2H12M"^^xsd:dayTimeDuration} => {:subtract-dateTimes-1 :result true}} a :PASS.
    {{("2000-10-30Z"^^xsd:date "1999-11-28Z"^^xsd:date) func:subtract-dates "P337D"^^xsd:dayTimeDuration} => {:subtract-dates-1 :result true}} a :PASS.
    {{("11:12:00Z"^^xsd:time "04:00:00-05:00"^^xsd:time) func:subtract-times "PT2H12M"^^xsd:dayTimeDuration} => {:subtract-times-1 :result true}} a :PASS.
    {{("11:00:00-05:00"^^xsd:time "21:30:00+05:30"^^xsd:time) func:subtract-times "PT0S"^^xsd:dayTimeDuration} => {:subtract-times-2 :result true}} a :PASS.
    {{("17:00:00-06:00"^^xsd:time "08:00:00+09:00"^^xsd:time) func:subtract-times "P1D"^^xsd:dayTimeDuration} => {:subtract-times-3 :result true}} a :PASS.
    {{("24:00:00"^^xsd:time "23:59:59"^^xsd:time) func:subtract-times "-PT23H59M59S"^^xsd:dayTimeDuration} => {:subtract-times-4 :result true}} a :PASS.
    {{("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:add-yearMonthDurations "P6Y2M"^^xsd:yearMonthDuration} => {:add-yearMonthDurations-1 :result true}} a :PASS.
    {{("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:subtract-yearMonthDurations "-P4M"^^xsd:yearMonthDuration} => {:subtract-yearMonthDurations-1 :result true}} a :PASS.
    {{("P2Y11M"^^xsd:yearMonthDuration 2.3) func:multiply-yearMonthDuration "P6Y9M"^^xsd:yearMonthDuration} => {:multiply-yearMonthDuration-1 :result true}} a :PASS.
    {{("P2Y11M"^^xsd:yearMonthDuration 1.5) func:divide-yearMonthDuration "P1Y11M"^^xsd:yearMonthDuration} => {:divide-yearMonthDuration-1 :result true}} a :PASS.
    {{("P3Y4M"^^xsd:yearMonthDuration "-P1Y4M"^^xsd:yearMonthDuration) func:divide-yearMonthDuration-by-yearMonthDuration -2.5} => {:divide-yearMonthDuration-by-yearMonthDuration-1 :result true}} a :PASS.
    {{("P2DT12H5M"^^xsd:dayTimeDuration "P5DT12H"^^xsd:dayTimeDuration) func:add-dayTimeDurations "P8DT5M"^^xsd:dayTimeDuration} => {:add-dayTimeDurations-1 :result true}} a :PASS.
    {{("P2DT12H"^^xsd:dayTimeDuration "P1DT10H30M"^^xsd:dayTimeDuration) func:subtract-dayTimeDurations "P1DT1H30M"^^xsd:dayTimeDuration} => {:subtract-dayTimeDurations-1 :result true}} a :PASS.
    {{("PT2H10M"^^xsd:dayTimeDuration 2.1) func:multiply-dayTimeDuration "PT4H33M"^^xsd:dayTimeDuration} => {:multiply-dayTimeDuration-1 :result true}} a :PASS.
    {{("P1DT2H30M10.5S"^^xsd:dayTimeDuration 1.5) func:divide-dayTimeDuration "PT17H40M7S"^^xsd:dayTimeDuration} => {:divide-dayTimeDuration-1 :result true}} a :PASS.
    {{("PT4H33M"^^xsd:dayTimeDuration "PT2H10M"^^xsd:dayTimeDuration) func:divide-dayTimeDuration-by-dayTimeDuration 2.1} => {:divide-dayTimeDuration-by-dayTimeDuration-1 :result true}} a :PASS.
    {{("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-dateTime "2001-12-30T11:12:00Z"^^xsd:dateTime} => {:add-yearMonthDuration-to-dateTime-1 :result true}} a :PASS.
    {{("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-date "2001-12-30Z"^^xsd:date} => {:add-yearMonthDuration-to-date-1 :result true}} a :PASS.
    {{("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-dateTime "2000-11-02T12:27:00Z"^^xsd:dateTime} => {:add-dayTimeDuration-to-dateTime-1 :result true}} a :PASS.
    {{("2004-10-30Z"^^xsd:date "P2DT2H30M0S"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-date "2004-11-01Z"^^xsd:date} => {:add-dayTimeDuration-to-date-1 :result true}} a :PASS.
    {{("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-time "12:27:00Z"^^xsd:time} => {:add-dayTimeDuration-to-time-1 :result true}} a :PASS.
    {{("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-dateTime "1999-08-30T11:12:00Z"^^xsd:dateTime} => {:subtract-yearMonthDuration-from-dateTime-1 :result true}} a :PASS.
    {{("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-date "1999-08-30Z"^^xsd:date} => {:subtract-yearMonthDuration-from-date-1 :result true}} a :PASS.
    {{("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-dateTime "2000-10-27T09:57:00Z"^^xsd:dateTime} => {:subtract-dayTimeDuration-from-dateTime-1 :result true}} a :PASS.
    {{("2000-10-30Z"^^xsd:date "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-date "2000-10-26Z"^^xsd:date} => {:subtract-dayTimeDuration-from-date-1 :result true}} a :PASS.
    {{("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "09:57:00Z"^^xsd:time} => {:subtract-dayTimeDuration-from-time-1 :result true}} a :PASS.
    {{("08:20:00-05:00"^^xsd:time "P23DT10H10M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "22:10:00-05:00"^^xsd:time} => {:subtract-dayTimeDuration-from-time-2 :result true}} a :PASS.
    {{("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-equal true} => {:dateTime-equal-1 :result true}} a :PASS.
    {{("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T23:00:00+06:00"^^xsd:dateTime) pred:dateTime-equal true} => {:dateTime-equal-2 :result true}} a :PASS.
    {{("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T17:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false} => {:dateTime-equal-3 :result true}} a :PASS.
    {{("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T12:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true} => {:dateTime-equal-4 :result true}} a :PASS.
    {{("2002-04-02T23:00:00-04:00"^^xsd:dateTime "2002-04-03T02:00:00-01:00"^^xsd:dateTime) pred:dateTime-equal true} => {:dateTime-equal-5 :result true}} a :PASS.
    {{("1999-12-31T24:00:00-05:00"^^xsd:dateTime "2000-01-01T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true} => {:dateTime-equal-6 :result true}} a :PASS.
    {{("2005-04-04T24:00:00-05:00"^^xsd:dateTime "2005-04-04T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false} => {:dateTime-equal-7 :result true}} a :PASS.
    {{("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than true} => {:dateTime-less-than-1 :result true}} a :PASS.
    {{("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than true} => {:dateTime-greater-than-1 :result true}} a :PASS.
    {{("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-equal false} => {:date-equal-1 :result true}} a :PASS.
    {{("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-equal true} => {:date-equal-2 :result true}} a :PASS.
    {{("2004-12-25Z"^^xsd:date "2004-12-25-05:00"^^xsd:date) pred:date-less-than true} => {:date-less-than-1 :result true}} a :PASS.
    {{("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-less-than false} => {:date-less-than-2 :result true}} a :PASS.
    {{("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than true} => {:date-greater-than-1 :result true}} a :PASS.
    {{("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-greater-than false} => {:date-greater-than-2 :result true}} a :PASS.
    {{("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-equal false} => {:time-equal-1 :result true}} a :PASS.
    {{("21:30:00+10:30"^^xsd:time "06:00:00-05:00"^^xsd:time) pred:time-equal true} => {:time-equal-2 :result true}} a :PASS.
    {{("24:00:00+01:00"^^xsd:time "00:00:00+01:00"^^xsd:time) pred:time-equal true} => {:time-equal-3 :result true}} a :PASS.
    {{("12:00:00-05:00"^^xsd:time "23:00:00+06:00"^^xsd:time) pred:time-less-than false} => {:time-less-than-1 :result true}} a :PASS.
    {{("11:00:00-05:00"^^xsd:time "17:00:00Z"^^xsd:time) pred:time-less-than true} => {:time-less-than-2 :result true}} a :PASS.
    {{("23:59:59-05:00"^^xsd:time "24:00:00-05:00"^^xsd:time) pred:time-less-than false} => {:time-less-than-3 :result true}} a :PASS.
    {{("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than false} => {:time-greater-than-1 :result true}} a :PASS.
    {{("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-equal true} => {:duration-equal-1 :result true}} a :PASS.
    {{("PT24H"^^xsd:duration "P1D"^^xsd:duration) pred:duration-equal true} => {:duration-equal-2 :result true}} a :PASS.
    {{("P1Y"^^xsd:duration "P365D"^^xsd:duration) pred:duration-equal false} => {:duration-equal-3 :result true}} a :PASS.
    {{("P2Y0M0DT0H0M0S"^^xsd:duration "P24M"^^xsd:duration) pred:duration-equal true} => {:duration-equal-4 :result true}} a :PASS.
    {{("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than true} => {:dayTimeDuration-less-than-1 :result true}} a :PASS.
    {{("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than false} => {:dayTimeDuration-greater-than-1 :result true}} a :PASS.
    {{("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than true} => {:yearMonthDuration-less-than-1 :result true}} a :PASS.
    {{("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than false} => {:yearMonthDuration-greater-than-1 :result true}} a :PASS.
    {{("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-not-equal false} => {:dateTime-not-equal-1 :result true}} a :PASS.
    {{("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than-or-equal true} => {:dateTime-less-than-or-equal-1 :result true}} a :PASS.
    {{("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than-or-equal true} => {:dateTime-greater-than-or-equal-1 :result true}} a :PASS.
    {{("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-not-equal true} => {:date-not-equal-1 :result true}} a :PASS.
    {{("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-less-than-or-equal false} => {:date-less-than-or-equal-1 :result true}} a :PASS.
    {{("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than-or-equal true} => {:date-greater-than-or-equal-1 :result true}} a :PASS.
    {{("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-not-equal true} => {:time-not-equal-1 :result true}} a :PASS.
    {{("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-less-than-or-equal true} => {:time-less-than-or-equal-1 :result true}} a :PASS.
    {{("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than-or-equal false} => {:time-greater-than-or-equal-1 :result true}} a :PASS.
    {{("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-not-equal false} => {:duration-not-equal-1 :result true}} a :PASS.
    {{("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than-or-equal true} => {:dayTimeDuration-less-than-or-equal-1 :result true}} a :PASS.
    {{("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than-or-equal false} => {:dayTimeDuration-greater-than-or-equal-1 :result true}} a :PASS.
    {{("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than-or-equal true} => {:yearMonthDuration-less-than-or-equal-1 :result true}} a :PASS.
    {{("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than-or-equal false} => {:yearMonthDuration-greater-than-or-equal-1 :result true}} a :PASS.
    {{("Family Guy") func:PlainLiteral-from-string-lang "Family Guy"} => {:PlainLiteral-from-string-lang-1 :result true}} a :PASS.
    {{("Family Guy" "EN") func:PlainLiteral-from-string-lang "Family Guy"@en} => {:PlainLiteral-from-string-lang-2 :result true}} a :PASS.
    {{("Family Guy") func:string-from-PlainLiteral "Family Guy"} => {:string-from-PlainLiteral-1 :result true}} a :PASS.
    {{("Family Guy"@en) func:string-from-PlainLiteral "Family Guy"} => {:string-from-PlainLiteral-2 :result true}} a :PASS.
    {{("Family Guy") func:lang-from-PlainLiteral ""} => {:lang-from-PlainLiteral-1 :result true}} a :PASS.
    {{("Family Guy"@en) func:lang-from-PlainLiteral "en"} => {:lang-from-PlainLiteral-2 :result true}} a :PASS.
    {{("Family Guy" "Mother") func:PlainLiteral-compare -1} => {:PlainLiteral-compare-1 :result true}} a :PASS.
    {{("Family Guy"@en "Brother"@en) func:PlainLiteral-compare 1} => {:PlainLiteral-compare-2 :result true}} a :PASS.
    {{("Family Guy") func:PlainLiteral-length 10} => {:PlainLiteral-length-1 :result true}} a :PASS.
    {{("Family Guy"@en) func:PlainLiteral-length 10} => {:PlainLiteral-length-2 :result true}} a :PASS.
    {{("Family Guy"@en "en") pred:matches-language-range true} => {:matches-language-range-1 :result true}} a :PASS.
    {{("Family Guy"@en-US "en-*") pred:matches-language-range true} => {:matches-language-range-2 :result true}} a :PASS.
    {{((:a :b :c :d)) pred:is-list true} => {:is-list-1 :result true}} a :PASS.
    {{((:a :b :c :d) :b) pred:list-contains true} => {:list-contains-1 :result true}} a :PASS.
    {{(:a :b :c :d) func:make-list (:a :b :c :d)} => {:make-list-1 :result true}} a :PASS.
    {{((:a :b :c :d)) func:count 4} => {:count-1 :result true}} a :PASS.
    {{((:a :b :c :d) 3) func:get :d} => {:get-1 :result true}} a :PASS.
    {{((0 1 2 3 4) 0 0) func:sublist ()} => {:sublist-1 :result true}} a :PASS.
    {{((0 1 2 3 4) 0 1) func:sublist (0)} => {:sublist-2 :result true}} a :PASS.
    {{((0 1 2 3 4) 0 4) func:sublist (0 1 2 3)} => {:sublist-3 :result true}} a :PASS.
    {{((0 1 2 3 4) 0 5) func:sublist (0 1 2 3 4)} => {:sublist-4 :result true}} a :PASS.
    {{((0 1 2 3 4) 0 10) func:sublist (0 1 2 3 4)} => {:sublist-5 :result true}} a :PASS.
    {{((0 1 2 3 4) 0 -2) func:sublist (0 1 2)} => {:sublist-6 :result true}} a :PASS.
    {{((0 1 2 3 4) 2 4) func:sublist (2 3)} => {:sublist-7 :result true}} a :PASS.
    {{((0 1 2 3 4) 2 -2) func:sublist (2)} => {:sublist-9 :result true}} a :PASS.
    {{((0 1 2 3 4) 0) func:sublist (0 1 2 3 4)} => {:sublist-9 :result true}} a :PASS.
    {{((0 1 2 3 4) 3) func:sublist (3 4)} => {:sublist-10 :result true}} a :PASS.
    {{((0 1 2 3 4) -2) func:sublist (3 4)} => {:sublist-11 :result true}} a :PASS.
    {{((0 1 2) 3) func:append (0 1 2 3)} => {:append-1 :result true}} a :PASS.
    {{((0 1 2) 3 4) func:append (0 1 2 3 4)} => {:append-2 :result true}} a :PASS.
    {{((1 1) (1) (1) ((1))) func:append (1 1 (1) (1) ((1)))} => {:append-3 :result true}} a :PASS.
    {{(() 1) func:append (1)} => {:append-4 :result true}} a :PASS.
    {{((0 1 2) (3 4 5)) func:concatenate (0 1 2 3 4 5)} => {:concatenate-1 :result true}} a :PASS.
    {{((1 1) (1) (1)) func:concatenate (1 1 1 1)} => {:concatenate-2 :result true}} a :PASS.
    {{(()) func:concatenate ()} => {:concatenate-3 :result true}} a :PASS.
    {{(() (1) () (2) ((3))) func:concatenate (1 2 (3))} => {:concatenate-4 :result true}} a :PASS.
    {{((0 1 2 3 4) 0 99) func:insert-before (99 0 1 2 3 4)} => {:insert-before-1 :result true}} a :PASS.
    {{((0 1 2 3 4) 1 99) func:insert-before (0 99 1 2 3 4)} => {:insert-before-2 :result true}} a :PASS.
    {{((0 1 2 3 4) -1 99) func:insert-before (0 1 2 3 99 4)} => {:insert-before-3 :result true}} a :PASS.
    {{((0 1 2 3 4) -5 99) func:insert-before (99 0 1 2 3 4)} => {:insert-before-4 :result true}} a :PASS.
    {{((0 1 2 3 4) 0) func:remove (1 2 3 4)} => {:remove-1 :result true}} a :PASS.
    {{((0 1 2 3 4) 1) func:remove (0 2 3 4)} => {:remove-2 :result true}} a :PASS.
    {{((0 1 2 3 4) 4) func:remove (0 1 2 3)} => {:remove-3 :result true}} a :PASS.
    {{((0 1 2 3 4) -1) func:remove (0 1 2 3)} => {:remove-4 :result true}} a :PASS.
    {{((0 1 2 3 4) -5) func:remove (1 2 3 4)} => {:remove-5 :result true}} a :PASS.
    {{((0 1 2 3 4)) func:reverse (4 3 2 1 0)} => {:reverse-1 :result true}} a :PASS.
    {{((1)) func:reverse (1)} => {:reverse-2 :result true}} a :PASS.
    {{(()) func:reverse ()} => {:reverse-3 :result true}} a :PASS.
    {{((0 1 2 3 4) 2) func:index-of (2)} => {:index-of-1 :result true}} a :PASS.
    {{((0 1 2 3 4 5 2 2) 2) func:index-of (2 6 7)} => {:index-of-2 :result true}} a :PASS.
    {{((2 2 3 4 5 2 2) 2) func:index-of (0 1 5 6)} => {:index-of-3 :result true}} a :PASS.
    {{((2 2 3 4 5 2 2) 1) func:index-of ()} => {:index-of-4 :result true}} a :PASS.
    {{((0 1 2 4) (3 4 5 6)) func:union (0 1 2 4 3 5 6)} => {:union-1 :result true}} a :PASS.
    {{((0 1 2 3) (4)) func:union (0 1 2 3 4)} => {:union-2 :result true}} a :PASS.
    {{((0 1 2 3) (3)) func:union (0 1 2 3)} => {:union-3 :result true}} a :PASS.
    {{((0 2 1 0)) func:union (0 2 1)} => {:union-4 :result true}} a :PASS.
    {{((0 1 2 3 4)) func:distinct-values (0 1 2 3 4)} => {:distinct-values-1 :result true}} a :PASS.
    {{((0 1 2 3 4 0 4)) func:distinct-values (0 1 2 3 4)} => {:distinct-values-2 :result true}} a :PASS.
    {{((3 3 3)) func:distinct-values (3)} => {:distinct-values-3 :result true}} a :PASS.
    {{((0 1 2 3 4) (1 3)) func:intersect (1 3)} => {:intersect-1 :result true}} a :PASS.
    {{((0 1 2 3 4) (3 1)) func:intersect (1 3)} => {:intersect-2 :result true}} a :PASS.
    {{((0 1 2 3 4) ()) func:intersect ()} => {:intersect-3 :result true}} a :PASS.
    {{((0 1 2 3 4) (0 1 2 3 4 5 6)) func:intersect (0 1 2 3 4)} => {:intersect-4 :result true}} a :PASS.
    {{((0 1 2 3 4) (1 3)) func:except (0 2 4)} => {:except-1 :result true}} a :PASS.
    {{((0 1 2 3 4) ()) func:except (0 1 2 3 4)} => {:except-2 :result true}} a :PASS.
    {{((0 1 2 3 4) (0 1 2 3 4)) func:except ()} => {:except-3 :result true}} a :PASS.
  }.

<#lemma1> a r:Inference;
  r:gives {
    {{("chat"@fr "chien"@fr) pred:literal-not-identical true} => {:literal-not-identical-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("chat"@fr "chien"@fr) pred:literal-not-identical true} => {:literal-not-identical-1 :result true}}]
    <#lemma223>
    [ a r:Fact; r:gives {{("chat"@fr "chien"@fr) pred:literal-not-identical true} e:labelvars {("chat"@fr "chien"@fr) pred:literal-not-identical true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("chat"@fr "chien"@fr) pred:literal-not-identical true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#literal-not-identical-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma2> a r:Inference;
  r:gives {
    {{(:case "http://eulersharp.sourceforge.net/2007/07test#case") pred:iri-string true} => {:iri-string-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(:case "http://eulersharp.sourceforge.net/2007/07test#case") pred:iri-string true} => {:iri-string-1 :result true}}]
    <#lemma225>
    [ a r:Fact; r:gives {{(:case "http://eulersharp.sourceforge.net/2007/07test#case") pred:iri-string true} e:labelvars {(:case "http://eulersharp.sourceforge.net/2007/07test#case") pred:iri-string true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(:case "http://eulersharp.sourceforge.net/2007/07test#case") pred:iri-string true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#iri-string-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma3> a r:Inference;
  r:gives {
    {{(1 1) func:numeric-add 2} => {:numeric-add-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(1 1) func:numeric-add 2} => {:numeric-add-1 :result true}}]
    <#lemma226>
    [ a r:Fact; r:gives {{(1 1) func:numeric-add 2} e:labelvars {(1 1) func:numeric-add 2}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(1 1) func:numeric-add 2}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-add-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma4> a r:Inference;
  r:gives {
    {{(5 2) func:numeric-subtract 3} => {:numeric-subtract-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(5 2) func:numeric-subtract 3} => {:numeric-subtract-1 :result true}}]
    <#lemma227>
    [ a r:Fact; r:gives {{(5 2) func:numeric-subtract 3} e:labelvars {(5 2) func:numeric-subtract 3}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(5 2) func:numeric-subtract 3}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-subtract-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma5> a r:Inference;
  r:gives {
    {{(5 2) func:numeric-multiply 10} => {:numeric-multiply-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(5 2) func:numeric-multiply 10} => {:numeric-multiply-1 :result true}}]
    <#lemma228>
    [ a r:Fact; r:gives {{(5 2) func:numeric-multiply 10} e:labelvars {(5 2) func:numeric-multiply 10}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(5 2) func:numeric-multiply 10}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-multiply-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma6> a r:Inference;
  r:gives {
    {{(5 2) func:numeric-divide 2.5} => {:numeric-divide-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(5 2) func:numeric-divide 2.5} => {:numeric-divide-1 :result true}}]
    <#lemma229>
    [ a r:Fact; r:gives {{(5 2) func:numeric-divide 2.5} e:labelvars {(5 2) func:numeric-divide 2.5}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(5 2) func:numeric-divide 2.5}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-divide-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma7> a r:Inference;
  r:gives {
    {{(5 2) func:numeric-integer-divide 2} => {:numeric-integer-divide-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(5 2) func:numeric-integer-divide 2} => {:numeric-integer-divide-1 :result true}}]
    <#lemma230>
    [ a r:Fact; r:gives {{(5 2) func:numeric-integer-divide 2} e:labelvars {(5 2) func:numeric-integer-divide 2}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(5 2) func:numeric-integer-divide 2}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-integer-divide-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma8> a r:Inference;
  r:gives {
    {{(10 3) func:numeric-mod 1} => {:numeric-mod-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(10 3) func:numeric-mod 1} => {:numeric-mod-1 :result true}}]
    <#lemma231>
    [ a r:Fact; r:gives {{(10 3) func:numeric-mod 1} e:labelvars {(10 3) func:numeric-mod 1}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(10 3) func:numeric-mod 1}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-mod-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma9> a r:Inference;
  r:gives {
    {{(6 -2) func:numeric-mod 0} => {:numeric-mod-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(6 -2) func:numeric-mod 0} => {:numeric-mod-2 :result true}}]
    <#lemma232>
    [ a r:Fact; r:gives {{(6 -2) func:numeric-mod 0} e:labelvars {(6 -2) func:numeric-mod 0}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(6 -2) func:numeric-mod 0}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-mod-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma10> a r:Inference;
  r:gives {
    {{(4.5 1.2) func:numeric-mod 0.9000000000000004} => {:numeric-mod-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(4.5 1.2) func:numeric-mod 0.9000000000000004} => {:numeric-mod-3 :result true}}]
    <#lemma233>
    [ a r:Fact; r:gives {{(4.5 1.2) func:numeric-mod 0.9000000000000004} e:labelvars {(4.5 1.2) func:numeric-mod 0.9000000000000004}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(4.5 1.2) func:numeric-mod 0.9000000000000004}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-mod-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma11> a r:Inference;
  r:gives {
    {{(123.0 6.0) func:numeric-mod 3.0} => {:numeric-mod-4 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(123.0 6.0) func:numeric-mod 3.0} => {:numeric-mod-4 :result true}}]
    <#lemma234>
    [ a r:Fact; r:gives {{(123.0 6.0) func:numeric-mod 3.0} e:labelvars {(123.0 6.0) func:numeric-mod 3.0}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(123.0 6.0) func:numeric-mod 3.0}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-mod-4"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma12> a r:Inference;
  r:gives {
    {{(1 1.0) pred:numeric-equal true} => {:numeric-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(1 1.0) pred:numeric-equal true} => {:numeric-equal-1 :result true}}]
    <#lemma235>
    [ a r:Fact; r:gives {{(1 1.0) pred:numeric-equal true} e:labelvars {(1 1.0) pred:numeric-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(1 1.0) pred:numeric-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma13> a r:Inference;
  r:gives {
    {{(2.0 3) pred:numeric-less-than true} => {:numeric-less-than-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(2.0 3) pred:numeric-less-than true} => {:numeric-less-than-1 :result true}}]
    <#lemma236>
    [ a r:Fact; r:gives {{(2.0 3) pred:numeric-less-than true} e:labelvars {(2.0 3) pred:numeric-less-than true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(2.0 3) pred:numeric-less-than true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-less-than-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma14> a r:Inference;
  r:gives {
    {{(1.0 0) pred:numeric-greater-than true} => {:numeric-greater-than-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(1.0 0) pred:numeric-greater-than true} => {:numeric-greater-than-1 :result true}}]
    <#lemma237>
    [ a r:Fact; r:gives {{(1.0 0) pred:numeric-greater-than true} e:labelvars {(1.0 0) pred:numeric-greater-than true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(1.0 0) pred:numeric-greater-than true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-greater-than-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma15> a r:Inference;
  r:gives {
    {{(1 1.01) pred:numeric-not-equal true} => {:numeric-not-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(1 1.01) pred:numeric-not-equal true} => {:numeric-not-equal-1 :result true}}]
    <#lemma238>
    [ a r:Fact; r:gives {{(1 1.01) pred:numeric-not-equal true} e:labelvars {(1 1.01) pred:numeric-not-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(1 1.01) pred:numeric-not-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-not-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma16> a r:Inference;
  r:gives {
    {{(3 5.0) pred:numeric-less-than-or-equal true} => {:numeric-less-than-or-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(3 5.0) pred:numeric-less-than-or-equal true} => {:numeric-less-than-or-equal-1 :result true}}]
    <#lemma239>
    [ a r:Fact; r:gives {{(3 5.0) pred:numeric-less-than-or-equal true} e:labelvars {(3 5.0) pred:numeric-less-than-or-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(3 5.0) pred:numeric-less-than-or-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-less-than-or-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma17> a r:Inference;
  r:gives {
    {{(1.0 1) pred:numeric-greater-than-or-equal true} => {:numeric-greater-than-or-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(1.0 1) pred:numeric-greater-than-or-equal true} => {:numeric-greater-than-or-equal-1 :result true}}]
    <#lemma240>
    [ a r:Fact; r:gives {{(1.0 1) pred:numeric-greater-than-or-equal true} e:labelvars {(1.0 1) pred:numeric-greater-than-or-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(1.0 1) pred:numeric-greater-than-or-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-greater-than-or-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma18> a r:Inference;
  r:gives {
    {{(false) func:not true} => {:not-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(false) func:not true} => {:not-1 :result true}}]
    <#lemma241>
    [ a r:Fact; r:gives {{(false) func:not true} e:labelvars {(false) func:not true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(false) func:not true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#not-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma19> a r:Inference;
  r:gives {
    {{(true) func:not false} => {:not-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(true) func:not false} => {:not-2 :result true}}]
    <#lemma242>
    [ a r:Fact; r:gives {{(true) func:not false} e:labelvars {(true) func:not false}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(true) func:not false}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#not-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma20> a r:Inference;
  r:gives {
    {{(false false) pred:boolean-equal true} => {:boolean-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(false false) pred:boolean-equal true} => {:boolean-equal-1 :result true}}]
    <#lemma243>
    [ a r:Fact; r:gives {{(false false) pred:boolean-equal true} e:labelvars {(false false) pred:boolean-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(false false) pred:boolean-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#boolean-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma21> a r:Inference;
  r:gives {
    {{(false true) pred:boolean-less-than true} => {:boolean-less-than-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(false true) pred:boolean-less-than true} => {:boolean-less-than-1 :result true}}]
    <#lemma244>
    [ a r:Fact; r:gives {{(false true) pred:boolean-less-than true} e:labelvars {(false true) pred:boolean-less-than true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(false true) pred:boolean-less-than true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#boolean-less-than-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma22> a r:Inference;
  r:gives {
    {{(true false) pred:boolean-greater-than true} => {:boolean-greater-than-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(true false) pred:boolean-greater-than true} => {:boolean-greater-than-1 :result true}}]
    <#lemma245>
    [ a r:Fact; r:gives {{(true false) pred:boolean-greater-than true} e:labelvars {(true false) pred:boolean-greater-than true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(true false) pred:boolean-greater-than true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#boolean-greater-than-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma23> a r:Inference;
  r:gives {
    {{("abc" "abc") func:compare 0} => {:compare-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("abc" "abc") func:compare 0} => {:compare-1 :result true}}]
    <#lemma246>
    [ a r:Fact; r:gives {{("abc" "abc") func:compare 0} e:labelvars {("abc" "abc") func:compare 0}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("abc" "abc") func:compare 0}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#compare-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma24> a r:Inference;
  r:gives {
    {{("Straßen" "Straße") func:compare 1} => {:compare-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("Straßen" "Straße") func:compare 1} => {:compare-2 :result true}}]
    <#lemma247>
    [ a r:Fact; r:gives {{("Straßen" "Straße") func:compare 1} e:labelvars {("Straßen" "Straße") func:compare 1}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("Straßen" "Straße") func:compare 1}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#compare-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma25> a r:Inference;
  r:gives {
    {{("Ingratitude, " "thou " "marble-hearted" " fiend!") func:concat "Ingratitude, thou marble-hearted fiend!"} => {:concat-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("Ingratitude, " "thou " "marble-hearted" " fiend!") func:concat "Ingratitude, thou marble-hearted fiend!"} => {:concat-1 :result true}}]
    <#lemma248>
    [ a r:Fact; r:gives {{("Ingratitude, " "thou " "marble-hearted" " fiend!") func:concat "Ingratitude, thou marble-hearted fiend!"} e:labelvars {("Ingratitude, " "thou " "marble-hearted" " fiend!") func:concat "Ingratitude, thou marble-hearted fiend!"}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("Ingratitude, " "thou " "marble-hearted" " fiend!") func:concat "Ingratitude, thou marble-hearted fiend!"}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#concat-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma26> a r:Inference;
  r:gives {
    {{(("Now" "is" "the" "time" "...") " ") func:string-join "Now is the time ..."} => {:string-join-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(("Now" "is" "the" "time" "...") " ") func:string-join "Now is the time ..."} => {:string-join-1 :result true}}]
    <#lemma249>
    [ a r:Fact; r:gives {{(("Now" "is" "the" "time" "...") " ") func:string-join "Now is the time ..."} e:labelvars {(("Now" "is" "the" "time" "...") " ") func:string-join "Now is the time ..."}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(("Now" "is" "the" "time" "...") " ") func:string-join "Now is the time ..."}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#string-join-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma27> a r:Inference;
  r:gives {
    {{(("Blow, " "blow, " "thou " "winter " "wind!") "") func:string-join "Blow, blow, thou winter wind!"} => {:string-join-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(("Blow, " "blow, " "thou " "winter " "wind!") "") func:string-join "Blow, blow, thou winter wind!"} => {:string-join-2 :result true}}]
    <#lemma250>
    [ a r:Fact; r:gives {{(("Blow, " "blow, " "thou " "winter " "wind!") "") func:string-join "Blow, blow, thou winter wind!"} e:labelvars {(("Blow, " "blow, " "thou " "winter " "wind!") "") func:string-join "Blow, blow, thou winter wind!"}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(("Blow, " "blow, " "thou " "winter " "wind!") "") func:string-join "Blow, blow, thou winter wind!"}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#string-join-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma28> a r:Inference;
  r:gives {
    {{(() "separator") func:string-join ""} => {:string-join-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(() "separator") func:string-join ""} => {:string-join-3 :result true}}]
    <#lemma251>
    [ a r:Fact; r:gives {{(() "separator") func:string-join ""} e:labelvars {(() "separator") func:string-join ""}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(() "separator") func:string-join ""}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#string-join-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma29> a r:Inference;
  r:gives {
    {{("motor car" 6) func:substring " car"} => {:substring-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("motor car" 6) func:substring " car"} => {:substring-1 :result true}}]
    <#lemma252>
    [ a r:Fact; r:gives {{("motor car" 6) func:substring " car"} e:labelvars {("motor car" 6) func:substring " car"}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("motor car" 6) func:substring " car"}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#substring-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma30> a r:Inference;
  r:gives {
    {{("metadata" 4 3) func:substring "ada"} => {:substring-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("metadata" 4 3) func:substring "ada"} => {:substring-2 :result true}}]
    <#lemma253>
    [ a r:Fact; r:gives {{("metadata" 4 3) func:substring "ada"} e:labelvars {("metadata" 4 3) func:substring "ada"}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("metadata" 4 3) func:substring "ada"}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#substring-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma31> a r:Inference;
  r:gives {
    {{("12345" 1.5 2.6) func:substring "234"} => {:substring-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("12345" 1.5 2.6) func:substring "234"} => {:substring-3 :result true}}]
    <#lemma254>
    [ a r:Fact; r:gives {{("12345" 1.5 2.6) func:substring "234"} e:labelvars {("12345" 1.5 2.6) func:substring "234"}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("12345" 1.5 2.6) func:substring "234"}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#substring-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma32> a r:Inference;
  r:gives {
    {{("12345" 0 3) func:substring "12"} => {:substring-4 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("12345" 0 3) func:substring "12"} => {:substring-4 :result true}}]
    <#lemma255>
    [ a r:Fact; r:gives {{("12345" 0 3) func:substring "12"} e:labelvars {("12345" 0 3) func:substring "12"}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("12345" 0 3) func:substring "12"}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#substring-4"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma33> a r:Inference;
  r:gives {
    {{("12345" 5 -3) func:substring ""} => {:substring-5 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("12345" 5 -3) func:substring ""} => {:substring-5 :result true}}]
    <#lemma256>
    [ a r:Fact; r:gives {{("12345" 5 -3) func:substring ""} e:labelvars {("12345" 5 -3) func:substring ""}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("12345" 5 -3) func:substring ""}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#substring-5"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma34> a r:Inference;
  r:gives {
    {{("12345" -3 5) func:substring "1"} => {:substring-6 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("12345" -3 5) func:substring "1"} => {:substring-6 :result true}}]
    <#lemma257>
    [ a r:Fact; r:gives {{("12345" -3 5) func:substring "1"} e:labelvars {("12345" -3 5) func:substring "1"}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("12345" -3 5) func:substring "1"}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#substring-6"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma35> a r:Inference;
  r:gives {
    {{("Harp not on that string, madam; that is past.") func:string-length 45} => {:string-length-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("Harp not on that string, madam; that is past.") func:string-length 45} => {:string-length-1 :result true}}]
    <#lemma258>
    [ a r:Fact; r:gives {{("Harp not on that string, madam; that is past.") func:string-length 45} e:labelvars {("Harp not on that string, madam; that is past.") func:string-length 45}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("Harp not on that string, madam; that is past.") func:string-length 45}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#string-length-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma36> a r:Inference;
  r:gives {
    {{(""@en) func:string-length 0} => {:string-length-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(""@en) func:string-length 0} => {:string-length-2 :result true}}]
    <#lemma259>
    [ a r:Fact; r:gives {{(""@en) func:string-length 0} e:labelvars {(""@en) func:string-length 0}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(""@en) func:string-length 0}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#string-length-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma37> a r:Inference;
  r:gives {
    {{("abCd0") func:upper-case "ABCD0"} => {:upper-case-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("abCd0") func:upper-case "ABCD0"} => {:upper-case-1 :result true}}]
    <#lemma260>
    [ a r:Fact; r:gives {{("abCd0") func:upper-case "ABCD0"} e:labelvars {("abCd0") func:upper-case "ABCD0"}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("abCd0") func:upper-case "ABCD0"}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#upper-case-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma38> a r:Inference;
  r:gives {
    {{("ABc!D") func:lower-case "abc!d"} => {:lower-case-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("ABc!D") func:lower-case "abc!d"} => {:lower-case-1 :result true}}]
    <#lemma261>
    [ a r:Fact; r:gives {{("ABc!D") func:lower-case "abc!d"} e:labelvars {("ABc!D") func:lower-case "abc!d"}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("ABc!D") func:lower-case "abc!d"}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#lower-case-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma39> a r:Inference;
  r:gives {
    {{("00/Weather/CA/Los%20Angeles#ocean") func:encode-for-uri "00%2fWeather%2fCA%2fLos%2520Angeles%23ocean"} => {:encode-for-uri-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("00/Weather/CA/Los%20Angeles#ocean") func:encode-for-uri "00%2fWeather%2fCA%2fLos%2520Angeles%23ocean"} => {:encode-for-uri-1 :result true}}]
    <#lemma262>
    [ a r:Fact; r:gives {{("00/Weather/CA/Los%20Angeles#ocean") func:encode-for-uri "00%2fWeather%2fCA%2fLos%2520Angeles%23ocean"} e:labelvars {("00/Weather/CA/Los%20Angeles#ocean") func:encode-for-uri "00%2fWeather%2fCA%2fLos%2520Angeles%23ocean"}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("00/Weather/CA/Los%20Angeles#ocean") func:encode-for-uri "00%2fWeather%2fCA%2fLos%2520Angeles%23ocean"}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#encode-for-uri-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma40> a r:Inference;
  r:gives {
    {{("~bébé") func:encode-for-uri "~b%c3%a9b%c3%a9"} => {:encode-for-uri-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("~bébé") func:encode-for-uri "~b%c3%a9b%c3%a9"} => {:encode-for-uri-2 :result true}}]
    <#lemma263>
    [ a r:Fact; r:gives {{("~bébé") func:encode-for-uri "~b%c3%a9b%c3%a9"} e:labelvars {("~bébé") func:encode-for-uri "~b%c3%a9b%c3%a9"}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("~bébé") func:encode-for-uri "~b%c3%a9b%c3%a9"}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#encode-for-uri-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma41> a r:Inference;
  r:gives {
    {{("100% organic") func:encode-for-uri "100%25%20organic"} => {:encode-for-uri-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("100% organic") func:encode-for-uri "100%25%20organic"} => {:encode-for-uri-3 :result true}}]
    <#lemma264>
    [ a r:Fact; r:gives {{("100% organic") func:encode-for-uri "100%25%20organic"} e:labelvars {("100% organic") func:encode-for-uri "100%25%20organic"}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("100% organic") func:encode-for-uri "100%25%20organic"}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#encode-for-uri-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma42> a r:Inference;
  r:gives {
    {{("tattoo" "attoo") func:substring-before "t"} => {:substring-before-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("tattoo" "attoo") func:substring-before "t"} => {:substring-before-1 :result true}}]
    <#lemma265>
    [ a r:Fact; r:gives {{("tattoo" "attoo") func:substring-before "t"} e:labelvars {("tattoo" "attoo") func:substring-before "t"}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("tattoo" "attoo") func:substring-before "t"}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#substring-before-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma43> a r:Inference;
  r:gives {
    {{("tattoo" "tatto") func:substring-before ""} => {:substring-before-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("tattoo" "tatto") func:substring-before ""} => {:substring-before-2 :result true}}]
    <#lemma266>
    [ a r:Fact; r:gives {{("tattoo" "tatto") func:substring-before ""} e:labelvars {("tattoo" "tatto") func:substring-before ""}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("tattoo" "tatto") func:substring-before ""}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#substring-before-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma44> a r:Inference;
  r:gives {
    {{("tattoo" "tat") func:substring-after "too"} => {:substring-after-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("tattoo" "tat") func:substring-after "too"} => {:substring-after-1 :result true}}]
    <#lemma267>
    [ a r:Fact; r:gives {{("tattoo" "tat") func:substring-after "too"} e:labelvars {("tattoo" "tat") func:substring-after "too"}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("tattoo" "tat") func:substring-after "too"}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#substring-after-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma45> a r:Inference;
  r:gives {
    {{("tattoo" "tattoo") func:substring-after ""} => {:substring-after-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("tattoo" "tattoo") func:substring-after ""} => {:substring-after-2 :result true}}]
    <#lemma268>
    [ a r:Fact; r:gives {{("tattoo" "tattoo") func:substring-after ""} e:labelvars {("tattoo" "tattoo") func:substring-after ""}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("tattoo" "tattoo") func:substring-after ""}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#substring-after-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma46> a r:Inference;
  r:gives {
    {{("tattoo" "t") pred:contains true} => {:contains-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("tattoo" "t") pred:contains true} => {:contains-1 :result true}}]
    <#lemma269>
    [ a r:Fact; r:gives {{("tattoo" "t") pred:contains true} e:labelvars {("tattoo" "t") pred:contains true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("tattoo" "t") pred:contains true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#contains-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma47> a r:Inference;
  r:gives {
    {{("tattoo" "tat") pred:starts-with true} => {:starts-with-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("tattoo" "tat") pred:starts-with true} => {:starts-with-1 :result true}}]
    <#lemma270>
    [ a r:Fact; r:gives {{("tattoo" "tat") pred:starts-with true} e:labelvars {("tattoo" "tat") pred:starts-with true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("tattoo" "tat") pred:starts-with true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#starts-with-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma48> a r:Inference;
  r:gives {
    {{("tattoo" "tattoo") pred:ends-with true} => {:ends-with-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("tattoo" "tattoo") pred:ends-with true} => {:ends-with-1 :result true}}]
    <#lemma271>
    [ a r:Fact; r:gives {{("tattoo" "tattoo") pred:ends-with true} e:labelvars {("tattoo" "tattoo") pred:ends-with true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("tattoo" "tattoo") pred:ends-with true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#ends-with-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma49> a r:Inference;
  r:gives {
    {{("abracadabra" "bra") pred:matches true} => {:matches-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("abracadabra" "bra") pred:matches true} => {:matches-1 :result true}}]
    <#lemma272>
    [ a r:Fact; r:gives {{("abracadabra" "bra") pred:matches true} e:labelvars {("abracadabra" "bra") pred:matches true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("abracadabra" "bra") pred:matches true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#matches-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma50> a r:Inference;
  r:gives {
    {{("abracadabra" "^a.*a$") pred:matches true} => {:matches-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("abracadabra" "^a.*a$") pred:matches true} => {:matches-2 :result true}}]
    <#lemma273>
    [ a r:Fact; r:gives {{("abracadabra" "^a.*a$") pred:matches true} e:labelvars {("abracadabra" "^a.*a$") pred:matches true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("abracadabra" "^a.*a$") pred:matches true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#matches-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma51> a r:Inference;
  r:gives {
    {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:year-from-dateTime 1999} => {:year-from-dateTime-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:year-from-dateTime 1999} => {:year-from-dateTime-1 :result true}}]
    <#lemma274>
    [ a r:Fact; r:gives {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:year-from-dateTime 1999} e:labelvars {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:year-from-dateTime 1999}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:year-from-dateTime 1999}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#year-from-dateTime-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma52> a r:Inference;
  r:gives {
    {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:month-from-dateTime 5} => {:month-from-dateTime-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:month-from-dateTime 5} => {:month-from-dateTime-1 :result true}}]
    <#lemma275>
    [ a r:Fact; r:gives {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:month-from-dateTime 5} e:labelvars {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:month-from-dateTime 5}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:month-from-dateTime 5}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#month-from-dateTime-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma53> a r:Inference;
  r:gives {
    {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:day-from-dateTime 31} => {:day-from-dateTime-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:day-from-dateTime 31} => {:day-from-dateTime-1 :result true}}]
    <#lemma276>
    [ a r:Fact; r:gives {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:day-from-dateTime 31} e:labelvars {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:day-from-dateTime 31}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:day-from-dateTime 31}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#day-from-dateTime-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma54> a r:Inference;
  r:gives {
    {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:hours-from-dateTime 13} => {:hours-from-dateTime-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:hours-from-dateTime 13} => {:hours-from-dateTime-1 :result true}}]
    <#lemma277>
    [ a r:Fact; r:gives {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:hours-from-dateTime 13} e:labelvars {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:hours-from-dateTime 13}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:hours-from-dateTime 13}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#hours-from-dateTime-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma55> a r:Inference;
  r:gives {
    {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:minutes-from-dateTime 20} => {:minutes-from-dateTime-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:minutes-from-dateTime 20} => {:minutes-from-dateTime-1 :result true}}]
    <#lemma278>
    [ a r:Fact; r:gives {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:minutes-from-dateTime 20} e:labelvars {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:minutes-from-dateTime 20}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:minutes-from-dateTime 20}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#minutes-from-dateTime-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma56> a r:Inference;
  r:gives {
    {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:seconds-from-dateTime 0} => {:seconds-from-dateTime-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:seconds-from-dateTime 0} => {:seconds-from-dateTime-1 :result true}}]
    <#lemma279>
    [ a r:Fact; r:gives {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:seconds-from-dateTime 0} e:labelvars {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:seconds-from-dateTime 0}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:seconds-from-dateTime 0}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#seconds-from-dateTime-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma57> a r:Inference;
  r:gives {
    {{("1999-05-31-05:00"^^xsd:date) func:year-from-date 1999} => {:year-from-date-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("1999-05-31-05:00"^^xsd:date) func:year-from-date 1999} => {:year-from-date-1 :result true}}]
    <#lemma280>
    [ a r:Fact; r:gives {{("1999-05-31-05:00"^^xsd:date) func:year-from-date 1999} e:labelvars {("1999-05-31-05:00"^^xsd:date) func:year-from-date 1999}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("1999-05-31-05:00"^^xsd:date) func:year-from-date 1999}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#year-from-date-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma58> a r:Inference;
  r:gives {
    {{("1999-05-31-05:00"^^xsd:date) func:month-from-date 5} => {:month-from-date-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("1999-05-31-05:00"^^xsd:date) func:month-from-date 5} => {:month-from-date-1 :result true}}]
    <#lemma281>
    [ a r:Fact; r:gives {{("1999-05-31-05:00"^^xsd:date) func:month-from-date 5} e:labelvars {("1999-05-31-05:00"^^xsd:date) func:month-from-date 5}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("1999-05-31-05:00"^^xsd:date) func:month-from-date 5}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#month-from-date-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma59> a r:Inference;
  r:gives {
    {{("1999-05-31-05:00"^^xsd:date) func:day-from-date 31} => {:day-from-date-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("1999-05-31-05:00"^^xsd:date) func:day-from-date 31} => {:day-from-date-1 :result true}}]
    <#lemma282>
    [ a r:Fact; r:gives {{("1999-05-31-05:00"^^xsd:date) func:day-from-date 31} e:labelvars {("1999-05-31-05:00"^^xsd:date) func:day-from-date 31}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("1999-05-31-05:00"^^xsd:date) func:day-from-date 31}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#day-from-date-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma60> a r:Inference;
  r:gives {
    {{("13:20:00-05:00"^^xsd:time) func:hours-from-time 13} => {:hours-from-time-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("13:20:00-05:00"^^xsd:time) func:hours-from-time 13} => {:hours-from-time-1 :result true}}]
    <#lemma283>
    [ a r:Fact; r:gives {{("13:20:00-05:00"^^xsd:time) func:hours-from-time 13} e:labelvars {("13:20:00-05:00"^^xsd:time) func:hours-from-time 13}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("13:20:00-05:00"^^xsd:time) func:hours-from-time 13}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#hours-from-time-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma61> a r:Inference;
  r:gives {
    {{("13:20:00-05:00"^^xsd:time) func:minutes-from-time 20} => {:minutes-from-time-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("13:20:00-05:00"^^xsd:time) func:minutes-from-time 20} => {:minutes-from-time-1 :result true}}]
    <#lemma284>
    [ a r:Fact; r:gives {{("13:20:00-05:00"^^xsd:time) func:minutes-from-time 20} e:labelvars {("13:20:00-05:00"^^xsd:time) func:minutes-from-time 20}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("13:20:00-05:00"^^xsd:time) func:minutes-from-time 20}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#minutes-from-time-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma62> a r:Inference;
  r:gives {
    {{("13:20:00-05:00"^^xsd:time) func:seconds-from-time 0} => {:seconds-from-time-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("13:20:00-05:00"^^xsd:time) func:seconds-from-time 0} => {:seconds-from-time-1 :result true}}]
    <#lemma285>
    [ a r:Fact; r:gives {{("13:20:00-05:00"^^xsd:time) func:seconds-from-time 0} e:labelvars {("13:20:00-05:00"^^xsd:time) func:seconds-from-time 0}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("13:20:00-05:00"^^xsd:time) func:seconds-from-time 0}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#seconds-from-time-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma63> a r:Inference;
  r:gives {
    {{("P20Y15M"^^xsd:yearMonthDuration) func:years-from-duration 21} => {:years-from-duration-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P20Y15M"^^xsd:yearMonthDuration) func:years-from-duration 21} => {:years-from-duration-1 :result true}}]
    <#lemma286>
    [ a r:Fact; r:gives {{("P20Y15M"^^xsd:yearMonthDuration) func:years-from-duration 21} e:labelvars {("P20Y15M"^^xsd:yearMonthDuration) func:years-from-duration 21}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P20Y15M"^^xsd:yearMonthDuration) func:years-from-duration 21}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#years-from-duration-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma64> a r:Inference;
  r:gives {
    {{("-P15M"^^xsd:yearMonthDuration) func:years-from-duration -1} => {:years-from-duration-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("-P15M"^^xsd:yearMonthDuration) func:years-from-duration -1} => {:years-from-duration-2 :result true}}]
    <#lemma287>
    [ a r:Fact; r:gives {{("-P15M"^^xsd:yearMonthDuration) func:years-from-duration -1} e:labelvars {("-P15M"^^xsd:yearMonthDuration) func:years-from-duration -1}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("-P15M"^^xsd:yearMonthDuration) func:years-from-duration -1}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#years-from-duration-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma65> a r:Inference;
  r:gives {
    {{("-P2DT15H"^^xsd:dayTimeDuration) func:years-from-duration 0} => {:years-from-duration-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("-P2DT15H"^^xsd:dayTimeDuration) func:years-from-duration 0} => {:years-from-duration-3 :result true}}]
    <#lemma288>
    [ a r:Fact; r:gives {{("-P2DT15H"^^xsd:dayTimeDuration) func:years-from-duration 0} e:labelvars {("-P2DT15H"^^xsd:dayTimeDuration) func:years-from-duration 0}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("-P2DT15H"^^xsd:dayTimeDuration) func:years-from-duration 0}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#years-from-duration-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma66> a r:Inference;
  r:gives {
    {{("P20Y15M"^^xsd:yearMonthDuration) func:months-from-duration 3} => {:months-from-duration-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P20Y15M"^^xsd:yearMonthDuration) func:months-from-duration 3} => {:months-from-duration-1 :result true}}]
    <#lemma289>
    [ a r:Fact; r:gives {{("P20Y15M"^^xsd:yearMonthDuration) func:months-from-duration 3} e:labelvars {("P20Y15M"^^xsd:yearMonthDuration) func:months-from-duration 3}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P20Y15M"^^xsd:yearMonthDuration) func:months-from-duration 3}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#months-from-duration-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma67> a r:Inference;
  r:gives {
    {{("-P20Y18M"^^xsd:yearMonthDuration) func:months-from-duration -6} => {:months-from-duration-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("-P20Y18M"^^xsd:yearMonthDuration) func:months-from-duration -6} => {:months-from-duration-2 :result true}}]
    <#lemma290>
    [ a r:Fact; r:gives {{("-P20Y18M"^^xsd:yearMonthDuration) func:months-from-duration -6} e:labelvars {("-P20Y18M"^^xsd:yearMonthDuration) func:months-from-duration -6}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("-P20Y18M"^^xsd:yearMonthDuration) func:months-from-duration -6}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#months-from-duration-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma68> a r:Inference;
  r:gives {
    {{("-P2DT15H0M0S"^^xsd:dayTimeDuration) func:months-from-duration 0} => {:months-from-duration-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("-P2DT15H0M0S"^^xsd:dayTimeDuration) func:months-from-duration 0} => {:months-from-duration-3 :result true}}]
    <#lemma291>
    [ a r:Fact; r:gives {{("-P2DT15H0M0S"^^xsd:dayTimeDuration) func:months-from-duration 0} e:labelvars {("-P2DT15H0M0S"^^xsd:dayTimeDuration) func:months-from-duration 0}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("-P2DT15H0M0S"^^xsd:dayTimeDuration) func:months-from-duration 0}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#months-from-duration-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma69> a r:Inference;
  r:gives {
    {{("P3DT10H"^^xsd:dayTimeDuration) func:days-from-duration 3} => {:days-from-duration-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P3DT10H"^^xsd:dayTimeDuration) func:days-from-duration 3} => {:days-from-duration-1 :result true}}]
    <#lemma292>
    [ a r:Fact; r:gives {{("P3DT10H"^^xsd:dayTimeDuration) func:days-from-duration 3} e:labelvars {("P3DT10H"^^xsd:dayTimeDuration) func:days-from-duration 3}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P3DT10H"^^xsd:dayTimeDuration) func:days-from-duration 3}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#days-from-duration-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma70> a r:Inference;
  r:gives {
    {{("P3DT55H"^^xsd:dayTimeDuration) func:days-from-duration 5} => {:days-from-duration-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P3DT55H"^^xsd:dayTimeDuration) func:days-from-duration 5} => {:days-from-duration-2 :result true}}]
    <#lemma293>
    [ a r:Fact; r:gives {{("P3DT55H"^^xsd:dayTimeDuration) func:days-from-duration 5} e:labelvars {("P3DT55H"^^xsd:dayTimeDuration) func:days-from-duration 5}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P3DT55H"^^xsd:dayTimeDuration) func:days-from-duration 5}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#days-from-duration-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma71> a r:Inference;
  r:gives {
    {{("P3Y5M"^^xsd:yearMonthDuration) func:days-from-duration 0} => {:days-from-duration-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P3Y5M"^^xsd:yearMonthDuration) func:days-from-duration 0} => {:days-from-duration-3 :result true}}]
    <#lemma294>
    [ a r:Fact; r:gives {{("P3Y5M"^^xsd:yearMonthDuration) func:days-from-duration 0} e:labelvars {("P3Y5M"^^xsd:yearMonthDuration) func:days-from-duration 0}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P3Y5M"^^xsd:yearMonthDuration) func:days-from-duration 0}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#days-from-duration-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma72> a r:Inference;
  r:gives {
    {{("P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration 10} => {:hours-from-duration-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration 10} => {:hours-from-duration-1 :result true}}]
    <#lemma295>
    [ a r:Fact; r:gives {{("P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration 10} e:labelvars {("P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration 10}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration 10}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#hours-from-duration-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma73> a r:Inference;
  r:gives {
    {{("P3DT12H32M12S"^^xsd:dayTimeDuration) func:hours-from-duration 12} => {:hours-from-duration-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P3DT12H32M12S"^^xsd:dayTimeDuration) func:hours-from-duration 12} => {:hours-from-duration-2 :result true}}]
    <#lemma296>
    [ a r:Fact; r:gives {{("P3DT12H32M12S"^^xsd:dayTimeDuration) func:hours-from-duration 12} e:labelvars {("P3DT12H32M12S"^^xsd:dayTimeDuration) func:hours-from-duration 12}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P3DT12H32M12S"^^xsd:dayTimeDuration) func:hours-from-duration 12}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#hours-from-duration-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma74> a r:Inference;
  r:gives {
    {{("PT123H"^^xsd:dayTimeDuration) func:hours-from-duration 3} => {:hours-from-duration-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("PT123H"^^xsd:dayTimeDuration) func:hours-from-duration 3} => {:hours-from-duration-3 :result true}}]
    <#lemma297>
    [ a r:Fact; r:gives {{("PT123H"^^xsd:dayTimeDuration) func:hours-from-duration 3} e:labelvars {("PT123H"^^xsd:dayTimeDuration) func:hours-from-duration 3}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("PT123H"^^xsd:dayTimeDuration) func:hours-from-duration 3}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#hours-from-duration-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma75> a r:Inference;
  r:gives {
    {{("-P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration -10} => {:hours-from-duration-4 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("-P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration -10} => {:hours-from-duration-4 :result true}}]
    <#lemma298>
    [ a r:Fact; r:gives {{("-P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration -10} e:labelvars {("-P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration -10}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("-P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration -10}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#hours-from-duration-4"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma76> a r:Inference;
  r:gives {
    {{("P3DT10H"^^xsd:dayTimeDuration) func:minutes-from-duration 0} => {:minutes-from-duration-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P3DT10H"^^xsd:dayTimeDuration) func:minutes-from-duration 0} => {:minutes-from-duration-1 :result true}}]
    <#lemma299>
    [ a r:Fact; r:gives {{("P3DT10H"^^xsd:dayTimeDuration) func:minutes-from-duration 0} e:labelvars {("P3DT10H"^^xsd:dayTimeDuration) func:minutes-from-duration 0}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P3DT10H"^^xsd:dayTimeDuration) func:minutes-from-duration 0}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#minutes-from-duration-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma77> a r:Inference;
  r:gives {
    {{("-P5DT12H30M"^^xsd:dayTimeDuration) func:minutes-from-duration -30} => {:minutes-from-duration-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("-P5DT12H30M"^^xsd:dayTimeDuration) func:minutes-from-duration -30} => {:minutes-from-duration-2 :result true}}]
    <#lemma300>
    [ a r:Fact; r:gives {{("-P5DT12H30M"^^xsd:dayTimeDuration) func:minutes-from-duration -30} e:labelvars {("-P5DT12H30M"^^xsd:dayTimeDuration) func:minutes-from-duration -30}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("-P5DT12H30M"^^xsd:dayTimeDuration) func:minutes-from-duration -30}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#minutes-from-duration-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma78> a r:Inference;
  r:gives {
    {{("P3DT10H12.5S"^^xsd:dayTimeDuration) func:seconds-from-duration 12.5} => {:seconds-from-duration-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P3DT10H12.5S"^^xsd:dayTimeDuration) func:seconds-from-duration 12.5} => {:seconds-from-duration-1 :result true}}]
    <#lemma301>
    [ a r:Fact; r:gives {{("P3DT10H12.5S"^^xsd:dayTimeDuration) func:seconds-from-duration 12.5} e:labelvars {("P3DT10H12.5S"^^xsd:dayTimeDuration) func:seconds-from-duration 12.5}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P3DT10H12.5S"^^xsd:dayTimeDuration) func:seconds-from-duration 12.5}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#seconds-from-duration-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma79> a r:Inference;
  r:gives {
    {{("-PT256S"^^xsd:dayTimeDuration) func:seconds-from-duration -16.0} => {:seconds-from-duration-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("-PT256S"^^xsd:dayTimeDuration) func:seconds-from-duration -16.0} => {:seconds-from-duration-2 :result true}}]
    <#lemma302>
    [ a r:Fact; r:gives {{("-PT256S"^^xsd:dayTimeDuration) func:seconds-from-duration -16.0} e:labelvars {("-PT256S"^^xsd:dayTimeDuration) func:seconds-from-duration -16.0}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("-PT256S"^^xsd:dayTimeDuration) func:seconds-from-duration -16.0}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#seconds-from-duration-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma80> a r:Inference;
  r:gives {
    {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:timezone-from-dateTime "-PT5H"^^xsd:dayTimeDuration} => {:timezone-from-dateTime-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:timezone-from-dateTime "-PT5H"^^xsd:dayTimeDuration} => {:timezone-from-dateTime-1 :result true}}]
    <#lemma303>
    [ a r:Fact; r:gives {{("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:timezone-from-dateTime "-PT5H"^^xsd:dayTimeDuration} e:labelvars {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:timezone-from-dateTime "-PT5H"^^xsd:dayTimeDuration}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:timezone-from-dateTime "-PT5H"^^xsd:dayTimeDuration}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#timezone-from-dateTime-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma81> a r:Inference;
  r:gives {
    {{("2000-06-12T13:20:00Z"^^xsd:dateTime) func:timezone-from-dateTime "PT0S"^^xsd:dayTimeDuration} => {:timezone-from-dateTime-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2000-06-12T13:20:00Z"^^xsd:dateTime) func:timezone-from-dateTime "PT0S"^^xsd:dayTimeDuration} => {:timezone-from-dateTime-2 :result true}}]
    <#lemma304>
    [ a r:Fact; r:gives {{("2000-06-12T13:20:00Z"^^xsd:dateTime) func:timezone-from-dateTime "PT0S"^^xsd:dayTimeDuration} e:labelvars {("2000-06-12T13:20:00Z"^^xsd:dateTime) func:timezone-from-dateTime "PT0S"^^xsd:dayTimeDuration}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2000-06-12T13:20:00Z"^^xsd:dateTime) func:timezone-from-dateTime "PT0S"^^xsd:dayTimeDuration}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#timezone-from-dateTime-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma82> a r:Inference;
  r:gives {
    {{("1999-05-31-05:00"^^xsd:date) func:timezone-from-date "-PT5H"^^xsd:dayTimeDuration} => {:timezone-from-date-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("1999-05-31-05:00"^^xsd:date) func:timezone-from-date "-PT5H"^^xsd:dayTimeDuration} => {:timezone-from-date-1 :result true}}]
    <#lemma305>
    [ a r:Fact; r:gives {{("1999-05-31-05:00"^^xsd:date) func:timezone-from-date "-PT5H"^^xsd:dayTimeDuration} e:labelvars {("1999-05-31-05:00"^^xsd:date) func:timezone-from-date "-PT5H"^^xsd:dayTimeDuration}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("1999-05-31-05:00"^^xsd:date) func:timezone-from-date "-PT5H"^^xsd:dayTimeDuration}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#timezone-from-date-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma83> a r:Inference;
  r:gives {
    {{("2000-06-12Z"^^xsd:date) func:timezone-from-date "PT0S"^^xsd:dayTimeDuration} => {:timezone-from-date-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2000-06-12Z"^^xsd:date) func:timezone-from-date "PT0S"^^xsd:dayTimeDuration} => {:timezone-from-date-2 :result true}}]
    <#lemma306>
    [ a r:Fact; r:gives {{("2000-06-12Z"^^xsd:date) func:timezone-from-date "PT0S"^^xsd:dayTimeDuration} e:labelvars {("2000-06-12Z"^^xsd:date) func:timezone-from-date "PT0S"^^xsd:dayTimeDuration}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2000-06-12Z"^^xsd:date) func:timezone-from-date "PT0S"^^xsd:dayTimeDuration}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#timezone-from-date-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma84> a r:Inference;
  r:gives {
    {{("13:20:00-05:00"^^xsd:time) func:timezone-from-time "-PT5H"^^xsd:dayTimeDuration} => {:timezone-from-time-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("13:20:00-05:00"^^xsd:time) func:timezone-from-time "-PT5H"^^xsd:dayTimeDuration} => {:timezone-from-time-1 :result true}}]
    <#lemma307>
    [ a r:Fact; r:gives {{("13:20:00-05:00"^^xsd:time) func:timezone-from-time "-PT5H"^^xsd:dayTimeDuration} e:labelvars {("13:20:00-05:00"^^xsd:time) func:timezone-from-time "-PT5H"^^xsd:dayTimeDuration}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("13:20:00-05:00"^^xsd:time) func:timezone-from-time "-PT5H"^^xsd:dayTimeDuration}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#timezone-from-time-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma85> a r:Inference;
  r:gives {
    {{("13:20:00Z"^^xsd:time) func:timezone-from-time "PT0S"^^xsd:dayTimeDuration} => {:timezone-from-time-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("13:20:00Z"^^xsd:time) func:timezone-from-time "PT0S"^^xsd:dayTimeDuration} => {:timezone-from-time-2 :result true}}]
    <#lemma308>
    [ a r:Fact; r:gives {{("13:20:00Z"^^xsd:time) func:timezone-from-time "PT0S"^^xsd:dayTimeDuration} e:labelvars {("13:20:00Z"^^xsd:time) func:timezone-from-time "PT0S"^^xsd:dayTimeDuration}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("13:20:00Z"^^xsd:time) func:timezone-from-time "PT0S"^^xsd:dayTimeDuration}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#timezone-from-time-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma86> a r:Inference;
  r:gives {
    {{("2000-10-30T06:12:00-05:00"^^xsd:dateTime "1999-11-28T09:00:00Z"^^xsd:dateTime) func:subtract-dateTimes "P337DT2H12M"^^xsd:dayTimeDuration} => {:subtract-dateTimes-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2000-10-30T06:12:00-05:00"^^xsd:dateTime "1999-11-28T09:00:00Z"^^xsd:dateTime) func:subtract-dateTimes "P337DT2H12M"^^xsd:dayTimeDuration} => {:subtract-dateTimes-1 :result true}}]
    <#lemma309>
    [ a r:Fact; r:gives {{("2000-10-30T06:12:00-05:00"^^xsd:dateTime "1999-11-28T09:00:00Z"^^xsd:dateTime) func:subtract-dateTimes "P337DT2H12M"^^xsd:dayTimeDuration} e:labelvars {("2000-10-30T06:12:00-05:00"^^xsd:dateTime "1999-11-28T09:00:00Z"^^xsd:dateTime) func:subtract-dateTimes "P337DT2H12M"^^xsd:dayTimeDuration}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2000-10-30T06:12:00-05:00"^^xsd:dateTime "1999-11-28T09:00:00Z"^^xsd:dateTime) func:subtract-dateTimes "P337DT2H12M"^^xsd:dayTimeDuration}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-dateTimes-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma87> a r:Inference;
  r:gives {
    {{("2000-10-30Z"^^xsd:date "1999-11-28Z"^^xsd:date) func:subtract-dates "P337D"^^xsd:dayTimeDuration} => {:subtract-dates-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2000-10-30Z"^^xsd:date "1999-11-28Z"^^xsd:date) func:subtract-dates "P337D"^^xsd:dayTimeDuration} => {:subtract-dates-1 :result true}}]
    <#lemma310>
    [ a r:Fact; r:gives {{("2000-10-30Z"^^xsd:date "1999-11-28Z"^^xsd:date) func:subtract-dates "P337D"^^xsd:dayTimeDuration} e:labelvars {("2000-10-30Z"^^xsd:date "1999-11-28Z"^^xsd:date) func:subtract-dates "P337D"^^xsd:dayTimeDuration}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2000-10-30Z"^^xsd:date "1999-11-28Z"^^xsd:date) func:subtract-dates "P337D"^^xsd:dayTimeDuration}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-dates-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma88> a r:Inference;
  r:gives {
    {{("11:12:00Z"^^xsd:time "04:00:00-05:00"^^xsd:time) func:subtract-times "PT2H12M"^^xsd:dayTimeDuration} => {:subtract-times-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("11:12:00Z"^^xsd:time "04:00:00-05:00"^^xsd:time) func:subtract-times "PT2H12M"^^xsd:dayTimeDuration} => {:subtract-times-1 :result true}}]
    <#lemma311>
    [ a r:Fact; r:gives {{("11:12:00Z"^^xsd:time "04:00:00-05:00"^^xsd:time) func:subtract-times "PT2H12M"^^xsd:dayTimeDuration} e:labelvars {("11:12:00Z"^^xsd:time "04:00:00-05:00"^^xsd:time) func:subtract-times "PT2H12M"^^xsd:dayTimeDuration}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("11:12:00Z"^^xsd:time "04:00:00-05:00"^^xsd:time) func:subtract-times "PT2H12M"^^xsd:dayTimeDuration}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-times-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma89> a r:Inference;
  r:gives {
    {{("11:00:00-05:00"^^xsd:time "21:30:00+05:30"^^xsd:time) func:subtract-times "PT0S"^^xsd:dayTimeDuration} => {:subtract-times-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("11:00:00-05:00"^^xsd:time "21:30:00+05:30"^^xsd:time) func:subtract-times "PT0S"^^xsd:dayTimeDuration} => {:subtract-times-2 :result true}}]
    <#lemma312>
    [ a r:Fact; r:gives {{("11:00:00-05:00"^^xsd:time "21:30:00+05:30"^^xsd:time) func:subtract-times "PT0S"^^xsd:dayTimeDuration} e:labelvars {("11:00:00-05:00"^^xsd:time "21:30:00+05:30"^^xsd:time) func:subtract-times "PT0S"^^xsd:dayTimeDuration}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("11:00:00-05:00"^^xsd:time "21:30:00+05:30"^^xsd:time) func:subtract-times "PT0S"^^xsd:dayTimeDuration}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-times-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma90> a r:Inference;
  r:gives {
    {{("17:00:00-06:00"^^xsd:time "08:00:00+09:00"^^xsd:time) func:subtract-times "P1D"^^xsd:dayTimeDuration} => {:subtract-times-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("17:00:00-06:00"^^xsd:time "08:00:00+09:00"^^xsd:time) func:subtract-times "P1D"^^xsd:dayTimeDuration} => {:subtract-times-3 :result true}}]
    <#lemma313>
    [ a r:Fact; r:gives {{("17:00:00-06:00"^^xsd:time "08:00:00+09:00"^^xsd:time) func:subtract-times "P1D"^^xsd:dayTimeDuration} e:labelvars {("17:00:00-06:00"^^xsd:time "08:00:00+09:00"^^xsd:time) func:subtract-times "P1D"^^xsd:dayTimeDuration}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("17:00:00-06:00"^^xsd:time "08:00:00+09:00"^^xsd:time) func:subtract-times "P1D"^^xsd:dayTimeDuration}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-times-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma91> a r:Inference;
  r:gives {
    {{("24:00:00"^^xsd:time "23:59:59"^^xsd:time) func:subtract-times "-PT23H59M59S"^^xsd:dayTimeDuration} => {:subtract-times-4 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("24:00:00"^^xsd:time "23:59:59"^^xsd:time) func:subtract-times "-PT23H59M59S"^^xsd:dayTimeDuration} => {:subtract-times-4 :result true}}]
    <#lemma314>
    [ a r:Fact; r:gives {{("24:00:00"^^xsd:time "23:59:59"^^xsd:time) func:subtract-times "-PT23H59M59S"^^xsd:dayTimeDuration} e:labelvars {("24:00:00"^^xsd:time "23:59:59"^^xsd:time) func:subtract-times "-PT23H59M59S"^^xsd:dayTimeDuration}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("24:00:00"^^xsd:time "23:59:59"^^xsd:time) func:subtract-times "-PT23H59M59S"^^xsd:dayTimeDuration}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-times-4"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma92> a r:Inference;
  r:gives {
    {{("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:add-yearMonthDurations "P6Y2M"^^xsd:yearMonthDuration} => {:add-yearMonthDurations-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:add-yearMonthDurations "P6Y2M"^^xsd:yearMonthDuration} => {:add-yearMonthDurations-1 :result true}}]
    <#lemma315>
    [ a r:Fact; r:gives {{("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:add-yearMonthDurations "P6Y2M"^^xsd:yearMonthDuration} e:labelvars {("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:add-yearMonthDurations "P6Y2M"^^xsd:yearMonthDuration}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:add-yearMonthDurations "P6Y2M"^^xsd:yearMonthDuration}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#add-yearMonthDurations-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma93> a r:Inference;
  r:gives {
    {{("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:subtract-yearMonthDurations "-P4M"^^xsd:yearMonthDuration} => {:subtract-yearMonthDurations-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:subtract-yearMonthDurations "-P4M"^^xsd:yearMonthDuration} => {:subtract-yearMonthDurations-1 :result true}}]
    <#lemma316>
    [ a r:Fact; r:gives {{("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:subtract-yearMonthDurations "-P4M"^^xsd:yearMonthDuration} e:labelvars {("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:subtract-yearMonthDurations "-P4M"^^xsd:yearMonthDuration}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:subtract-yearMonthDurations "-P4M"^^xsd:yearMonthDuration}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-yearMonthDurations-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma94> a r:Inference;
  r:gives {
    {{("P2Y11M"^^xsd:yearMonthDuration 2.3) func:multiply-yearMonthDuration "P6Y9M"^^xsd:yearMonthDuration} => {:multiply-yearMonthDuration-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P2Y11M"^^xsd:yearMonthDuration 2.3) func:multiply-yearMonthDuration "P6Y9M"^^xsd:yearMonthDuration} => {:multiply-yearMonthDuration-1 :result true}}]
    <#lemma317>
    [ a r:Fact; r:gives {{("P2Y11M"^^xsd:yearMonthDuration 2.3) func:multiply-yearMonthDuration "P6Y9M"^^xsd:yearMonthDuration} e:labelvars {("P2Y11M"^^xsd:yearMonthDuration 2.3) func:multiply-yearMonthDuration "P6Y9M"^^xsd:yearMonthDuration}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P2Y11M"^^xsd:yearMonthDuration 2.3) func:multiply-yearMonthDuration "P6Y9M"^^xsd:yearMonthDuration}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#multiply-yearMonthDuration-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma95> a r:Inference;
  r:gives {
    {{("P2Y11M"^^xsd:yearMonthDuration 1.5) func:divide-yearMonthDuration "P1Y11M"^^xsd:yearMonthDuration} => {:divide-yearMonthDuration-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P2Y11M"^^xsd:yearMonthDuration 1.5) func:divide-yearMonthDuration "P1Y11M"^^xsd:yearMonthDuration} => {:divide-yearMonthDuration-1 :result true}}]
    <#lemma318>
    [ a r:Fact; r:gives {{("P2Y11M"^^xsd:yearMonthDuration 1.5) func:divide-yearMonthDuration "P1Y11M"^^xsd:yearMonthDuration} e:labelvars {("P2Y11M"^^xsd:yearMonthDuration 1.5) func:divide-yearMonthDuration "P1Y11M"^^xsd:yearMonthDuration}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P2Y11M"^^xsd:yearMonthDuration 1.5) func:divide-yearMonthDuration "P1Y11M"^^xsd:yearMonthDuration}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#divide-yearMonthDuration-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma96> a r:Inference;
  r:gives {
    {{("P3Y4M"^^xsd:yearMonthDuration "-P1Y4M"^^xsd:yearMonthDuration) func:divide-yearMonthDuration-by-yearMonthDuration -2.5} => {:divide-yearMonthDuration-by-yearMonthDuration-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P3Y4M"^^xsd:yearMonthDuration "-P1Y4M"^^xsd:yearMonthDuration) func:divide-yearMonthDuration-by-yearMonthDuration -2.5} => {:divide-yearMonthDuration-by-yearMonthDuration-1 :result true}}]
    <#lemma319>
    [ a r:Fact; r:gives {{("P3Y4M"^^xsd:yearMonthDuration "-P1Y4M"^^xsd:yearMonthDuration) func:divide-yearMonthDuration-by-yearMonthDuration -2.5} e:labelvars {("P3Y4M"^^xsd:yearMonthDuration "-P1Y4M"^^xsd:yearMonthDuration) func:divide-yearMonthDuration-by-yearMonthDuration -2.5}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P3Y4M"^^xsd:yearMonthDuration "-P1Y4M"^^xsd:yearMonthDuration) func:divide-yearMonthDuration-by-yearMonthDuration -2.5}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#divide-yearMonthDuration-by-yearMonthDuration-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma97> a r:Inference;
  r:gives {
    {{("P2DT12H5M"^^xsd:dayTimeDuration "P5DT12H"^^xsd:dayTimeDuration) func:add-dayTimeDurations "P8DT5M"^^xsd:dayTimeDuration} => {:add-dayTimeDurations-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P2DT12H5M"^^xsd:dayTimeDuration "P5DT12H"^^xsd:dayTimeDuration) func:add-dayTimeDurations "P8DT5M"^^xsd:dayTimeDuration} => {:add-dayTimeDurations-1 :result true}}]
    <#lemma320>
    [ a r:Fact; r:gives {{("P2DT12H5M"^^xsd:dayTimeDuration "P5DT12H"^^xsd:dayTimeDuration) func:add-dayTimeDurations "P8DT5M"^^xsd:dayTimeDuration} e:labelvars {("P2DT12H5M"^^xsd:dayTimeDuration "P5DT12H"^^xsd:dayTimeDuration) func:add-dayTimeDurations "P8DT5M"^^xsd:dayTimeDuration}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P2DT12H5M"^^xsd:dayTimeDuration "P5DT12H"^^xsd:dayTimeDuration) func:add-dayTimeDurations "P8DT5M"^^xsd:dayTimeDuration}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#add-dayTimeDurations-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma98> a r:Inference;
  r:gives {
    {{("P2DT12H"^^xsd:dayTimeDuration "P1DT10H30M"^^xsd:dayTimeDuration) func:subtract-dayTimeDurations "P1DT1H30M"^^xsd:dayTimeDuration} => {:subtract-dayTimeDurations-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P2DT12H"^^xsd:dayTimeDuration "P1DT10H30M"^^xsd:dayTimeDuration) func:subtract-dayTimeDurations "P1DT1H30M"^^xsd:dayTimeDuration} => {:subtract-dayTimeDurations-1 :result true}}]
    <#lemma321>
    [ a r:Fact; r:gives {{("P2DT12H"^^xsd:dayTimeDuration "P1DT10H30M"^^xsd:dayTimeDuration) func:subtract-dayTimeDurations "P1DT1H30M"^^xsd:dayTimeDuration} e:labelvars {("P2DT12H"^^xsd:dayTimeDuration "P1DT10H30M"^^xsd:dayTimeDuration) func:subtract-dayTimeDurations "P1DT1H30M"^^xsd:dayTimeDuration}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P2DT12H"^^xsd:dayTimeDuration "P1DT10H30M"^^xsd:dayTimeDuration) func:subtract-dayTimeDurations "P1DT1H30M"^^xsd:dayTimeDuration}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-dayTimeDurations-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma99> a r:Inference;
  r:gives {
    {{("PT2H10M"^^xsd:dayTimeDuration 2.1) func:multiply-dayTimeDuration "PT4H33M"^^xsd:dayTimeDuration} => {:multiply-dayTimeDuration-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("PT2H10M"^^xsd:dayTimeDuration 2.1) func:multiply-dayTimeDuration "PT4H33M"^^xsd:dayTimeDuration} => {:multiply-dayTimeDuration-1 :result true}}]
    <#lemma322>
    [ a r:Fact; r:gives {{("PT2H10M"^^xsd:dayTimeDuration 2.1) func:multiply-dayTimeDuration "PT4H33M"^^xsd:dayTimeDuration} e:labelvars {("PT2H10M"^^xsd:dayTimeDuration 2.1) func:multiply-dayTimeDuration "PT4H33M"^^xsd:dayTimeDuration}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("PT2H10M"^^xsd:dayTimeDuration 2.1) func:multiply-dayTimeDuration "PT4H33M"^^xsd:dayTimeDuration}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#multiply-dayTimeDuration-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma100> a r:Inference;
  r:gives {
    {{("P1DT2H30M10.5S"^^xsd:dayTimeDuration 1.5) func:divide-dayTimeDuration "PT17H40M7S"^^xsd:dayTimeDuration} => {:divide-dayTimeDuration-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P1DT2H30M10.5S"^^xsd:dayTimeDuration 1.5) func:divide-dayTimeDuration "PT17H40M7S"^^xsd:dayTimeDuration} => {:divide-dayTimeDuration-1 :result true}}]
    <#lemma323>
    [ a r:Fact; r:gives {{("P1DT2H30M10.5S"^^xsd:dayTimeDuration 1.5) func:divide-dayTimeDuration "PT17H40M7S"^^xsd:dayTimeDuration} e:labelvars {("P1DT2H30M10.5S"^^xsd:dayTimeDuration 1.5) func:divide-dayTimeDuration "PT17H40M7S"^^xsd:dayTimeDuration}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P1DT2H30M10.5S"^^xsd:dayTimeDuration 1.5) func:divide-dayTimeDuration "PT17H40M7S"^^xsd:dayTimeDuration}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#divide-dayTimeDuration-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma101> a r:Inference;
  r:gives {
    {{("PT4H33M"^^xsd:dayTimeDuration "PT2H10M"^^xsd:dayTimeDuration) func:divide-dayTimeDuration-by-dayTimeDuration 2.1} => {:divide-dayTimeDuration-by-dayTimeDuration-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("PT4H33M"^^xsd:dayTimeDuration "PT2H10M"^^xsd:dayTimeDuration) func:divide-dayTimeDuration-by-dayTimeDuration 2.1} => {:divide-dayTimeDuration-by-dayTimeDuration-1 :result true}}]
    <#lemma324>
    [ a r:Fact; r:gives {{("PT4H33M"^^xsd:dayTimeDuration "PT2H10M"^^xsd:dayTimeDuration) func:divide-dayTimeDuration-by-dayTimeDuration 2.1} e:labelvars {("PT4H33M"^^xsd:dayTimeDuration "PT2H10M"^^xsd:dayTimeDuration) func:divide-dayTimeDuration-by-dayTimeDuration 2.1}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("PT4H33M"^^xsd:dayTimeDuration "PT2H10M"^^xsd:dayTimeDuration) func:divide-dayTimeDuration-by-dayTimeDuration 2.1}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#divide-dayTimeDuration-by-dayTimeDuration-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma102> a r:Inference;
  r:gives {
    {{("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-dateTime "2001-12-30T11:12:00Z"^^xsd:dateTime} => {:add-yearMonthDuration-to-dateTime-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-dateTime "2001-12-30T11:12:00Z"^^xsd:dateTime} => {:add-yearMonthDuration-to-dateTime-1 :result true}}]
    <#lemma325>
    [ a r:Fact; r:gives {{("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-dateTime "2001-12-30T11:12:00Z"^^xsd:dateTime} e:labelvars {("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-dateTime "2001-12-30T11:12:00Z"^^xsd:dateTime}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-dateTime "2001-12-30T11:12:00Z"^^xsd:dateTime}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#add-yearMonthDuration-to-dateTime-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma103> a r:Inference;
  r:gives {
    {{("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-date "2001-12-30Z"^^xsd:date} => {:add-yearMonthDuration-to-date-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-date "2001-12-30Z"^^xsd:date} => {:add-yearMonthDuration-to-date-1 :result true}}]
    <#lemma326>
    [ a r:Fact; r:gives {{("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-date "2001-12-30Z"^^xsd:date} e:labelvars {("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-date "2001-12-30Z"^^xsd:date}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-date "2001-12-30Z"^^xsd:date}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#add-yearMonthDuration-to-date-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma104> a r:Inference;
  r:gives {
    {{("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-dateTime "2000-11-02T12:27:00Z"^^xsd:dateTime} => {:add-dayTimeDuration-to-dateTime-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-dateTime "2000-11-02T12:27:00Z"^^xsd:dateTime} => {:add-dayTimeDuration-to-dateTime-1 :result true}}]
    <#lemma327>
    [ a r:Fact; r:gives {{("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-dateTime "2000-11-02T12:27:00Z"^^xsd:dateTime} e:labelvars {("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-dateTime "2000-11-02T12:27:00Z"^^xsd:dateTime}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-dateTime "2000-11-02T12:27:00Z"^^xsd:dateTime}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#add-dayTimeDuration-to-dateTime-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma105> a r:Inference;
  r:gives {
    {{("2004-10-30Z"^^xsd:date "P2DT2H30M0S"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-date "2004-11-01Z"^^xsd:date} => {:add-dayTimeDuration-to-date-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2004-10-30Z"^^xsd:date "P2DT2H30M0S"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-date "2004-11-01Z"^^xsd:date} => {:add-dayTimeDuration-to-date-1 :result true}}]
    <#lemma328>
    [ a r:Fact; r:gives {{("2004-10-30Z"^^xsd:date "P2DT2H30M0S"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-date "2004-11-01Z"^^xsd:date} e:labelvars {("2004-10-30Z"^^xsd:date "P2DT2H30M0S"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-date "2004-11-01Z"^^xsd:date}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2004-10-30Z"^^xsd:date "P2DT2H30M0S"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-date "2004-11-01Z"^^xsd:date}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#add-dayTimeDuration-to-date-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma106> a r:Inference;
  r:gives {
    {{("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-time "12:27:00Z"^^xsd:time} => {:add-dayTimeDuration-to-time-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-time "12:27:00Z"^^xsd:time} => {:add-dayTimeDuration-to-time-1 :result true}}]
    <#lemma329>
    [ a r:Fact; r:gives {{("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-time "12:27:00Z"^^xsd:time} e:labelvars {("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-time "12:27:00Z"^^xsd:time}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-time "12:27:00Z"^^xsd:time}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#add-dayTimeDuration-to-time-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma107> a r:Inference;
  r:gives {
    {{("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-dateTime "1999-08-30T11:12:00Z"^^xsd:dateTime} => {:subtract-yearMonthDuration-from-dateTime-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-dateTime "1999-08-30T11:12:00Z"^^xsd:dateTime} => {:subtract-yearMonthDuration-from-dateTime-1 :result true}}]
    <#lemma330>
    [ a r:Fact; r:gives {{("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-dateTime "1999-08-30T11:12:00Z"^^xsd:dateTime} e:labelvars {("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-dateTime "1999-08-30T11:12:00Z"^^xsd:dateTime}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-dateTime "1999-08-30T11:12:00Z"^^xsd:dateTime}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-yearMonthDuration-from-dateTime-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma108> a r:Inference;
  r:gives {
    {{("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-date "1999-08-30Z"^^xsd:date} => {:subtract-yearMonthDuration-from-date-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-date "1999-08-30Z"^^xsd:date} => {:subtract-yearMonthDuration-from-date-1 :result true}}]
    <#lemma331>
    [ a r:Fact; r:gives {{("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-date "1999-08-30Z"^^xsd:date} e:labelvars {("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-date "1999-08-30Z"^^xsd:date}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-date "1999-08-30Z"^^xsd:date}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-yearMonthDuration-from-date-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma109> a r:Inference;
  r:gives {
    {{("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-dateTime "2000-10-27T09:57:00Z"^^xsd:dateTime} => {:subtract-dayTimeDuration-from-dateTime-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-dateTime "2000-10-27T09:57:00Z"^^xsd:dateTime} => {:subtract-dayTimeDuration-from-dateTime-1 :result true}}]
    <#lemma332>
    [ a r:Fact; r:gives {{("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-dateTime "2000-10-27T09:57:00Z"^^xsd:dateTime} e:labelvars {("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-dateTime "2000-10-27T09:57:00Z"^^xsd:dateTime}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-dateTime "2000-10-27T09:57:00Z"^^xsd:dateTime}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-dayTimeDuration-from-dateTime-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma110> a r:Inference;
  r:gives {
    {{("2000-10-30Z"^^xsd:date "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-date "2000-10-26Z"^^xsd:date} => {:subtract-dayTimeDuration-from-date-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2000-10-30Z"^^xsd:date "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-date "2000-10-26Z"^^xsd:date} => {:subtract-dayTimeDuration-from-date-1 :result true}}]
    <#lemma333>
    [ a r:Fact; r:gives {{("2000-10-30Z"^^xsd:date "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-date "2000-10-26Z"^^xsd:date} e:labelvars {("2000-10-30Z"^^xsd:date "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-date "2000-10-26Z"^^xsd:date}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2000-10-30Z"^^xsd:date "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-date "2000-10-26Z"^^xsd:date}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-dayTimeDuration-from-date-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma111> a r:Inference;
  r:gives {
    {{("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "09:57:00Z"^^xsd:time} => {:subtract-dayTimeDuration-from-time-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "09:57:00Z"^^xsd:time} => {:subtract-dayTimeDuration-from-time-1 :result true}}]
    <#lemma334>
    [ a r:Fact; r:gives {{("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "09:57:00Z"^^xsd:time} e:labelvars {("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "09:57:00Z"^^xsd:time}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "09:57:00Z"^^xsd:time}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-dayTimeDuration-from-time-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma112> a r:Inference;
  r:gives {
    {{("08:20:00-05:00"^^xsd:time "P23DT10H10M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "22:10:00-05:00"^^xsd:time} => {:subtract-dayTimeDuration-from-time-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("08:20:00-05:00"^^xsd:time "P23DT10H10M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "22:10:00-05:00"^^xsd:time} => {:subtract-dayTimeDuration-from-time-2 :result true}}]
    <#lemma335>
    [ a r:Fact; r:gives {{("08:20:00-05:00"^^xsd:time "P23DT10H10M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "22:10:00-05:00"^^xsd:time} e:labelvars {("08:20:00-05:00"^^xsd:time "P23DT10H10M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "22:10:00-05:00"^^xsd:time}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("08:20:00-05:00"^^xsd:time "P23DT10H10M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "22:10:00-05:00"^^xsd:time}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-dayTimeDuration-from-time-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma113> a r:Inference;
  r:gives {
    {{("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-equal true} => {:dateTime-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-equal true} => {:dateTime-equal-1 :result true}}]
    <#lemma336>
    [ a r:Fact; r:gives {{("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-equal true} e:labelvars {("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma114> a r:Inference;
  r:gives {
    {{("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T23:00:00+06:00"^^xsd:dateTime) pred:dateTime-equal true} => {:dateTime-equal-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T23:00:00+06:00"^^xsd:dateTime) pred:dateTime-equal true} => {:dateTime-equal-2 :result true}}]
    <#lemma337>
    [ a r:Fact; r:gives {{("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T23:00:00+06:00"^^xsd:dateTime) pred:dateTime-equal true} e:labelvars {("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T23:00:00+06:00"^^xsd:dateTime) pred:dateTime-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T23:00:00+06:00"^^xsd:dateTime) pred:dateTime-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-equal-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma115> a r:Inference;
  r:gives {
    {{("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T17:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false} => {:dateTime-equal-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T17:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false} => {:dateTime-equal-3 :result true}}]
    <#lemma338>
    [ a r:Fact; r:gives {{("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T17:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false} e:labelvars {("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T17:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T17:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-equal-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma116> a r:Inference;
  r:gives {
    {{("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T12:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true} => {:dateTime-equal-4 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T12:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true} => {:dateTime-equal-4 :result true}}]
    <#lemma339>
    [ a r:Fact; r:gives {{("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T12:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true} e:labelvars {("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T12:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T12:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-equal-4"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma117> a r:Inference;
  r:gives {
    {{("2002-04-02T23:00:00-04:00"^^xsd:dateTime "2002-04-03T02:00:00-01:00"^^xsd:dateTime) pred:dateTime-equal true} => {:dateTime-equal-5 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2002-04-02T23:00:00-04:00"^^xsd:dateTime "2002-04-03T02:00:00-01:00"^^xsd:dateTime) pred:dateTime-equal true} => {:dateTime-equal-5 :result true}}]
    <#lemma340>
    [ a r:Fact; r:gives {{("2002-04-02T23:00:00-04:00"^^xsd:dateTime "2002-04-03T02:00:00-01:00"^^xsd:dateTime) pred:dateTime-equal true} e:labelvars {("2002-04-02T23:00:00-04:00"^^xsd:dateTime "2002-04-03T02:00:00-01:00"^^xsd:dateTime) pred:dateTime-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2002-04-02T23:00:00-04:00"^^xsd:dateTime "2002-04-03T02:00:00-01:00"^^xsd:dateTime) pred:dateTime-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-equal-5"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma118> a r:Inference;
  r:gives {
    {{("1999-12-31T24:00:00-05:00"^^xsd:dateTime "2000-01-01T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true} => {:dateTime-equal-6 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("1999-12-31T24:00:00-05:00"^^xsd:dateTime "2000-01-01T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true} => {:dateTime-equal-6 :result true}}]
    <#lemma341>
    [ a r:Fact; r:gives {{("1999-12-31T24:00:00-05:00"^^xsd:dateTime "2000-01-01T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true} e:labelvars {("1999-12-31T24:00:00-05:00"^^xsd:dateTime "2000-01-01T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("1999-12-31T24:00:00-05:00"^^xsd:dateTime "2000-01-01T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-equal-6"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma119> a r:Inference;
  r:gives {
    {{("2005-04-04T24:00:00-05:00"^^xsd:dateTime "2005-04-04T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false} => {:dateTime-equal-7 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2005-04-04T24:00:00-05:00"^^xsd:dateTime "2005-04-04T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false} => {:dateTime-equal-7 :result true}}]
    <#lemma342>
    [ a r:Fact; r:gives {{("2005-04-04T24:00:00-05:00"^^xsd:dateTime "2005-04-04T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false} e:labelvars {("2005-04-04T24:00:00-05:00"^^xsd:dateTime "2005-04-04T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2005-04-04T24:00:00-05:00"^^xsd:dateTime "2005-04-04T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-equal-7"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma120> a r:Inference;
  r:gives {
    {{("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than true} => {:dateTime-less-than-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than true} => {:dateTime-less-than-1 :result true}}]
    <#lemma343>
    [ a r:Fact; r:gives {{("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than true} e:labelvars {("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-less-than-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma121> a r:Inference;
  r:gives {
    {{("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than true} => {:dateTime-greater-than-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than true} => {:dateTime-greater-than-1 :result true}}]
    <#lemma344>
    [ a r:Fact; r:gives {{("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than true} e:labelvars {("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-greater-than-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma122> a r:Inference;
  r:gives {
    {{("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-equal false} => {:date-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-equal false} => {:date-equal-1 :result true}}]
    <#lemma345>
    [ a r:Fact; r:gives {{("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-equal false} e:labelvars {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-equal false}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-equal false}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#date-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma123> a r:Inference;
  r:gives {
    {{("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-equal true} => {:date-equal-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-equal true} => {:date-equal-2 :result true}}]
    <#lemma346>
    [ a r:Fact; r:gives {{("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-equal true} e:labelvars {("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#date-equal-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma124> a r:Inference;
  r:gives {
    {{("2004-12-25Z"^^xsd:date "2004-12-25-05:00"^^xsd:date) pred:date-less-than true} => {:date-less-than-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2004-12-25Z"^^xsd:date "2004-12-25-05:00"^^xsd:date) pred:date-less-than true} => {:date-less-than-1 :result true}}]
    <#lemma347>
    [ a r:Fact; r:gives {{("2004-12-25Z"^^xsd:date "2004-12-25-05:00"^^xsd:date) pred:date-less-than true} e:labelvars {("2004-12-25Z"^^xsd:date "2004-12-25-05:00"^^xsd:date) pred:date-less-than true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2004-12-25Z"^^xsd:date "2004-12-25-05:00"^^xsd:date) pred:date-less-than true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#date-less-than-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma125> a r:Inference;
  r:gives {
    {{("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-less-than false} => {:date-less-than-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-less-than false} => {:date-less-than-2 :result true}}]
    <#lemma348>
    [ a r:Fact; r:gives {{("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-less-than false} e:labelvars {("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-less-than false}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-less-than false}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#date-less-than-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma126> a r:Inference;
  r:gives {
    {{("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than true} => {:date-greater-than-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than true} => {:date-greater-than-1 :result true}}]
    <#lemma349>
    [ a r:Fact; r:gives {{("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than true} e:labelvars {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#date-greater-than-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma127> a r:Inference;
  r:gives {
    {{("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-greater-than false} => {:date-greater-than-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-greater-than false} => {:date-greater-than-2 :result true}}]
    <#lemma350>
    [ a r:Fact; r:gives {{("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-greater-than false} e:labelvars {("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-greater-than false}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-greater-than false}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#date-greater-than-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma128> a r:Inference;
  r:gives {
    {{("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-equal false} => {:time-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-equal false} => {:time-equal-1 :result true}}]
    <#lemma351>
    [ a r:Fact; r:gives {{("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-equal false} e:labelvars {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-equal false}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-equal false}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#time-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma129> a r:Inference;
  r:gives {
    {{("21:30:00+10:30"^^xsd:time "06:00:00-05:00"^^xsd:time) pred:time-equal true} => {:time-equal-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("21:30:00+10:30"^^xsd:time "06:00:00-05:00"^^xsd:time) pred:time-equal true} => {:time-equal-2 :result true}}]
    <#lemma352>
    [ a r:Fact; r:gives {{("21:30:00+10:30"^^xsd:time "06:00:00-05:00"^^xsd:time) pred:time-equal true} e:labelvars {("21:30:00+10:30"^^xsd:time "06:00:00-05:00"^^xsd:time) pred:time-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("21:30:00+10:30"^^xsd:time "06:00:00-05:00"^^xsd:time) pred:time-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#time-equal-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma130> a r:Inference;
  r:gives {
    {{("24:00:00+01:00"^^xsd:time "00:00:00+01:00"^^xsd:time) pred:time-equal true} => {:time-equal-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("24:00:00+01:00"^^xsd:time "00:00:00+01:00"^^xsd:time) pred:time-equal true} => {:time-equal-3 :result true}}]
    <#lemma353>
    [ a r:Fact; r:gives {{("24:00:00+01:00"^^xsd:time "00:00:00+01:00"^^xsd:time) pred:time-equal true} e:labelvars {("24:00:00+01:00"^^xsd:time "00:00:00+01:00"^^xsd:time) pred:time-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("24:00:00+01:00"^^xsd:time "00:00:00+01:00"^^xsd:time) pred:time-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#time-equal-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma131> a r:Inference;
  r:gives {
    {{("12:00:00-05:00"^^xsd:time "23:00:00+06:00"^^xsd:time) pred:time-less-than false} => {:time-less-than-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("12:00:00-05:00"^^xsd:time "23:00:00+06:00"^^xsd:time) pred:time-less-than false} => {:time-less-than-1 :result true}}]
    <#lemma354>
    [ a r:Fact; r:gives {{("12:00:00-05:00"^^xsd:time "23:00:00+06:00"^^xsd:time) pred:time-less-than false} e:labelvars {("12:00:00-05:00"^^xsd:time "23:00:00+06:00"^^xsd:time) pred:time-less-than false}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("12:00:00-05:00"^^xsd:time "23:00:00+06:00"^^xsd:time) pred:time-less-than false}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#time-less-than-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma132> a r:Inference;
  r:gives {
    {{("11:00:00-05:00"^^xsd:time "17:00:00Z"^^xsd:time) pred:time-less-than true} => {:time-less-than-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("11:00:00-05:00"^^xsd:time "17:00:00Z"^^xsd:time) pred:time-less-than true} => {:time-less-than-2 :result true}}]
    <#lemma355>
    [ a r:Fact; r:gives {{("11:00:00-05:00"^^xsd:time "17:00:00Z"^^xsd:time) pred:time-less-than true} e:labelvars {("11:00:00-05:00"^^xsd:time "17:00:00Z"^^xsd:time) pred:time-less-than true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("11:00:00-05:00"^^xsd:time "17:00:00Z"^^xsd:time) pred:time-less-than true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#time-less-than-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma133> a r:Inference;
  r:gives {
    {{("23:59:59-05:00"^^xsd:time "24:00:00-05:00"^^xsd:time) pred:time-less-than false} => {:time-less-than-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("23:59:59-05:00"^^xsd:time "24:00:00-05:00"^^xsd:time) pred:time-less-than false} => {:time-less-than-3 :result true}}]
    <#lemma356>
    [ a r:Fact; r:gives {{("23:59:59-05:00"^^xsd:time "24:00:00-05:00"^^xsd:time) pred:time-less-than false} e:labelvars {("23:59:59-05:00"^^xsd:time "24:00:00-05:00"^^xsd:time) pred:time-less-than false}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("23:59:59-05:00"^^xsd:time "24:00:00-05:00"^^xsd:time) pred:time-less-than false}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#time-less-than-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma134> a r:Inference;
  r:gives {
    {{("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than false} => {:time-greater-than-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than false} => {:time-greater-than-1 :result true}}]
    <#lemma357>
    [ a r:Fact; r:gives {{("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than false} e:labelvars {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than false}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than false}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#time-greater-than-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma135> a r:Inference;
  r:gives {
    {{("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-equal true} => {:duration-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-equal true} => {:duration-equal-1 :result true}}]
    <#lemma358>
    [ a r:Fact; r:gives {{("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-equal true} e:labelvars {("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#duration-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma136> a r:Inference;
  r:gives {
    {{("PT24H"^^xsd:duration "P1D"^^xsd:duration) pred:duration-equal true} => {:duration-equal-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("PT24H"^^xsd:duration "P1D"^^xsd:duration) pred:duration-equal true} => {:duration-equal-2 :result true}}]
    <#lemma359>
    [ a r:Fact; r:gives {{("PT24H"^^xsd:duration "P1D"^^xsd:duration) pred:duration-equal true} e:labelvars {("PT24H"^^xsd:duration "P1D"^^xsd:duration) pred:duration-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("PT24H"^^xsd:duration "P1D"^^xsd:duration) pred:duration-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#duration-equal-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma137> a r:Inference;
  r:gives {
    {{("P1Y"^^xsd:duration "P365D"^^xsd:duration) pred:duration-equal false} => {:duration-equal-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P1Y"^^xsd:duration "P365D"^^xsd:duration) pred:duration-equal false} => {:duration-equal-3 :result true}}]
    <#lemma360>
    [ a r:Fact; r:gives {{("P1Y"^^xsd:duration "P365D"^^xsd:duration) pred:duration-equal false} e:labelvars {("P1Y"^^xsd:duration "P365D"^^xsd:duration) pred:duration-equal false}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P1Y"^^xsd:duration "P365D"^^xsd:duration) pred:duration-equal false}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#duration-equal-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma138> a r:Inference;
  r:gives {
    {{("P2Y0M0DT0H0M0S"^^xsd:duration "P24M"^^xsd:duration) pred:duration-equal true} => {:duration-equal-4 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P2Y0M0DT0H0M0S"^^xsd:duration "P24M"^^xsd:duration) pred:duration-equal true} => {:duration-equal-4 :result true}}]
    <#lemma361>
    [ a r:Fact; r:gives {{("P2Y0M0DT0H0M0S"^^xsd:duration "P24M"^^xsd:duration) pred:duration-equal true} e:labelvars {("P2Y0M0DT0H0M0S"^^xsd:duration "P24M"^^xsd:duration) pred:duration-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P2Y0M0DT0H0M0S"^^xsd:duration "P24M"^^xsd:duration) pred:duration-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#duration-equal-4"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma139> a r:Inference;
  r:gives {
    {{("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than true} => {:dayTimeDuration-less-than-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than true} => {:dayTimeDuration-less-than-1 :result true}}]
    <#lemma362>
    [ a r:Fact; r:gives {{("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than true} e:labelvars {("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dayTimeDuration-less-than-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma140> a r:Inference;
  r:gives {
    {{("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than false} => {:dayTimeDuration-greater-than-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than false} => {:dayTimeDuration-greater-than-1 :result true}}]
    <#lemma363>
    [ a r:Fact; r:gives {{("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than false} e:labelvars {("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than false}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than false}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dayTimeDuration-greater-than-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma141> a r:Inference;
  r:gives {
    {{("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than true} => {:yearMonthDuration-less-than-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than true} => {:yearMonthDuration-less-than-1 :result true}}]
    <#lemma364>
    [ a r:Fact; r:gives {{("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than true} e:labelvars {("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#yearMonthDuration-less-than-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma142> a r:Inference;
  r:gives {
    {{("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than false} => {:yearMonthDuration-greater-than-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than false} => {:yearMonthDuration-greater-than-1 :result true}}]
    <#lemma365>
    [ a r:Fact; r:gives {{("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than false} e:labelvars {("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than false}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than false}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#yearMonthDuration-greater-than-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma143> a r:Inference;
  r:gives {
    {{("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-not-equal false} => {:dateTime-not-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-not-equal false} => {:dateTime-not-equal-1 :result true}}]
    <#lemma366>
    [ a r:Fact; r:gives {{("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-not-equal false} e:labelvars {("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-not-equal false}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-not-equal false}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-not-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma144> a r:Inference;
  r:gives {
    {{("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than-or-equal true} => {:dateTime-less-than-or-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than-or-equal true} => {:dateTime-less-than-or-equal-1 :result true}}]
    <#lemma367>
    [ a r:Fact; r:gives {{("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than-or-equal true} e:labelvars {("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than-or-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than-or-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-less-than-or-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma145> a r:Inference;
  r:gives {
    {{("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than-or-equal true} => {:dateTime-greater-than-or-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than-or-equal true} => {:dateTime-greater-than-or-equal-1 :result true}}]
    <#lemma368>
    [ a r:Fact; r:gives {{("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than-or-equal true} e:labelvars {("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than-or-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than-or-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-greater-than-or-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma146> a r:Inference;
  r:gives {
    {{("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-not-equal true} => {:date-not-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-not-equal true} => {:date-not-equal-1 :result true}}]
    <#lemma369>
    [ a r:Fact; r:gives {{("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-not-equal true} e:labelvars {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-not-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-not-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#date-not-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma147> a r:Inference;
  r:gives {
    {{("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-less-than-or-equal false} => {:date-less-than-or-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-less-than-or-equal false} => {:date-less-than-or-equal-1 :result true}}]
    <#lemma370>
    [ a r:Fact; r:gives {{("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-less-than-or-equal false} e:labelvars {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-less-than-or-equal false}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-less-than-or-equal false}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#date-less-than-or-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma148> a r:Inference;
  r:gives {
    {{("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than-or-equal true} => {:date-greater-than-or-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than-or-equal true} => {:date-greater-than-or-equal-1 :result true}}]
    <#lemma371>
    [ a r:Fact; r:gives {{("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than-or-equal true} e:labelvars {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than-or-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than-or-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#date-greater-than-or-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma149> a r:Inference;
  r:gives {
    {{("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-not-equal true} => {:time-not-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-not-equal true} => {:time-not-equal-1 :result true}}]
    <#lemma372>
    [ a r:Fact; r:gives {{("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-not-equal true} e:labelvars {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-not-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-not-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#time-not-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma150> a r:Inference;
  r:gives {
    {{("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-less-than-or-equal true} => {:time-less-than-or-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-less-than-or-equal true} => {:time-less-than-or-equal-1 :result true}}]
    <#lemma373>
    [ a r:Fact; r:gives {{("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-less-than-or-equal true} e:labelvars {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-less-than-or-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-less-than-or-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#time-less-than-or-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma151> a r:Inference;
  r:gives {
    {{("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than-or-equal false} => {:time-greater-than-or-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than-or-equal false} => {:time-greater-than-or-equal-1 :result true}}]
    <#lemma374>
    [ a r:Fact; r:gives {{("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than-or-equal false} e:labelvars {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than-or-equal false}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than-or-equal false}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#time-greater-than-or-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma152> a r:Inference;
  r:gives {
    {{("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-not-equal false} => {:duration-not-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-not-equal false} => {:duration-not-equal-1 :result true}}]
    <#lemma375>
    [ a r:Fact; r:gives {{("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-not-equal false} e:labelvars {("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-not-equal false}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-not-equal false}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#duration-not-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma153> a r:Inference;
  r:gives {
    {{("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than-or-equal true} => {:dayTimeDuration-less-than-or-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than-or-equal true} => {:dayTimeDuration-less-than-or-equal-1 :result true}}]
    <#lemma376>
    [ a r:Fact; r:gives {{("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than-or-equal true} e:labelvars {("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than-or-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than-or-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dayTimeDuration-less-than-or-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma154> a r:Inference;
  r:gives {
    {{("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than-or-equal false} => {:dayTimeDuration-greater-than-or-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than-or-equal false} => {:dayTimeDuration-greater-than-or-equal-1 :result true}}]
    <#lemma377>
    [ a r:Fact; r:gives {{("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than-or-equal false} e:labelvars {("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than-or-equal false}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than-or-equal false}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dayTimeDuration-greater-than-or-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma155> a r:Inference;
  r:gives {
    {{("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than-or-equal true} => {:yearMonthDuration-less-than-or-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than-or-equal true} => {:yearMonthDuration-less-than-or-equal-1 :result true}}]
    <#lemma378>
    [ a r:Fact; r:gives {{("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than-or-equal true} e:labelvars {("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than-or-equal true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than-or-equal true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#yearMonthDuration-less-than-or-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma156> a r:Inference;
  r:gives {
    {{("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than-or-equal false} => {:yearMonthDuration-greater-than-or-equal-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than-or-equal false} => {:yearMonthDuration-greater-than-or-equal-1 :result true}}]
    <#lemma379>
    [ a r:Fact; r:gives {{("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than-or-equal false} e:labelvars {("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than-or-equal false}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than-or-equal false}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#yearMonthDuration-greater-than-or-equal-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma157> a r:Inference;
  r:gives {
    {{("Family Guy") func:PlainLiteral-from-string-lang "Family Guy"} => {:PlainLiteral-from-string-lang-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("Family Guy") func:PlainLiteral-from-string-lang "Family Guy"} => {:PlainLiteral-from-string-lang-1 :result true}}]
    <#lemma380>
    [ a r:Fact; r:gives {{("Family Guy") func:PlainLiteral-from-string-lang "Family Guy"} e:labelvars {("Family Guy") func:PlainLiteral-from-string-lang "Family Guy"}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("Family Guy") func:PlainLiteral-from-string-lang "Family Guy"}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#PlainLiteral-from-string-lang-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma158> a r:Inference;
  r:gives {
    {{("Family Guy" "EN") func:PlainLiteral-from-string-lang "Family Guy"@en} => {:PlainLiteral-from-string-lang-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("Family Guy" "EN") func:PlainLiteral-from-string-lang "Family Guy"@en} => {:PlainLiteral-from-string-lang-2 :result true}}]
    <#lemma381>
    [ a r:Fact; r:gives {{("Family Guy" "EN") func:PlainLiteral-from-string-lang "Family Guy"@en} e:labelvars {("Family Guy" "EN") func:PlainLiteral-from-string-lang "Family Guy"@en}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("Family Guy" "EN") func:PlainLiteral-from-string-lang "Family Guy"@en}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#PlainLiteral-from-string-lang-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma159> a r:Inference;
  r:gives {
    {{("Family Guy") func:string-from-PlainLiteral "Family Guy"} => {:string-from-PlainLiteral-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("Family Guy") func:string-from-PlainLiteral "Family Guy"} => {:string-from-PlainLiteral-1 :result true}}]
    <#lemma382>
    [ a r:Fact; r:gives {{("Family Guy") func:string-from-PlainLiteral "Family Guy"} e:labelvars {("Family Guy") func:string-from-PlainLiteral "Family Guy"}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("Family Guy") func:string-from-PlainLiteral "Family Guy"}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#string-from-PlainLiteral-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma160> a r:Inference;
  r:gives {
    {{("Family Guy"@en) func:string-from-PlainLiteral "Family Guy"} => {:string-from-PlainLiteral-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("Family Guy"@en) func:string-from-PlainLiteral "Family Guy"} => {:string-from-PlainLiteral-2 :result true}}]
    <#lemma383>
    [ a r:Fact; r:gives {{("Family Guy"@en) func:string-from-PlainLiteral "Family Guy"} e:labelvars {("Family Guy"@en) func:string-from-PlainLiteral "Family Guy"}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("Family Guy"@en) func:string-from-PlainLiteral "Family Guy"}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#string-from-PlainLiteral-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma161> a r:Inference;
  r:gives {
    {{("Family Guy") func:lang-from-PlainLiteral ""} => {:lang-from-PlainLiteral-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("Family Guy") func:lang-from-PlainLiteral ""} => {:lang-from-PlainLiteral-1 :result true}}]
    <#lemma384>
    [ a r:Fact; r:gives {{("Family Guy") func:lang-from-PlainLiteral ""} e:labelvars {("Family Guy") func:lang-from-PlainLiteral ""}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("Family Guy") func:lang-from-PlainLiteral ""}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#lang-from-PlainLiteral-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma162> a r:Inference;
  r:gives {
    {{("Family Guy"@en) func:lang-from-PlainLiteral "en"} => {:lang-from-PlainLiteral-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("Family Guy"@en) func:lang-from-PlainLiteral "en"} => {:lang-from-PlainLiteral-2 :result true}}]
    <#lemma385>
    [ a r:Fact; r:gives {{("Family Guy"@en) func:lang-from-PlainLiteral "en"} e:labelvars {("Family Guy"@en) func:lang-from-PlainLiteral "en"}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("Family Guy"@en) func:lang-from-PlainLiteral "en"}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#lang-from-PlainLiteral-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma163> a r:Inference;
  r:gives {
    {{("Family Guy" "Mother") func:PlainLiteral-compare -1} => {:PlainLiteral-compare-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("Family Guy" "Mother") func:PlainLiteral-compare -1} => {:PlainLiteral-compare-1 :result true}}]
    <#lemma386>
    [ a r:Fact; r:gives {{("Family Guy" "Mother") func:PlainLiteral-compare -1} e:labelvars {("Family Guy" "Mother") func:PlainLiteral-compare -1}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("Family Guy" "Mother") func:PlainLiteral-compare -1}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#PlainLiteral-compare-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma164> a r:Inference;
  r:gives {
    {{("Family Guy"@en "Brother"@en) func:PlainLiteral-compare 1} => {:PlainLiteral-compare-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("Family Guy"@en "Brother"@en) func:PlainLiteral-compare 1} => {:PlainLiteral-compare-2 :result true}}]
    <#lemma387>
    [ a r:Fact; r:gives {{("Family Guy"@en "Brother"@en) func:PlainLiteral-compare 1} e:labelvars {("Family Guy"@en "Brother"@en) func:PlainLiteral-compare 1}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("Family Guy"@en "Brother"@en) func:PlainLiteral-compare 1}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#PlainLiteral-compare-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma165> a r:Inference;
  r:gives {
    {{("Family Guy") func:PlainLiteral-length 10} => {:PlainLiteral-length-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("Family Guy") func:PlainLiteral-length 10} => {:PlainLiteral-length-1 :result true}}]
    <#lemma388>
    [ a r:Fact; r:gives {{("Family Guy") func:PlainLiteral-length 10} e:labelvars {("Family Guy") func:PlainLiteral-length 10}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("Family Guy") func:PlainLiteral-length 10}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#PlainLiteral-length-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma166> a r:Inference;
  r:gives {
    {{("Family Guy"@en) func:PlainLiteral-length 10} => {:PlainLiteral-length-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("Family Guy"@en) func:PlainLiteral-length 10} => {:PlainLiteral-length-2 :result true}}]
    <#lemma389>
    [ a r:Fact; r:gives {{("Family Guy"@en) func:PlainLiteral-length 10} e:labelvars {("Family Guy"@en) func:PlainLiteral-length 10}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("Family Guy"@en) func:PlainLiteral-length 10}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#PlainLiteral-length-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma167> a r:Inference;
  r:gives {
    {{("Family Guy"@en "en") pred:matches-language-range true} => {:matches-language-range-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("Family Guy"@en "en") pred:matches-language-range true} => {:matches-language-range-1 :result true}}]
    <#lemma390>
    [ a r:Fact; r:gives {{("Family Guy"@en "en") pred:matches-language-range true} e:labelvars {("Family Guy"@en "en") pred:matches-language-range true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("Family Guy"@en "en") pred:matches-language-range true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#matches-language-range-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma168> a r:Inference;
  r:gives {
    {{("Family Guy"@en-US "en-*") pred:matches-language-range true} => {:matches-language-range-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{("Family Guy"@en-US "en-*") pred:matches-language-range true} => {:matches-language-range-2 :result true}}]
    <#lemma391>
    [ a r:Fact; r:gives {{("Family Guy"@en-US "en-*") pred:matches-language-range true} e:labelvars {("Family Guy"@en-US "en-*") pred:matches-language-range true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {("Family Guy"@en-US "en-*") pred:matches-language-range true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#matches-language-range-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma169> a r:Inference;
  r:gives {
    {{((:a :b :c :d)) pred:is-list true} => {:is-list-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((:a :b :c :d)) pred:is-list true} => {:is-list-1 :result true}}]
    <#lemma392>
    [ a r:Fact; r:gives {{((:a :b :c :d)) pred:is-list true} e:labelvars {((:a :b :c :d)) pred:is-list true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((:a :b :c :d)) pred:is-list true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#is-list-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma170> a r:Inference;
  r:gives {
    {{((:a :b :c :d) :b) pred:list-contains true} => {:list-contains-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((:a :b :c :d) :b) pred:list-contains true} => {:list-contains-1 :result true}}]
    <#lemma393>
    [ a r:Fact; r:gives {{((:a :b :c :d) :b) pred:list-contains true} e:labelvars {((:a :b :c :d) :b) pred:list-contains true}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((:a :b :c :d) :b) pred:list-contains true}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#list-contains-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma171> a r:Inference;
  r:gives {
    {{(:a :b :c :d) func:make-list (:a :b :c :d)} => {:make-list-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(:a :b :c :d) func:make-list (:a :b :c :d)} => {:make-list-1 :result true}}]
    <#lemma394>
    [ a r:Fact; r:gives {{(:a :b :c :d) func:make-list (:a :b :c :d)} e:labelvars {(:a :b :c :d) func:make-list (:a :b :c :d)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(:a :b :c :d) func:make-list (:a :b :c :d)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#make-list-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma172> a r:Inference;
  r:gives {
    {{((:a :b :c :d)) func:count 4} => {:count-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((:a :b :c :d)) func:count 4} => {:count-1 :result true}}]
    <#lemma395>
    [ a r:Fact; r:gives {{((:a :b :c :d)) func:count 4} e:labelvars {((:a :b :c :d)) func:count 4}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((:a :b :c :d)) func:count 4}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#count-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma173> a r:Inference;
  r:gives {
    {{((:a :b :c :d) 3) func:get :d} => {:get-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((:a :b :c :d) 3) func:get :d} => {:get-1 :result true}}]
    <#lemma396>
    [ a r:Fact; r:gives {{((:a :b :c :d) 3) func:get :d} e:labelvars {((:a :b :c :d) 3) func:get :d}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((:a :b :c :d) 3) func:get :d}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#get-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma174> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) 0 0) func:sublist ()} => {:sublist-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) 0 0) func:sublist ()} => {:sublist-1 :result true}}]
    <#lemma397>
    [ a r:Fact; r:gives {{((0 1 2 3 4) 0 0) func:sublist ()} e:labelvars {((0 1 2 3 4) 0 0) func:sublist ()}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) 0 0) func:sublist ()}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma175> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) 0 1) func:sublist (0)} => {:sublist-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) 0 1) func:sublist (0)} => {:sublist-2 :result true}}]
    <#lemma398>
    [ a r:Fact; r:gives {{((0 1 2 3 4) 0 1) func:sublist (0)} e:labelvars {((0 1 2 3 4) 0 1) func:sublist (0)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) 0 1) func:sublist (0)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma176> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) 0 4) func:sublist (0 1 2 3)} => {:sublist-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) 0 4) func:sublist (0 1 2 3)} => {:sublist-3 :result true}}]
    <#lemma399>
    [ a r:Fact; r:gives {{((0 1 2 3 4) 0 4) func:sublist (0 1 2 3)} e:labelvars {((0 1 2 3 4) 0 4) func:sublist (0 1 2 3)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) 0 4) func:sublist (0 1 2 3)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma177> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) 0 5) func:sublist (0 1 2 3 4)} => {:sublist-4 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) 0 5) func:sublist (0 1 2 3 4)} => {:sublist-4 :result true}}]
    <#lemma400>
    [ a r:Fact; r:gives {{((0 1 2 3 4) 0 5) func:sublist (0 1 2 3 4)} e:labelvars {((0 1 2 3 4) 0 5) func:sublist (0 1 2 3 4)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) 0 5) func:sublist (0 1 2 3 4)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-4"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma178> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) 0 10) func:sublist (0 1 2 3 4)} => {:sublist-5 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) 0 10) func:sublist (0 1 2 3 4)} => {:sublist-5 :result true}}]
    <#lemma401>
    [ a r:Fact; r:gives {{((0 1 2 3 4) 0 10) func:sublist (0 1 2 3 4)} e:labelvars {((0 1 2 3 4) 0 10) func:sublist (0 1 2 3 4)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) 0 10) func:sublist (0 1 2 3 4)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-5"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma179> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) 0 -2) func:sublist (0 1 2)} => {:sublist-6 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) 0 -2) func:sublist (0 1 2)} => {:sublist-6 :result true}}]
    <#lemma402>
    [ a r:Fact; r:gives {{((0 1 2 3 4) 0 -2) func:sublist (0 1 2)} e:labelvars {((0 1 2 3 4) 0 -2) func:sublist (0 1 2)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) 0 -2) func:sublist (0 1 2)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-6"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma180> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) 2 4) func:sublist (2 3)} => {:sublist-7 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) 2 4) func:sublist (2 3)} => {:sublist-7 :result true}}]
    <#lemma403>
    [ a r:Fact; r:gives {{((0 1 2 3 4) 2 4) func:sublist (2 3)} e:labelvars {((0 1 2 3 4) 2 4) func:sublist (2 3)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) 2 4) func:sublist (2 3)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-7"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma181> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) 2 -2) func:sublist (2)} => {:sublist-9 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) 2 -2) func:sublist (2)} => {:sublist-9 :result true}}]
    <#lemma404>
    [ a r:Fact; r:gives {{((0 1 2 3 4) 2 -2) func:sublist (2)} e:labelvars {((0 1 2 3 4) 2 -2) func:sublist (2)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) 2 -2) func:sublist (2)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-9"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma182> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) 0) func:sublist (0 1 2 3 4)} => {:sublist-9 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) 0) func:sublist (0 1 2 3 4)} => {:sublist-9 :result true}}]
    <#lemma404>
    [ a r:Fact; r:gives {{((0 1 2 3 4) 0) func:sublist (0 1 2 3 4)} e:labelvars {((0 1 2 3 4) 0) func:sublist (0 1 2 3 4)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) 0) func:sublist (0 1 2 3 4)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-9"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma183> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) 3) func:sublist (3 4)} => {:sublist-10 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) 3) func:sublist (3 4)} => {:sublist-10 :result true}}]
    <#lemma405>
    [ a r:Fact; r:gives {{((0 1 2 3 4) 3) func:sublist (3 4)} e:labelvars {((0 1 2 3 4) 3) func:sublist (3 4)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) 3) func:sublist (3 4)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-10"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma184> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) -2) func:sublist (3 4)} => {:sublist-11 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) -2) func:sublist (3 4)} => {:sublist-11 :result true}}]
    <#lemma406>
    [ a r:Fact; r:gives {{((0 1 2 3 4) -2) func:sublist (3 4)} e:labelvars {((0 1 2 3 4) -2) func:sublist (3 4)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) -2) func:sublist (3 4)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-11"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma185> a r:Inference;
  r:gives {
    {{((0 1 2) 3) func:append (0 1 2 3)} => {:append-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2) 3) func:append (0 1 2 3)} => {:append-1 :result true}}]
    <#lemma407>
    [ a r:Fact; r:gives {{((0 1 2) 3) func:append (0 1 2 3)} e:labelvars {((0 1 2) 3) func:append (0 1 2 3)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2) 3) func:append (0 1 2 3)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#append-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma186> a r:Inference;
  r:gives {
    {{((0 1 2) 3 4) func:append (0 1 2 3 4)} => {:append-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2) 3 4) func:append (0 1 2 3 4)} => {:append-2 :result true}}]
    <#lemma408>
    [ a r:Fact; r:gives {{((0 1 2) 3 4) func:append (0 1 2 3 4)} e:labelvars {((0 1 2) 3 4) func:append (0 1 2 3 4)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2) 3 4) func:append (0 1 2 3 4)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#append-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma187> a r:Inference;
  r:gives {
    {{((1 1) (1) (1) ((1))) func:append (1 1 (1) (1) ((1)))} => {:append-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((1 1) (1) (1) ((1))) func:append (1 1 (1) (1) ((1)))} => {:append-3 :result true}}]
    <#lemma409>
    [ a r:Fact; r:gives {{((1 1) (1) (1) ((1))) func:append (1 1 (1) (1) ((1)))} e:labelvars {((1 1) (1) (1) ((1))) func:append (1 1 (1) (1) ((1)))}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((1 1) (1) (1) ((1))) func:append (1 1 (1) (1) ((1)))}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#append-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma188> a r:Inference;
  r:gives {
    {{(() 1) func:append (1)} => {:append-4 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(() 1) func:append (1)} => {:append-4 :result true}}]
    <#lemma410>
    [ a r:Fact; r:gives {{(() 1) func:append (1)} e:labelvars {(() 1) func:append (1)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(() 1) func:append (1)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#append-4"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma189> a r:Inference;
  r:gives {
    {{((0 1 2) (3 4 5)) func:concatenate (0 1 2 3 4 5)} => {:concatenate-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2) (3 4 5)) func:concatenate (0 1 2 3 4 5)} => {:concatenate-1 :result true}}]
    <#lemma411>
    [ a r:Fact; r:gives {{((0 1 2) (3 4 5)) func:concatenate (0 1 2 3 4 5)} e:labelvars {((0 1 2) (3 4 5)) func:concatenate (0 1 2 3 4 5)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2) (3 4 5)) func:concatenate (0 1 2 3 4 5)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#concatenate-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma190> a r:Inference;
  r:gives {
    {{((1 1) (1) (1)) func:concatenate (1 1 1 1)} => {:concatenate-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((1 1) (1) (1)) func:concatenate (1 1 1 1)} => {:concatenate-2 :result true}}]
    <#lemma412>
    [ a r:Fact; r:gives {{((1 1) (1) (1)) func:concatenate (1 1 1 1)} e:labelvars {((1 1) (1) (1)) func:concatenate (1 1 1 1)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((1 1) (1) (1)) func:concatenate (1 1 1 1)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#concatenate-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma191> a r:Inference;
  r:gives {
    {{(()) func:concatenate ()} => {:concatenate-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(()) func:concatenate ()} => {:concatenate-3 :result true}}]
    <#lemma413>
    [ a r:Fact; r:gives {{(()) func:concatenate ()} e:labelvars {(()) func:concatenate ()}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(()) func:concatenate ()}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#concatenate-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma192> a r:Inference;
  r:gives {
    {{(() (1) () (2) ((3))) func:concatenate (1 2 (3))} => {:concatenate-4 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(() (1) () (2) ((3))) func:concatenate (1 2 (3))} => {:concatenate-4 :result true}}]
    <#lemma414>
    [ a r:Fact; r:gives {{(() (1) () (2) ((3))) func:concatenate (1 2 (3))} e:labelvars {(() (1) () (2) ((3))) func:concatenate (1 2 (3))}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(() (1) () (2) ((3))) func:concatenate (1 2 (3))}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#concatenate-4"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma193> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) 0 99) func:insert-before (99 0 1 2 3 4)} => {:insert-before-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) 0 99) func:insert-before (99 0 1 2 3 4)} => {:insert-before-1 :result true}}]
    <#lemma415>
    [ a r:Fact; r:gives {{((0 1 2 3 4) 0 99) func:insert-before (99 0 1 2 3 4)} e:labelvars {((0 1 2 3 4) 0 99) func:insert-before (99 0 1 2 3 4)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) 0 99) func:insert-before (99 0 1 2 3 4)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#insert-before-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma194> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) 1 99) func:insert-before (0 99 1 2 3 4)} => {:insert-before-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) 1 99) func:insert-before (0 99 1 2 3 4)} => {:insert-before-2 :result true}}]
    <#lemma416>
    [ a r:Fact; r:gives {{((0 1 2 3 4) 1 99) func:insert-before (0 99 1 2 3 4)} e:labelvars {((0 1 2 3 4) 1 99) func:insert-before (0 99 1 2 3 4)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) 1 99) func:insert-before (0 99 1 2 3 4)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#insert-before-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma195> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) -1 99) func:insert-before (0 1 2 3 99 4)} => {:insert-before-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) -1 99) func:insert-before (0 1 2 3 99 4)} => {:insert-before-3 :result true}}]
    <#lemma417>
    [ a r:Fact; r:gives {{((0 1 2 3 4) -1 99) func:insert-before (0 1 2 3 99 4)} e:labelvars {((0 1 2 3 4) -1 99) func:insert-before (0 1 2 3 99 4)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) -1 99) func:insert-before (0 1 2 3 99 4)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#insert-before-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma196> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) -5 99) func:insert-before (99 0 1 2 3 4)} => {:insert-before-4 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) -5 99) func:insert-before (99 0 1 2 3 4)} => {:insert-before-4 :result true}}]
    <#lemma418>
    [ a r:Fact; r:gives {{((0 1 2 3 4) -5 99) func:insert-before (99 0 1 2 3 4)} e:labelvars {((0 1 2 3 4) -5 99) func:insert-before (99 0 1 2 3 4)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) -5 99) func:insert-before (99 0 1 2 3 4)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#insert-before-4"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma197> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) 0) func:remove (1 2 3 4)} => {:remove-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) 0) func:remove (1 2 3 4)} => {:remove-1 :result true}}]
    <#lemma419>
    [ a r:Fact; r:gives {{((0 1 2 3 4) 0) func:remove (1 2 3 4)} e:labelvars {((0 1 2 3 4) 0) func:remove (1 2 3 4)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) 0) func:remove (1 2 3 4)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#remove-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma198> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) 1) func:remove (0 2 3 4)} => {:remove-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) 1) func:remove (0 2 3 4)} => {:remove-2 :result true}}]
    <#lemma420>
    [ a r:Fact; r:gives {{((0 1 2 3 4) 1) func:remove (0 2 3 4)} e:labelvars {((0 1 2 3 4) 1) func:remove (0 2 3 4)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) 1) func:remove (0 2 3 4)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#remove-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma199> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) 4) func:remove (0 1 2 3)} => {:remove-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) 4) func:remove (0 1 2 3)} => {:remove-3 :result true}}]
    <#lemma421>
    [ a r:Fact; r:gives {{((0 1 2 3 4) 4) func:remove (0 1 2 3)} e:labelvars {((0 1 2 3 4) 4) func:remove (0 1 2 3)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) 4) func:remove (0 1 2 3)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#remove-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma200> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) -1) func:remove (0 1 2 3)} => {:remove-4 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) -1) func:remove (0 1 2 3)} => {:remove-4 :result true}}]
    <#lemma422>
    [ a r:Fact; r:gives {{((0 1 2 3 4) -1) func:remove (0 1 2 3)} e:labelvars {((0 1 2 3 4) -1) func:remove (0 1 2 3)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) -1) func:remove (0 1 2 3)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#remove-4"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma201> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) -5) func:remove (1 2 3 4)} => {:remove-5 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) -5) func:remove (1 2 3 4)} => {:remove-5 :result true}}]
    <#lemma423>
    [ a r:Fact; r:gives {{((0 1 2 3 4) -5) func:remove (1 2 3 4)} e:labelvars {((0 1 2 3 4) -5) func:remove (1 2 3 4)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) -5) func:remove (1 2 3 4)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#remove-5"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma202> a r:Inference;
  r:gives {
    {{((0 1 2 3 4)) func:reverse (4 3 2 1 0)} => {:reverse-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4)) func:reverse (4 3 2 1 0)} => {:reverse-1 :result true}}]
    <#lemma424>
    [ a r:Fact; r:gives {{((0 1 2 3 4)) func:reverse (4 3 2 1 0)} e:labelvars {((0 1 2 3 4)) func:reverse (4 3 2 1 0)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4)) func:reverse (4 3 2 1 0)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#reverse-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma203> a r:Inference;
  r:gives {
    {{((1)) func:reverse (1)} => {:reverse-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((1)) func:reverse (1)} => {:reverse-2 :result true}}]
    <#lemma425>
    [ a r:Fact; r:gives {{((1)) func:reverse (1)} e:labelvars {((1)) func:reverse (1)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((1)) func:reverse (1)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#reverse-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma204> a r:Inference;
  r:gives {
    {{(()) func:reverse ()} => {:reverse-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{(()) func:reverse ()} => {:reverse-3 :result true}}]
    <#lemma426>
    [ a r:Fact; r:gives {{(()) func:reverse ()} e:labelvars {(()) func:reverse ()}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {(()) func:reverse ()}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#reverse-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma205> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) 2) func:index-of (2)} => {:index-of-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) 2) func:index-of (2)} => {:index-of-1 :result true}}]
    <#lemma427>
    [ a r:Fact; r:gives {{((0 1 2 3 4) 2) func:index-of (2)} e:labelvars {((0 1 2 3 4) 2) func:index-of (2)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) 2) func:index-of (2)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#index-of-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma206> a r:Inference;
  r:gives {
    {{((0 1 2 3 4 5 2 2) 2) func:index-of (2 6 7)} => {:index-of-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4 5 2 2) 2) func:index-of (2 6 7)} => {:index-of-2 :result true}}]
    <#lemma428>
    [ a r:Fact; r:gives {{((0 1 2 3 4 5 2 2) 2) func:index-of (2 6 7)} e:labelvars {((0 1 2 3 4 5 2 2) 2) func:index-of (2 6 7)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4 5 2 2) 2) func:index-of (2 6 7)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#index-of-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma207> a r:Inference;
  r:gives {
    {{((2 2 3 4 5 2 2) 2) func:index-of (0 1 5 6)} => {:index-of-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((2 2 3 4 5 2 2) 2) func:index-of (0 1 5 6)} => {:index-of-3 :result true}}]
    <#lemma429>
    [ a r:Fact; r:gives {{((2 2 3 4 5 2 2) 2) func:index-of (0 1 5 6)} e:labelvars {((2 2 3 4 5 2 2) 2) func:index-of (0 1 5 6)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((2 2 3 4 5 2 2) 2) func:index-of (0 1 5 6)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#index-of-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma208> a r:Inference;
  r:gives {
    {{((2 2 3 4 5 2 2) 1) func:index-of ()} => {:index-of-4 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((2 2 3 4 5 2 2) 1) func:index-of ()} => {:index-of-4 :result true}}]
    <#lemma430>
    [ a r:Fact; r:gives {{((2 2 3 4 5 2 2) 1) func:index-of ()} e:labelvars {((2 2 3 4 5 2 2) 1) func:index-of ()}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((2 2 3 4 5 2 2) 1) func:index-of ()}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#index-of-4"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma209> a r:Inference;
  r:gives {
    {{((0 1 2 4) (3 4 5 6)) func:union (0 1 2 4 3 5 6)} => {:union-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 4) (3 4 5 6)) func:union (0 1 2 4 3 5 6)} => {:union-1 :result true}}]
    <#lemma431>
    [ a r:Fact; r:gives {{((0 1 2 4) (3 4 5 6)) func:union (0 1 2 4 3 5 6)} e:labelvars {((0 1 2 4) (3 4 5 6)) func:union (0 1 2 4 3 5 6)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 4) (3 4 5 6)) func:union (0 1 2 4 3 5 6)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#union-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma210> a r:Inference;
  r:gives {
    {{((0 1 2 3) (4)) func:union (0 1 2 3 4)} => {:union-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3) (4)) func:union (0 1 2 3 4)} => {:union-2 :result true}}]
    <#lemma432>
    [ a r:Fact; r:gives {{((0 1 2 3) (4)) func:union (0 1 2 3 4)} e:labelvars {((0 1 2 3) (4)) func:union (0 1 2 3 4)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3) (4)) func:union (0 1 2 3 4)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#union-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma211> a r:Inference;
  r:gives {
    {{((0 1 2 3) (3)) func:union (0 1 2 3)} => {:union-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3) (3)) func:union (0 1 2 3)} => {:union-3 :result true}}]
    <#lemma433>
    [ a r:Fact; r:gives {{((0 1 2 3) (3)) func:union (0 1 2 3)} e:labelvars {((0 1 2 3) (3)) func:union (0 1 2 3)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3) (3)) func:union (0 1 2 3)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#union-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma212> a r:Inference;
  r:gives {
    {{((0 2 1 0)) func:union (0 2 1)} => {:union-4 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 2 1 0)) func:union (0 2 1)} => {:union-4 :result true}}]
    <#lemma434>
    [ a r:Fact; r:gives {{((0 2 1 0)) func:union (0 2 1)} e:labelvars {((0 2 1 0)) func:union (0 2 1)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 2 1 0)) func:union (0 2 1)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#union-4"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma213> a r:Inference;
  r:gives {
    {{((0 1 2 3 4)) func:distinct-values (0 1 2 3 4)} => {:distinct-values-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4)) func:distinct-values (0 1 2 3 4)} => {:distinct-values-1 :result true}}]
    <#lemma435>
    [ a r:Fact; r:gives {{((0 1 2 3 4)) func:distinct-values (0 1 2 3 4)} e:labelvars {((0 1 2 3 4)) func:distinct-values (0 1 2 3 4)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4)) func:distinct-values (0 1 2 3 4)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#distinct-values-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma214> a r:Inference;
  r:gives {
    {{((0 1 2 3 4 0 4)) func:distinct-values (0 1 2 3 4)} => {:distinct-values-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4 0 4)) func:distinct-values (0 1 2 3 4)} => {:distinct-values-2 :result true}}]
    <#lemma436>
    [ a r:Fact; r:gives {{((0 1 2 3 4 0 4)) func:distinct-values (0 1 2 3 4)} e:labelvars {((0 1 2 3 4 0 4)) func:distinct-values (0 1 2 3 4)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4 0 4)) func:distinct-values (0 1 2 3 4)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#distinct-values-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma215> a r:Inference;
  r:gives {
    {{((3 3 3)) func:distinct-values (3)} => {:distinct-values-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((3 3 3)) func:distinct-values (3)} => {:distinct-values-3 :result true}}]
    <#lemma437>
    [ a r:Fact; r:gives {{((3 3 3)) func:distinct-values (3)} e:labelvars {((3 3 3)) func:distinct-values (3)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((3 3 3)) func:distinct-values (3)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#distinct-values-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma216> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) (1 3)) func:intersect (1 3)} => {:intersect-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) (1 3)) func:intersect (1 3)} => {:intersect-1 :result true}}]
    <#lemma438>
    [ a r:Fact; r:gives {{((0 1 2 3 4) (1 3)) func:intersect (1 3)} e:labelvars {((0 1 2 3 4) (1 3)) func:intersect (1 3)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) (1 3)) func:intersect (1 3)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#intersect-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma217> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) (3 1)) func:intersect (1 3)} => {:intersect-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) (3 1)) func:intersect (1 3)} => {:intersect-2 :result true}}]
    <#lemma439>
    [ a r:Fact; r:gives {{((0 1 2 3 4) (3 1)) func:intersect (1 3)} e:labelvars {((0 1 2 3 4) (3 1)) func:intersect (1 3)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) (3 1)) func:intersect (1 3)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#intersect-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma218> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) ()) func:intersect ()} => {:intersect-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) ()) func:intersect ()} => {:intersect-3 :result true}}]
    <#lemma440>
    [ a r:Fact; r:gives {{((0 1 2 3 4) ()) func:intersect ()} e:labelvars {((0 1 2 3 4) ()) func:intersect ()}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) ()) func:intersect ()}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#intersect-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma219> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) (0 1 2 3 4 5 6)) func:intersect (0 1 2 3 4)} => {:intersect-4 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) (0 1 2 3 4 5 6)) func:intersect (0 1 2 3 4)} => {:intersect-4 :result true}}]
    <#lemma441>
    [ a r:Fact; r:gives {{((0 1 2 3 4) (0 1 2 3 4 5 6)) func:intersect (0 1 2 3 4)} e:labelvars {((0 1 2 3 4) (0 1 2 3 4 5 6)) func:intersect (0 1 2 3 4)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) (0 1 2 3 4 5 6)) func:intersect (0 1 2 3 4)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#intersect-4"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma220> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) (1 3)) func:except (0 2 4)} => {:except-1 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) (1 3)) func:except (0 2 4)} => {:except-1 :result true}}]
    <#lemma442>
    [ a r:Fact; r:gives {{((0 1 2 3 4) (1 3)) func:except (0 2 4)} e:labelvars {((0 1 2 3 4) (1 3)) func:except (0 2 4)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) (1 3)) func:except (0 2 4)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#except-1"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma221> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) ()) func:except (0 1 2 3 4)} => {:except-2 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) ()) func:except (0 1 2 3 4)} => {:except-2 :result true}}]
    <#lemma443>
    [ a r:Fact; r:gives {{((0 1 2 3 4) ()) func:except (0 1 2 3 4)} e:labelvars {((0 1 2 3 4) ()) func:except (0 1 2 3 4)}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) ()) func:except (0 1 2 3 4)}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#except-2"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma222> a r:Inference;
  r:gives {
    {{((0 1 2 3 4) (0 1 2 3 4)) func:except ()} => {:except-3 :result true}} a :PASS.
  };
  r:evidence (
    [ a r:Fact; r:gives {{((0 1 2 3 4) (0 1 2 3 4)) func:except ()} => {:except-3 :result true}}]
    <#lemma444>
    [ a r:Fact; r:gives {{((0 1 2 3 4) (0 1 2 3 4)) func:except ()} e:labelvars {((0 1 2 3 4) (0 1 2 3 4)) func:except ()}}]
  );
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_0"]; r:boundTo {((0 1 2 3 4) (0 1 2 3 4)) func:except ()}];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#except-3"]];
  r:binding [ r:variable [ n3:uri "http://josd.github.io/var#x_2"]; r:boundTo true];
  r:rule <#lemma224>.

<#lemma223> a r:Inference;
  r:gives {
    :literal-not-identical-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("chat"@fr "chien"@fr) pred:literal-not-identical true}]
  );
  r:rule <#lemma445>.

<#lemma224> a r:Extraction;
  r:gives {
    @forAll var:x_0, var:x_1, var:x_2. {var:x_0 => {var:x_1 :result var:x_2}.
     var:x_1 :result var:x_2.
     var:x_0 e:labelvars var:x_0} => {{var:x_0 => {var:x_1 :result var:x_2}} a :PASS}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifQ.n3>].

<#lemma225> a r:Inference;
  r:gives {
    :iri-string-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(:case "http://eulersharp.sourceforge.net/2007/07test#case") pred:iri-string true}]
  );
  r:rule <#lemma446>.

<#lemma226> a r:Inference;
  r:gives {
    :numeric-add-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(1 1) func:numeric-add 2}]
  );
  r:rule <#lemma447>.

<#lemma227> a r:Inference;
  r:gives {
    :numeric-subtract-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(5 2) func:numeric-subtract 3}]
  );
  r:rule <#lemma448>.

<#lemma228> a r:Inference;
  r:gives {
    :numeric-multiply-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(5 2) func:numeric-multiply 10}]
  );
  r:rule <#lemma449>.

<#lemma229> a r:Inference;
  r:gives {
    :numeric-divide-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(5 2) func:numeric-divide 2.5}]
  );
  r:rule <#lemma450>.

<#lemma230> a r:Inference;
  r:gives {
    :numeric-integer-divide-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(5 2) func:numeric-integer-divide 2}]
  );
  r:rule <#lemma451>.

<#lemma231> a r:Inference;
  r:gives {
    :numeric-mod-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(10 3) func:numeric-mod 1}]
  );
  r:rule <#lemma452>.

<#lemma232> a r:Inference;
  r:gives {
    :numeric-mod-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(6 -2) func:numeric-mod 0}]
  );
  r:rule <#lemma453>.

<#lemma233> a r:Inference;
  r:gives {
    :numeric-mod-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(4.5 1.2) func:numeric-mod 0.9000000000000004}]
  );
  r:rule <#lemma454>.

<#lemma234> a r:Inference;
  r:gives {
    :numeric-mod-4 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(123.0 6.0) func:numeric-mod 3.0}]
  );
  r:rule <#lemma455>.

<#lemma235> a r:Inference;
  r:gives {
    :numeric-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(1 1.0) pred:numeric-equal true}]
  );
  r:rule <#lemma456>.

<#lemma236> a r:Inference;
  r:gives {
    :numeric-less-than-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(2.0 3) pred:numeric-less-than true}]
  );
  r:rule <#lemma457>.

<#lemma237> a r:Inference;
  r:gives {
    :numeric-greater-than-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(1.0 0) pred:numeric-greater-than true}]
  );
  r:rule <#lemma458>.

<#lemma238> a r:Inference;
  r:gives {
    :numeric-not-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(1 1.01) pred:numeric-not-equal true}]
  );
  r:rule <#lemma459>.

<#lemma239> a r:Inference;
  r:gives {
    :numeric-less-than-or-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(3 5.0) pred:numeric-less-than-or-equal true}]
  );
  r:rule <#lemma460>.

<#lemma240> a r:Inference;
  r:gives {
    :numeric-greater-than-or-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(1.0 1) pred:numeric-greater-than-or-equal true}]
  );
  r:rule <#lemma461>.

<#lemma241> a r:Inference;
  r:gives {
    :not-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(false) func:not true}]
  );
  r:rule <#lemma462>.

<#lemma242> a r:Inference;
  r:gives {
    :not-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(true) func:not false}]
  );
  r:rule <#lemma463>.

<#lemma243> a r:Inference;
  r:gives {
    :boolean-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(false false) pred:boolean-equal true}]
  );
  r:rule <#lemma464>.

<#lemma244> a r:Inference;
  r:gives {
    :boolean-less-than-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(false true) pred:boolean-less-than true}]
  );
  r:rule <#lemma465>.

<#lemma245> a r:Inference;
  r:gives {
    :boolean-greater-than-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(true false) pred:boolean-greater-than true}]
  );
  r:rule <#lemma466>.

<#lemma246> a r:Inference;
  r:gives {
    :compare-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("abc" "abc") func:compare 0}]
  );
  r:rule <#lemma467>.

<#lemma247> a r:Inference;
  r:gives {
    :compare-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("Straßen" "Straße") func:compare 1}]
  );
  r:rule <#lemma468>.

<#lemma248> a r:Inference;
  r:gives {
    :concat-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("Ingratitude, " "thou " "marble-hearted" " fiend!") func:concat "Ingratitude, thou marble-hearted fiend!"}]
  );
  r:rule <#lemma469>.

<#lemma249> a r:Inference;
  r:gives {
    :string-join-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(("Now" "is" "the" "time" "...") " ") func:string-join "Now is the time ..."}]
  );
  r:rule <#lemma470>.

<#lemma250> a r:Inference;
  r:gives {
    :string-join-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(("Blow, " "blow, " "thou " "winter " "wind!") "") func:string-join "Blow, blow, thou winter wind!"}]
  );
  r:rule <#lemma471>.

<#lemma251> a r:Inference;
  r:gives {
    :string-join-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(() "separator") func:string-join ""}]
  );
  r:rule <#lemma472>.

<#lemma252> a r:Inference;
  r:gives {
    :substring-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("motor car" 6) func:substring " car"}]
  );
  r:rule <#lemma473>.

<#lemma253> a r:Inference;
  r:gives {
    :substring-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("metadata" 4 3) func:substring "ada"}]
  );
  r:rule <#lemma474>.

<#lemma254> a r:Inference;
  r:gives {
    :substring-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("12345" 1.5 2.6) func:substring "234"}]
  );
  r:rule <#lemma475>.

<#lemma255> a r:Inference;
  r:gives {
    :substring-4 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("12345" 0 3) func:substring "12"}]
  );
  r:rule <#lemma476>.

<#lemma256> a r:Inference;
  r:gives {
    :substring-5 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("12345" 5 -3) func:substring ""}]
  );
  r:rule <#lemma477>.

<#lemma257> a r:Inference;
  r:gives {
    :substring-6 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("12345" -3 5) func:substring "1"}]
  );
  r:rule <#lemma478>.

<#lemma258> a r:Inference;
  r:gives {
    :string-length-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("Harp not on that string, madam; that is past.") func:string-length 45}]
  );
  r:rule <#lemma479>.

<#lemma259> a r:Inference;
  r:gives {
    :string-length-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(""@en) func:string-length 0}]
  );
  r:rule <#lemma480>.

<#lemma260> a r:Inference;
  r:gives {
    :upper-case-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("abCd0") func:upper-case "ABCD0"}]
  );
  r:rule <#lemma481>.

<#lemma261> a r:Inference;
  r:gives {
    :lower-case-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("ABc!D") func:lower-case "abc!d"}]
  );
  r:rule <#lemma482>.

<#lemma262> a r:Inference;
  r:gives {
    :encode-for-uri-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("00/Weather/CA/Los%20Angeles#ocean") func:encode-for-uri "00%2fWeather%2fCA%2fLos%2520Angeles%23ocean"}]
  );
  r:rule <#lemma483>.

<#lemma263> a r:Inference;
  r:gives {
    :encode-for-uri-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("~bébé") func:encode-for-uri "~b%c3%a9b%c3%a9"}]
  );
  r:rule <#lemma484>.

<#lemma264> a r:Inference;
  r:gives {
    :encode-for-uri-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("100% organic") func:encode-for-uri "100%25%20organic"}]
  );
  r:rule <#lemma485>.

<#lemma265> a r:Inference;
  r:gives {
    :substring-before-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("tattoo" "attoo") func:substring-before "t"}]
  );
  r:rule <#lemma486>.

<#lemma266> a r:Inference;
  r:gives {
    :substring-before-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("tattoo" "tatto") func:substring-before ""}]
  );
  r:rule <#lemma487>.

<#lemma267> a r:Inference;
  r:gives {
    :substring-after-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("tattoo" "tat") func:substring-after "too"}]
  );
  r:rule <#lemma488>.

<#lemma268> a r:Inference;
  r:gives {
    :substring-after-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("tattoo" "tattoo") func:substring-after ""}]
  );
  r:rule <#lemma489>.

<#lemma269> a r:Inference;
  r:gives {
    :contains-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("tattoo" "t") pred:contains true}]
  );
  r:rule <#lemma490>.

<#lemma270> a r:Inference;
  r:gives {
    :starts-with-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("tattoo" "tat") pred:starts-with true}]
  );
  r:rule <#lemma491>.

<#lemma271> a r:Inference;
  r:gives {
    :ends-with-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("tattoo" "tattoo") pred:ends-with true}]
  );
  r:rule <#lemma492>.

<#lemma272> a r:Inference;
  r:gives {
    :matches-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("abracadabra" "bra") pred:matches true}]
  );
  r:rule <#lemma493>.

<#lemma273> a r:Inference;
  r:gives {
    :matches-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("abracadabra" "^a.*a$") pred:matches true}]
  );
  r:rule <#lemma494>.

<#lemma274> a r:Inference;
  r:gives {
    :year-from-dateTime-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:year-from-dateTime 1999}]
  );
  r:rule <#lemma495>.

<#lemma275> a r:Inference;
  r:gives {
    :month-from-dateTime-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:month-from-dateTime 5}]
  );
  r:rule <#lemma496>.

<#lemma276> a r:Inference;
  r:gives {
    :day-from-dateTime-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:day-from-dateTime 31}]
  );
  r:rule <#lemma497>.

<#lemma277> a r:Inference;
  r:gives {
    :hours-from-dateTime-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:hours-from-dateTime 13}]
  );
  r:rule <#lemma498>.

<#lemma278> a r:Inference;
  r:gives {
    :minutes-from-dateTime-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:minutes-from-dateTime 20}]
  );
  r:rule <#lemma499>.

<#lemma279> a r:Inference;
  r:gives {
    :seconds-from-dateTime-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:seconds-from-dateTime 0}]
  );
  r:rule <#lemma500>.

<#lemma280> a r:Inference;
  r:gives {
    :year-from-date-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("1999-05-31-05:00"^^xsd:date) func:year-from-date 1999}]
  );
  r:rule <#lemma501>.

<#lemma281> a r:Inference;
  r:gives {
    :month-from-date-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("1999-05-31-05:00"^^xsd:date) func:month-from-date 5}]
  );
  r:rule <#lemma502>.

<#lemma282> a r:Inference;
  r:gives {
    :day-from-date-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("1999-05-31-05:00"^^xsd:date) func:day-from-date 31}]
  );
  r:rule <#lemma503>.

<#lemma283> a r:Inference;
  r:gives {
    :hours-from-time-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("13:20:00-05:00"^^xsd:time) func:hours-from-time 13}]
  );
  r:rule <#lemma504>.

<#lemma284> a r:Inference;
  r:gives {
    :minutes-from-time-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("13:20:00-05:00"^^xsd:time) func:minutes-from-time 20}]
  );
  r:rule <#lemma505>.

<#lemma285> a r:Inference;
  r:gives {
    :seconds-from-time-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("13:20:00-05:00"^^xsd:time) func:seconds-from-time 0}]
  );
  r:rule <#lemma506>.

<#lemma286> a r:Inference;
  r:gives {
    :years-from-duration-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P20Y15M"^^xsd:yearMonthDuration) func:years-from-duration 21}]
  );
  r:rule <#lemma507>.

<#lemma287> a r:Inference;
  r:gives {
    :years-from-duration-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("-P15M"^^xsd:yearMonthDuration) func:years-from-duration -1}]
  );
  r:rule <#lemma508>.

<#lemma288> a r:Inference;
  r:gives {
    :years-from-duration-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("-P2DT15H"^^xsd:dayTimeDuration) func:years-from-duration 0}]
  );
  r:rule <#lemma509>.

<#lemma289> a r:Inference;
  r:gives {
    :months-from-duration-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P20Y15M"^^xsd:yearMonthDuration) func:months-from-duration 3}]
  );
  r:rule <#lemma510>.

<#lemma290> a r:Inference;
  r:gives {
    :months-from-duration-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("-P20Y18M"^^xsd:yearMonthDuration) func:months-from-duration -6}]
  );
  r:rule <#lemma511>.

<#lemma291> a r:Inference;
  r:gives {
    :months-from-duration-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("-P2DT15H0M0S"^^xsd:dayTimeDuration) func:months-from-duration 0}]
  );
  r:rule <#lemma512>.

<#lemma292> a r:Inference;
  r:gives {
    :days-from-duration-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P3DT10H"^^xsd:dayTimeDuration) func:days-from-duration 3}]
  );
  r:rule <#lemma513>.

<#lemma293> a r:Inference;
  r:gives {
    :days-from-duration-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P3DT55H"^^xsd:dayTimeDuration) func:days-from-duration 5}]
  );
  r:rule <#lemma514>.

<#lemma294> a r:Inference;
  r:gives {
    :days-from-duration-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P3Y5M"^^xsd:yearMonthDuration) func:days-from-duration 0}]
  );
  r:rule <#lemma515>.

<#lemma295> a r:Inference;
  r:gives {
    :hours-from-duration-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration 10}]
  );
  r:rule <#lemma516>.

<#lemma296> a r:Inference;
  r:gives {
    :hours-from-duration-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P3DT12H32M12S"^^xsd:dayTimeDuration) func:hours-from-duration 12}]
  );
  r:rule <#lemma517>.

<#lemma297> a r:Inference;
  r:gives {
    :hours-from-duration-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("PT123H"^^xsd:dayTimeDuration) func:hours-from-duration 3}]
  );
  r:rule <#lemma518>.

<#lemma298> a r:Inference;
  r:gives {
    :hours-from-duration-4 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("-P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration -10}]
  );
  r:rule <#lemma519>.

<#lemma299> a r:Inference;
  r:gives {
    :minutes-from-duration-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P3DT10H"^^xsd:dayTimeDuration) func:minutes-from-duration 0}]
  );
  r:rule <#lemma520>.

<#lemma300> a r:Inference;
  r:gives {
    :minutes-from-duration-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("-P5DT12H30M"^^xsd:dayTimeDuration) func:minutes-from-duration -30}]
  );
  r:rule <#lemma521>.

<#lemma301> a r:Inference;
  r:gives {
    :seconds-from-duration-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P3DT10H12.5S"^^xsd:dayTimeDuration) func:seconds-from-duration 12.5}]
  );
  r:rule <#lemma522>.

<#lemma302> a r:Inference;
  r:gives {
    :seconds-from-duration-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("-PT256S"^^xsd:dayTimeDuration) func:seconds-from-duration -16.0}]
  );
  r:rule <#lemma523>.

<#lemma303> a r:Inference;
  r:gives {
    :timezone-from-dateTime-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:timezone-from-dateTime "-PT5H"^^xsd:dayTimeDuration}]
  );
  r:rule <#lemma524>.

<#lemma304> a r:Inference;
  r:gives {
    :timezone-from-dateTime-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2000-06-12T13:20:00Z"^^xsd:dateTime) func:timezone-from-dateTime "PT0S"^^xsd:dayTimeDuration}]
  );
  r:rule <#lemma525>.

<#lemma305> a r:Inference;
  r:gives {
    :timezone-from-date-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("1999-05-31-05:00"^^xsd:date) func:timezone-from-date "-PT5H"^^xsd:dayTimeDuration}]
  );
  r:rule <#lemma526>.

<#lemma306> a r:Inference;
  r:gives {
    :timezone-from-date-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2000-06-12Z"^^xsd:date) func:timezone-from-date "PT0S"^^xsd:dayTimeDuration}]
  );
  r:rule <#lemma527>.

<#lemma307> a r:Inference;
  r:gives {
    :timezone-from-time-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("13:20:00-05:00"^^xsd:time) func:timezone-from-time "-PT5H"^^xsd:dayTimeDuration}]
  );
  r:rule <#lemma528>.

<#lemma308> a r:Inference;
  r:gives {
    :timezone-from-time-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("13:20:00Z"^^xsd:time) func:timezone-from-time "PT0S"^^xsd:dayTimeDuration}]
  );
  r:rule <#lemma529>.

<#lemma309> a r:Inference;
  r:gives {
    :subtract-dateTimes-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2000-10-30T06:12:00-05:00"^^xsd:dateTime "1999-11-28T09:00:00Z"^^xsd:dateTime) func:subtract-dateTimes "P337DT2H12M"^^xsd:dayTimeDuration}]
  );
  r:rule <#lemma530>.

<#lemma310> a r:Inference;
  r:gives {
    :subtract-dates-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2000-10-30Z"^^xsd:date "1999-11-28Z"^^xsd:date) func:subtract-dates "P337D"^^xsd:dayTimeDuration}]
  );
  r:rule <#lemma531>.

<#lemma311> a r:Inference;
  r:gives {
    :subtract-times-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("11:12:00Z"^^xsd:time "04:00:00-05:00"^^xsd:time) func:subtract-times "PT2H12M"^^xsd:dayTimeDuration}]
  );
  r:rule <#lemma532>.

<#lemma312> a r:Inference;
  r:gives {
    :subtract-times-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("11:00:00-05:00"^^xsd:time "21:30:00+05:30"^^xsd:time) func:subtract-times "PT0S"^^xsd:dayTimeDuration}]
  );
  r:rule <#lemma533>.

<#lemma313> a r:Inference;
  r:gives {
    :subtract-times-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("17:00:00-06:00"^^xsd:time "08:00:00+09:00"^^xsd:time) func:subtract-times "P1D"^^xsd:dayTimeDuration}]
  );
  r:rule <#lemma534>.

<#lemma314> a r:Inference;
  r:gives {
    :subtract-times-4 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("24:00:00"^^xsd:time "23:59:59"^^xsd:time) func:subtract-times "-PT23H59M59S"^^xsd:dayTimeDuration}]
  );
  r:rule <#lemma535>.

<#lemma315> a r:Inference;
  r:gives {
    :add-yearMonthDurations-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:add-yearMonthDurations "P6Y2M"^^xsd:yearMonthDuration}]
  );
  r:rule <#lemma536>.

<#lemma316> a r:Inference;
  r:gives {
    :subtract-yearMonthDurations-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:subtract-yearMonthDurations "-P4M"^^xsd:yearMonthDuration}]
  );
  r:rule <#lemma537>.

<#lemma317> a r:Inference;
  r:gives {
    :multiply-yearMonthDuration-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P2Y11M"^^xsd:yearMonthDuration 2.3) func:multiply-yearMonthDuration "P6Y9M"^^xsd:yearMonthDuration}]
  );
  r:rule <#lemma538>.

<#lemma318> a r:Inference;
  r:gives {
    :divide-yearMonthDuration-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P2Y11M"^^xsd:yearMonthDuration 1.5) func:divide-yearMonthDuration "P1Y11M"^^xsd:yearMonthDuration}]
  );
  r:rule <#lemma539>.

<#lemma319> a r:Inference;
  r:gives {
    :divide-yearMonthDuration-by-yearMonthDuration-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P3Y4M"^^xsd:yearMonthDuration "-P1Y4M"^^xsd:yearMonthDuration) func:divide-yearMonthDuration-by-yearMonthDuration -2.5}]
  );
  r:rule <#lemma540>.

<#lemma320> a r:Inference;
  r:gives {
    :add-dayTimeDurations-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P2DT12H5M"^^xsd:dayTimeDuration "P5DT12H"^^xsd:dayTimeDuration) func:add-dayTimeDurations "P8DT5M"^^xsd:dayTimeDuration}]
  );
  r:rule <#lemma541>.

<#lemma321> a r:Inference;
  r:gives {
    :subtract-dayTimeDurations-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P2DT12H"^^xsd:dayTimeDuration "P1DT10H30M"^^xsd:dayTimeDuration) func:subtract-dayTimeDurations "P1DT1H30M"^^xsd:dayTimeDuration}]
  );
  r:rule <#lemma542>.

<#lemma322> a r:Inference;
  r:gives {
    :multiply-dayTimeDuration-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("PT2H10M"^^xsd:dayTimeDuration 2.1) func:multiply-dayTimeDuration "PT4H33M"^^xsd:dayTimeDuration}]
  );
  r:rule <#lemma543>.

<#lemma323> a r:Inference;
  r:gives {
    :divide-dayTimeDuration-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P1DT2H30M10.5S"^^xsd:dayTimeDuration 1.5) func:divide-dayTimeDuration "PT17H40M7S"^^xsd:dayTimeDuration}]
  );
  r:rule <#lemma544>.

<#lemma324> a r:Inference;
  r:gives {
    :divide-dayTimeDuration-by-dayTimeDuration-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("PT4H33M"^^xsd:dayTimeDuration "PT2H10M"^^xsd:dayTimeDuration) func:divide-dayTimeDuration-by-dayTimeDuration 2.1}]
  );
  r:rule <#lemma545>.

<#lemma325> a r:Inference;
  r:gives {
    :add-yearMonthDuration-to-dateTime-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-dateTime "2001-12-30T11:12:00Z"^^xsd:dateTime}]
  );
  r:rule <#lemma546>.

<#lemma326> a r:Inference;
  r:gives {
    :add-yearMonthDuration-to-date-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-date "2001-12-30Z"^^xsd:date}]
  );
  r:rule <#lemma547>.

<#lemma327> a r:Inference;
  r:gives {
    :add-dayTimeDuration-to-dateTime-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-dateTime "2000-11-02T12:27:00Z"^^xsd:dateTime}]
  );
  r:rule <#lemma548>.

<#lemma328> a r:Inference;
  r:gives {
    :add-dayTimeDuration-to-date-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2004-10-30Z"^^xsd:date "P2DT2H30M0S"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-date "2004-11-01Z"^^xsd:date}]
  );
  r:rule <#lemma549>.

<#lemma329> a r:Inference;
  r:gives {
    :add-dayTimeDuration-to-time-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-time "12:27:00Z"^^xsd:time}]
  );
  r:rule <#lemma550>.

<#lemma330> a r:Inference;
  r:gives {
    :subtract-yearMonthDuration-from-dateTime-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-dateTime "1999-08-30T11:12:00Z"^^xsd:dateTime}]
  );
  r:rule <#lemma551>.

<#lemma331> a r:Inference;
  r:gives {
    :subtract-yearMonthDuration-from-date-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-date "1999-08-30Z"^^xsd:date}]
  );
  r:rule <#lemma552>.

<#lemma332> a r:Inference;
  r:gives {
    :subtract-dayTimeDuration-from-dateTime-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-dateTime "2000-10-27T09:57:00Z"^^xsd:dateTime}]
  );
  r:rule <#lemma553>.

<#lemma333> a r:Inference;
  r:gives {
    :subtract-dayTimeDuration-from-date-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2000-10-30Z"^^xsd:date "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-date "2000-10-26Z"^^xsd:date}]
  );
  r:rule <#lemma554>.

<#lemma334> a r:Inference;
  r:gives {
    :subtract-dayTimeDuration-from-time-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "09:57:00Z"^^xsd:time}]
  );
  r:rule <#lemma555>.

<#lemma335> a r:Inference;
  r:gives {
    :subtract-dayTimeDuration-from-time-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("08:20:00-05:00"^^xsd:time "P23DT10H10M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "22:10:00-05:00"^^xsd:time}]
  );
  r:rule <#lemma556>.

<#lemma336> a r:Inference;
  r:gives {
    :dateTime-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-equal true}]
  );
  r:rule <#lemma557>.

<#lemma337> a r:Inference;
  r:gives {
    :dateTime-equal-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T23:00:00+06:00"^^xsd:dateTime) pred:dateTime-equal true}]
  );
  r:rule <#lemma558>.

<#lemma338> a r:Inference;
  r:gives {
    :dateTime-equal-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T17:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false}]
  );
  r:rule <#lemma559>.

<#lemma339> a r:Inference;
  r:gives {
    :dateTime-equal-4 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T12:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true}]
  );
  r:rule <#lemma560>.

<#lemma340> a r:Inference;
  r:gives {
    :dateTime-equal-5 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2002-04-02T23:00:00-04:00"^^xsd:dateTime "2002-04-03T02:00:00-01:00"^^xsd:dateTime) pred:dateTime-equal true}]
  );
  r:rule <#lemma561>.

<#lemma341> a r:Inference;
  r:gives {
    :dateTime-equal-6 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("1999-12-31T24:00:00-05:00"^^xsd:dateTime "2000-01-01T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true}]
  );
  r:rule <#lemma562>.

<#lemma342> a r:Inference;
  r:gives {
    :dateTime-equal-7 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2005-04-04T24:00:00-05:00"^^xsd:dateTime "2005-04-04T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false}]
  );
  r:rule <#lemma563>.

<#lemma343> a r:Inference;
  r:gives {
    :dateTime-less-than-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than true}]
  );
  r:rule <#lemma564>.

<#lemma344> a r:Inference;
  r:gives {
    :dateTime-greater-than-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than true}]
  );
  r:rule <#lemma565>.

<#lemma345> a r:Inference;
  r:gives {
    :date-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-equal false}]
  );
  r:rule <#lemma566>.

<#lemma346> a r:Inference;
  r:gives {
    :date-equal-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-equal true}]
  );
  r:rule <#lemma567>.

<#lemma347> a r:Inference;
  r:gives {
    :date-less-than-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2004-12-25Z"^^xsd:date "2004-12-25-05:00"^^xsd:date) pred:date-less-than true}]
  );
  r:rule <#lemma568>.

<#lemma348> a r:Inference;
  r:gives {
    :date-less-than-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-less-than false}]
  );
  r:rule <#lemma569>.

<#lemma349> a r:Inference;
  r:gives {
    :date-greater-than-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than true}]
  );
  r:rule <#lemma570>.

<#lemma350> a r:Inference;
  r:gives {
    :date-greater-than-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-greater-than false}]
  );
  r:rule <#lemma571>.

<#lemma351> a r:Inference;
  r:gives {
    :time-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-equal false}]
  );
  r:rule <#lemma572>.

<#lemma352> a r:Inference;
  r:gives {
    :time-equal-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("21:30:00+10:30"^^xsd:time "06:00:00-05:00"^^xsd:time) pred:time-equal true}]
  );
  r:rule <#lemma573>.

<#lemma353> a r:Inference;
  r:gives {
    :time-equal-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("24:00:00+01:00"^^xsd:time "00:00:00+01:00"^^xsd:time) pred:time-equal true}]
  );
  r:rule <#lemma574>.

<#lemma354> a r:Inference;
  r:gives {
    :time-less-than-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("12:00:00-05:00"^^xsd:time "23:00:00+06:00"^^xsd:time) pred:time-less-than false}]
  );
  r:rule <#lemma575>.

<#lemma355> a r:Inference;
  r:gives {
    :time-less-than-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("11:00:00-05:00"^^xsd:time "17:00:00Z"^^xsd:time) pred:time-less-than true}]
  );
  r:rule <#lemma576>.

<#lemma356> a r:Inference;
  r:gives {
    :time-less-than-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("23:59:59-05:00"^^xsd:time "24:00:00-05:00"^^xsd:time) pred:time-less-than false}]
  );
  r:rule <#lemma577>.

<#lemma357> a r:Inference;
  r:gives {
    :time-greater-than-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than false}]
  );
  r:rule <#lemma578>.

<#lemma358> a r:Inference;
  r:gives {
    :duration-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-equal true}]
  );
  r:rule <#lemma579>.

<#lemma359> a r:Inference;
  r:gives {
    :duration-equal-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("PT24H"^^xsd:duration "P1D"^^xsd:duration) pred:duration-equal true}]
  );
  r:rule <#lemma580>.

<#lemma360> a r:Inference;
  r:gives {
    :duration-equal-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P1Y"^^xsd:duration "P365D"^^xsd:duration) pred:duration-equal false}]
  );
  r:rule <#lemma581>.

<#lemma361> a r:Inference;
  r:gives {
    :duration-equal-4 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P2Y0M0DT0H0M0S"^^xsd:duration "P24M"^^xsd:duration) pred:duration-equal true}]
  );
  r:rule <#lemma582>.

<#lemma362> a r:Inference;
  r:gives {
    :dayTimeDuration-less-than-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than true}]
  );
  r:rule <#lemma583>.

<#lemma363> a r:Inference;
  r:gives {
    :dayTimeDuration-greater-than-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than false}]
  );
  r:rule <#lemma584>.

<#lemma364> a r:Inference;
  r:gives {
    :yearMonthDuration-less-than-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than true}]
  );
  r:rule <#lemma585>.

<#lemma365> a r:Inference;
  r:gives {
    :yearMonthDuration-greater-than-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than false}]
  );
  r:rule <#lemma586>.

<#lemma366> a r:Inference;
  r:gives {
    :dateTime-not-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-not-equal false}]
  );
  r:rule <#lemma587>.

<#lemma367> a r:Inference;
  r:gives {
    :dateTime-less-than-or-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than-or-equal true}]
  );
  r:rule <#lemma588>.

<#lemma368> a r:Inference;
  r:gives {
    :dateTime-greater-than-or-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than-or-equal true}]
  );
  r:rule <#lemma589>.

<#lemma369> a r:Inference;
  r:gives {
    :date-not-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-not-equal true}]
  );
  r:rule <#lemma590>.

<#lemma370> a r:Inference;
  r:gives {
    :date-less-than-or-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-less-than-or-equal false}]
  );
  r:rule <#lemma591>.

<#lemma371> a r:Inference;
  r:gives {
    :date-greater-than-or-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than-or-equal true}]
  );
  r:rule <#lemma592>.

<#lemma372> a r:Inference;
  r:gives {
    :time-not-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-not-equal true}]
  );
  r:rule <#lemma593>.

<#lemma373> a r:Inference;
  r:gives {
    :time-less-than-or-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-less-than-or-equal true}]
  );
  r:rule <#lemma594>.

<#lemma374> a r:Inference;
  r:gives {
    :time-greater-than-or-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than-or-equal false}]
  );
  r:rule <#lemma595>.

<#lemma375> a r:Inference;
  r:gives {
    :duration-not-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-not-equal false}]
  );
  r:rule <#lemma596>.

<#lemma376> a r:Inference;
  r:gives {
    :dayTimeDuration-less-than-or-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than-or-equal true}]
  );
  r:rule <#lemma597>.

<#lemma377> a r:Inference;
  r:gives {
    :dayTimeDuration-greater-than-or-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than-or-equal false}]
  );
  r:rule <#lemma598>.

<#lemma378> a r:Inference;
  r:gives {
    :yearMonthDuration-less-than-or-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than-or-equal true}]
  );
  r:rule <#lemma599>.

<#lemma379> a r:Inference;
  r:gives {
    :yearMonthDuration-greater-than-or-equal-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than-or-equal false}]
  );
  r:rule <#lemma600>.

<#lemma380> a r:Inference;
  r:gives {
    :PlainLiteral-from-string-lang-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("Family Guy") func:PlainLiteral-from-string-lang "Family Guy"}]
  );
  r:rule <#lemma601>.

<#lemma381> a r:Inference;
  r:gives {
    :PlainLiteral-from-string-lang-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("Family Guy" "EN") func:PlainLiteral-from-string-lang "Family Guy"@en}]
  );
  r:rule <#lemma602>.

<#lemma382> a r:Inference;
  r:gives {
    :string-from-PlainLiteral-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("Family Guy") func:string-from-PlainLiteral "Family Guy"}]
  );
  r:rule <#lemma603>.

<#lemma383> a r:Inference;
  r:gives {
    :string-from-PlainLiteral-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("Family Guy"@en) func:string-from-PlainLiteral "Family Guy"}]
  );
  r:rule <#lemma604>.

<#lemma384> a r:Inference;
  r:gives {
    :lang-from-PlainLiteral-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("Family Guy") func:lang-from-PlainLiteral ""}]
  );
  r:rule <#lemma605>.

<#lemma385> a r:Inference;
  r:gives {
    :lang-from-PlainLiteral-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("Family Guy"@en) func:lang-from-PlainLiteral "en"}]
  );
  r:rule <#lemma606>.

<#lemma386> a r:Inference;
  r:gives {
    :PlainLiteral-compare-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("Family Guy" "Mother") func:PlainLiteral-compare -1}]
  );
  r:rule <#lemma607>.

<#lemma387> a r:Inference;
  r:gives {
    :PlainLiteral-compare-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("Family Guy"@en "Brother"@en) func:PlainLiteral-compare 1}]
  );
  r:rule <#lemma608>.

<#lemma388> a r:Inference;
  r:gives {
    :PlainLiteral-length-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("Family Guy") func:PlainLiteral-length 10}]
  );
  r:rule <#lemma609>.

<#lemma389> a r:Inference;
  r:gives {
    :PlainLiteral-length-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("Family Guy"@en) func:PlainLiteral-length 10}]
  );
  r:rule <#lemma610>.

<#lemma390> a r:Inference;
  r:gives {
    :matches-language-range-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("Family Guy"@en "en") pred:matches-language-range true}]
  );
  r:rule <#lemma611>.

<#lemma391> a r:Inference;
  r:gives {
    :matches-language-range-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {("Family Guy"@en-US "en-*") pred:matches-language-range true}]
  );
  r:rule <#lemma612>.

<#lemma392> a r:Inference;
  r:gives {
    :is-list-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((:a :b :c :d)) pred:is-list true}]
  );
  r:rule <#lemma613>.

<#lemma393> a r:Inference;
  r:gives {
    :list-contains-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((:a :b :c :d) :b) pred:list-contains true}]
  );
  r:rule <#lemma614>.

<#lemma394> a r:Inference;
  r:gives {
    :make-list-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(:a :b :c :d) func:make-list (:a :b :c :d)}]
  );
  r:rule <#lemma615>.

<#lemma395> a r:Inference;
  r:gives {
    :count-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((:a :b :c :d)) func:count 4}]
  );
  r:rule <#lemma616>.

<#lemma396> a r:Inference;
  r:gives {
    :get-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((:a :b :c :d) 3) func:get :d}]
  );
  r:rule <#lemma617>.

<#lemma397> a r:Inference;
  r:gives {
    :sublist-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) 0 0) func:sublist ()}]
  );
  r:rule <#lemma618>.

<#lemma398> a r:Inference;
  r:gives {
    :sublist-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) 0 1) func:sublist (0)}]
  );
  r:rule <#lemma619>.

<#lemma399> a r:Inference;
  r:gives {
    :sublist-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) 0 4) func:sublist (0 1 2 3)}]
  );
  r:rule <#lemma620>.

<#lemma400> a r:Inference;
  r:gives {
    :sublist-4 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) 0 5) func:sublist (0 1 2 3 4)}]
  );
  r:rule <#lemma621>.

<#lemma401> a r:Inference;
  r:gives {
    :sublist-5 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) 0 10) func:sublist (0 1 2 3 4)}]
  );
  r:rule <#lemma622>.

<#lemma402> a r:Inference;
  r:gives {
    :sublist-6 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) 0 -2) func:sublist (0 1 2)}]
  );
  r:rule <#lemma623>.

<#lemma403> a r:Inference;
  r:gives {
    :sublist-7 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) 2 4) func:sublist (2 3)}]
  );
  r:rule <#lemma624>.

<#lemma404> a r:Inference;
  r:gives {
    :sublist-9 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) 2 -2) func:sublist (2)}]
  );
  r:rule <#lemma625>.

<#lemma405> a r:Inference;
  r:gives {
    :sublist-10 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) 3) func:sublist (3 4)}]
  );
  r:rule <#lemma626>.

<#lemma406> a r:Inference;
  r:gives {
    :sublist-11 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) -2) func:sublist (3 4)}]
  );
  r:rule <#lemma627>.

<#lemma407> a r:Inference;
  r:gives {
    :append-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2) 3) func:append (0 1 2 3)}]
  );
  r:rule <#lemma628>.

<#lemma408> a r:Inference;
  r:gives {
    :append-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2) 3 4) func:append (0 1 2 3 4)}]
  );
  r:rule <#lemma629>.

<#lemma409> a r:Inference;
  r:gives {
    :append-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((1 1) (1) (1) ((1))) func:append (1 1 (1) (1) ((1)))}]
  );
  r:rule <#lemma630>.

<#lemma410> a r:Inference;
  r:gives {
    :append-4 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(() 1) func:append (1)}]
  );
  r:rule <#lemma631>.

<#lemma411> a r:Inference;
  r:gives {
    :concatenate-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2) (3 4 5)) func:concatenate (0 1 2 3 4 5)}]
  );
  r:rule <#lemma632>.

<#lemma412> a r:Inference;
  r:gives {
    :concatenate-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((1 1) (1) (1)) func:concatenate (1 1 1 1)}]
  );
  r:rule <#lemma633>.

<#lemma413> a r:Inference;
  r:gives {
    :concatenate-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(()) func:concatenate ()}]
  );
  r:rule <#lemma634>.

<#lemma414> a r:Inference;
  r:gives {
    :concatenate-4 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(() (1) () (2) ((3))) func:concatenate (1 2 (3))}]
  );
  r:rule <#lemma635>.

<#lemma415> a r:Inference;
  r:gives {
    :insert-before-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) 0 99) func:insert-before (99 0 1 2 3 4)}]
  );
  r:rule <#lemma636>.

<#lemma416> a r:Inference;
  r:gives {
    :insert-before-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) 1 99) func:insert-before (0 99 1 2 3 4)}]
  );
  r:rule <#lemma637>.

<#lemma417> a r:Inference;
  r:gives {
    :insert-before-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) -1 99) func:insert-before (0 1 2 3 99 4)}]
  );
  r:rule <#lemma638>.

<#lemma418> a r:Inference;
  r:gives {
    :insert-before-4 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) -5 99) func:insert-before (99 0 1 2 3 4)}]
  );
  r:rule <#lemma639>.

<#lemma419> a r:Inference;
  r:gives {
    :remove-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) 0) func:remove (1 2 3 4)}]
  );
  r:rule <#lemma640>.

<#lemma420> a r:Inference;
  r:gives {
    :remove-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) 1) func:remove (0 2 3 4)}]
  );
  r:rule <#lemma641>.

<#lemma421> a r:Inference;
  r:gives {
    :remove-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) 4) func:remove (0 1 2 3)}]
  );
  r:rule <#lemma642>.

<#lemma422> a r:Inference;
  r:gives {
    :remove-4 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) -1) func:remove (0 1 2 3)}]
  );
  r:rule <#lemma643>.

<#lemma423> a r:Inference;
  r:gives {
    :remove-5 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) -5) func:remove (1 2 3 4)}]
  );
  r:rule <#lemma644>.

<#lemma424> a r:Inference;
  r:gives {
    :reverse-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4)) func:reverse (4 3 2 1 0)}]
  );
  r:rule <#lemma645>.

<#lemma425> a r:Inference;
  r:gives {
    :reverse-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((1)) func:reverse (1)}]
  );
  r:rule <#lemma646>.

<#lemma426> a r:Inference;
  r:gives {
    :reverse-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {(()) func:reverse ()}]
  );
  r:rule <#lemma647>.

<#lemma427> a r:Inference;
  r:gives {
    :index-of-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) 2) func:index-of (2)}]
  );
  r:rule <#lemma648>.

<#lemma428> a r:Inference;
  r:gives {
    :index-of-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4 5 2 2) 2) func:index-of (2 6 7)}]
  );
  r:rule <#lemma649>.

<#lemma429> a r:Inference;
  r:gives {
    :index-of-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((2 2 3 4 5 2 2) 2) func:index-of (0 1 5 6)}]
  );
  r:rule <#lemma650>.

<#lemma430> a r:Inference;
  r:gives {
    :index-of-4 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((2 2 3 4 5 2 2) 1) func:index-of ()}]
  );
  r:rule <#lemma651>.

<#lemma431> a r:Inference;
  r:gives {
    :union-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 4) (3 4 5 6)) func:union (0 1 2 4 3 5 6)}]
  );
  r:rule <#lemma652>.

<#lemma432> a r:Inference;
  r:gives {
    :union-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3) (4)) func:union (0 1 2 3 4)}]
  );
  r:rule <#lemma653>.

<#lemma433> a r:Inference;
  r:gives {
    :union-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3) (3)) func:union (0 1 2 3)}]
  );
  r:rule <#lemma654>.

<#lemma434> a r:Inference;
  r:gives {
    :union-4 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 2 1 0)) func:union (0 2 1)}]
  );
  r:rule <#lemma655>.

<#lemma435> a r:Inference;
  r:gives {
    :distinct-values-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4)) func:distinct-values (0 1 2 3 4)}]
  );
  r:rule <#lemma656>.

<#lemma436> a r:Inference;
  r:gives {
    :distinct-values-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4 0 4)) func:distinct-values (0 1 2 3 4)}]
  );
  r:rule <#lemma657>.

<#lemma437> a r:Inference;
  r:gives {
    :distinct-values-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((3 3 3)) func:distinct-values (3)}]
  );
  r:rule <#lemma658>.

<#lemma438> a r:Inference;
  r:gives {
    :intersect-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) (1 3)) func:intersect (1 3)}]
  );
  r:rule <#lemma659>.

<#lemma439> a r:Inference;
  r:gives {
    :intersect-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) (3 1)) func:intersect (1 3)}]
  );
  r:rule <#lemma660>.

<#lemma440> a r:Inference;
  r:gives {
    :intersect-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) ()) func:intersect ()}]
  );
  r:rule <#lemma661>.

<#lemma441> a r:Inference;
  r:gives {
    :intersect-4 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) (0 1 2 3 4 5 6)) func:intersect (0 1 2 3 4)}]
  );
  r:rule <#lemma662>.

<#lemma442> a r:Inference;
  r:gives {
    :except-1 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) (1 3)) func:except (0 2 4)}]
  );
  r:rule <#lemma663>.

<#lemma443> a r:Inference;
  r:gives {
    :except-2 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) ()) func:except (0 1 2 3 4)}]
  );
  r:rule <#lemma664>.

<#lemma444> a r:Inference;
  r:gives {
    :except-3 :result true.
  };
  r:evidence (
    [ a r:Fact; r:gives {((0 1 2 3 4) (0 1 2 3 4)) func:except ()}]
  );
  r:rule <#lemma665>.

<#lemma445> a r:Extraction;
  r:gives {
    {("chat"@fr "chien"@fr) pred:literal-not-identical true} => {:literal-not-identical-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma446> a r:Extraction;
  r:gives {
    {(:case "http://eulersharp.sourceforge.net/2007/07test#case") pred:iri-string true} => {:iri-string-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma447> a r:Extraction;
  r:gives {
    {(1 1) func:numeric-add 2} => {:numeric-add-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma448> a r:Extraction;
  r:gives {
    {(5 2) func:numeric-subtract 3} => {:numeric-subtract-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma449> a r:Extraction;
  r:gives {
    {(5 2) func:numeric-multiply 10} => {:numeric-multiply-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma450> a r:Extraction;
  r:gives {
    {(5 2) func:numeric-divide 2.5} => {:numeric-divide-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma451> a r:Extraction;
  r:gives {
    {(5 2) func:numeric-integer-divide 2} => {:numeric-integer-divide-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma452> a r:Extraction;
  r:gives {
    {(10 3) func:numeric-mod 1} => {:numeric-mod-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma453> a r:Extraction;
  r:gives {
    {(6 -2) func:numeric-mod 0} => {:numeric-mod-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma454> a r:Extraction;
  r:gives {
    {(4.5 1.2) func:numeric-mod 0.9000000000000004} => {:numeric-mod-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma455> a r:Extraction;
  r:gives {
    {(123.0 6.0) func:numeric-mod 3.0} => {:numeric-mod-4 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma456> a r:Extraction;
  r:gives {
    {(1 1.0) pred:numeric-equal true} => {:numeric-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma457> a r:Extraction;
  r:gives {
    {(2.0 3) pred:numeric-less-than true} => {:numeric-less-than-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma458> a r:Extraction;
  r:gives {
    {(1.0 0) pred:numeric-greater-than true} => {:numeric-greater-than-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma459> a r:Extraction;
  r:gives {
    {(1 1.01) pred:numeric-not-equal true} => {:numeric-not-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma460> a r:Extraction;
  r:gives {
    {(3 5.0) pred:numeric-less-than-or-equal true} => {:numeric-less-than-or-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma461> a r:Extraction;
  r:gives {
    {(1.0 1) pred:numeric-greater-than-or-equal true} => {:numeric-greater-than-or-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma462> a r:Extraction;
  r:gives {
    {(false) func:not true} => {:not-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma463> a r:Extraction;
  r:gives {
    {(true) func:not false} => {:not-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma464> a r:Extraction;
  r:gives {
    {(false false) pred:boolean-equal true} => {:boolean-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma465> a r:Extraction;
  r:gives {
    {(false true) pred:boolean-less-than true} => {:boolean-less-than-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma466> a r:Extraction;
  r:gives {
    {(true false) pred:boolean-greater-than true} => {:boolean-greater-than-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma467> a r:Extraction;
  r:gives {
    {("abc" "abc") func:compare 0} => {:compare-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma468> a r:Extraction;
  r:gives {
    {("Straßen" "Straße") func:compare 1} => {:compare-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma469> a r:Extraction;
  r:gives {
    {("Ingratitude, " "thou " "marble-hearted" " fiend!") func:concat "Ingratitude, thou marble-hearted fiend!"} => {:concat-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma470> a r:Extraction;
  r:gives {
    {(("Now" "is" "the" "time" "...") " ") func:string-join "Now is the time ..."} => {:string-join-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma471> a r:Extraction;
  r:gives {
    {(("Blow, " "blow, " "thou " "winter " "wind!") "") func:string-join "Blow, blow, thou winter wind!"} => {:string-join-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma472> a r:Extraction;
  r:gives {
    {(() "separator") func:string-join ""} => {:string-join-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma473> a r:Extraction;
  r:gives {
    {("motor car" 6) func:substring " car"} => {:substring-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma474> a r:Extraction;
  r:gives {
    {("metadata" 4 3) func:substring "ada"} => {:substring-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma475> a r:Extraction;
  r:gives {
    {("12345" 1.5 2.6) func:substring "234"} => {:substring-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma476> a r:Extraction;
  r:gives {
    {("12345" 0 3) func:substring "12"} => {:substring-4 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma477> a r:Extraction;
  r:gives {
    {("12345" 5 -3) func:substring ""} => {:substring-5 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma478> a r:Extraction;
  r:gives {
    {("12345" -3 5) func:substring "1"} => {:substring-6 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma479> a r:Extraction;
  r:gives {
    {("Harp not on that string, madam; that is past.") func:string-length 45} => {:string-length-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma480> a r:Extraction;
  r:gives {
    {(""@en) func:string-length 0} => {:string-length-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma481> a r:Extraction;
  r:gives {
    {("abCd0") func:upper-case "ABCD0"} => {:upper-case-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma482> a r:Extraction;
  r:gives {
    {("ABc!D") func:lower-case "abc!d"} => {:lower-case-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma483> a r:Extraction;
  r:gives {
    {("00/Weather/CA/Los%20Angeles#ocean") func:encode-for-uri "00%2fWeather%2fCA%2fLos%2520Angeles%23ocean"} => {:encode-for-uri-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma484> a r:Extraction;
  r:gives {
    {("~bébé") func:encode-for-uri "~b%c3%a9b%c3%a9"} => {:encode-for-uri-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma485> a r:Extraction;
  r:gives {
    {("100% organic") func:encode-for-uri "100%25%20organic"} => {:encode-for-uri-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma486> a r:Extraction;
  r:gives {
    {("tattoo" "attoo") func:substring-before "t"} => {:substring-before-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma487> a r:Extraction;
  r:gives {
    {("tattoo" "tatto") func:substring-before ""} => {:substring-before-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma488> a r:Extraction;
  r:gives {
    {("tattoo" "tat") func:substring-after "too"} => {:substring-after-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma489> a r:Extraction;
  r:gives {
    {("tattoo" "tattoo") func:substring-after ""} => {:substring-after-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma490> a r:Extraction;
  r:gives {
    {("tattoo" "t") pred:contains true} => {:contains-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma491> a r:Extraction;
  r:gives {
    {("tattoo" "tat") pred:starts-with true} => {:starts-with-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma492> a r:Extraction;
  r:gives {
    {("tattoo" "tattoo") pred:ends-with true} => {:ends-with-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma493> a r:Extraction;
  r:gives {
    {("abracadabra" "bra") pred:matches true} => {:matches-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma494> a r:Extraction;
  r:gives {
    {("abracadabra" "^a.*a$") pred:matches true} => {:matches-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma495> a r:Extraction;
  r:gives {
    {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:year-from-dateTime 1999} => {:year-from-dateTime-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma496> a r:Extraction;
  r:gives {
    {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:month-from-dateTime 5} => {:month-from-dateTime-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma497> a r:Extraction;
  r:gives {
    {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:day-from-dateTime 31} => {:day-from-dateTime-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma498> a r:Extraction;
  r:gives {
    {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:hours-from-dateTime 13} => {:hours-from-dateTime-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma499> a r:Extraction;
  r:gives {
    {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:minutes-from-dateTime 20} => {:minutes-from-dateTime-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma500> a r:Extraction;
  r:gives {
    {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:seconds-from-dateTime 0} => {:seconds-from-dateTime-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma501> a r:Extraction;
  r:gives {
    {("1999-05-31-05:00"^^xsd:date) func:year-from-date 1999} => {:year-from-date-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma502> a r:Extraction;
  r:gives {
    {("1999-05-31-05:00"^^xsd:date) func:month-from-date 5} => {:month-from-date-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma503> a r:Extraction;
  r:gives {
    {("1999-05-31-05:00"^^xsd:date) func:day-from-date 31} => {:day-from-date-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma504> a r:Extraction;
  r:gives {
    {("13:20:00-05:00"^^xsd:time) func:hours-from-time 13} => {:hours-from-time-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma505> a r:Extraction;
  r:gives {
    {("13:20:00-05:00"^^xsd:time) func:minutes-from-time 20} => {:minutes-from-time-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma506> a r:Extraction;
  r:gives {
    {("13:20:00-05:00"^^xsd:time) func:seconds-from-time 0} => {:seconds-from-time-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma507> a r:Extraction;
  r:gives {
    {("P20Y15M"^^xsd:yearMonthDuration) func:years-from-duration 21} => {:years-from-duration-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma508> a r:Extraction;
  r:gives {
    {("-P15M"^^xsd:yearMonthDuration) func:years-from-duration -1} => {:years-from-duration-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma509> a r:Extraction;
  r:gives {
    {("-P2DT15H"^^xsd:dayTimeDuration) func:years-from-duration 0} => {:years-from-duration-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma510> a r:Extraction;
  r:gives {
    {("P20Y15M"^^xsd:yearMonthDuration) func:months-from-duration 3} => {:months-from-duration-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma511> a r:Extraction;
  r:gives {
    {("-P20Y18M"^^xsd:yearMonthDuration) func:months-from-duration -6} => {:months-from-duration-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma512> a r:Extraction;
  r:gives {
    {("-P2DT15H0M0S"^^xsd:dayTimeDuration) func:months-from-duration 0} => {:months-from-duration-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma513> a r:Extraction;
  r:gives {
    {("P3DT10H"^^xsd:dayTimeDuration) func:days-from-duration 3} => {:days-from-duration-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma514> a r:Extraction;
  r:gives {
    {("P3DT55H"^^xsd:dayTimeDuration) func:days-from-duration 5} => {:days-from-duration-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma515> a r:Extraction;
  r:gives {
    {("P3Y5M"^^xsd:yearMonthDuration) func:days-from-duration 0} => {:days-from-duration-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma516> a r:Extraction;
  r:gives {
    {("P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration 10} => {:hours-from-duration-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma517> a r:Extraction;
  r:gives {
    {("P3DT12H32M12S"^^xsd:dayTimeDuration) func:hours-from-duration 12} => {:hours-from-duration-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma518> a r:Extraction;
  r:gives {
    {("PT123H"^^xsd:dayTimeDuration) func:hours-from-duration 3} => {:hours-from-duration-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma519> a r:Extraction;
  r:gives {
    {("-P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration -10} => {:hours-from-duration-4 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma520> a r:Extraction;
  r:gives {
    {("P3DT10H"^^xsd:dayTimeDuration) func:minutes-from-duration 0} => {:minutes-from-duration-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma521> a r:Extraction;
  r:gives {
    {("-P5DT12H30M"^^xsd:dayTimeDuration) func:minutes-from-duration -30} => {:minutes-from-duration-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma522> a r:Extraction;
  r:gives {
    {("P3DT10H12.5S"^^xsd:dayTimeDuration) func:seconds-from-duration 12.5} => {:seconds-from-duration-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma523> a r:Extraction;
  r:gives {
    {("-PT256S"^^xsd:dayTimeDuration) func:seconds-from-duration -16.0} => {:seconds-from-duration-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma524> a r:Extraction;
  r:gives {
    {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:timezone-from-dateTime "-PT5H"^^xsd:dayTimeDuration} => {:timezone-from-dateTime-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma525> a r:Extraction;
  r:gives {
    {("2000-06-12T13:20:00Z"^^xsd:dateTime) func:timezone-from-dateTime "PT0S"^^xsd:dayTimeDuration} => {:timezone-from-dateTime-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma526> a r:Extraction;
  r:gives {
    {("1999-05-31-05:00"^^xsd:date) func:timezone-from-date "-PT5H"^^xsd:dayTimeDuration} => {:timezone-from-date-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma527> a r:Extraction;
  r:gives {
    {("2000-06-12Z"^^xsd:date) func:timezone-from-date "PT0S"^^xsd:dayTimeDuration} => {:timezone-from-date-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma528> a r:Extraction;
  r:gives {
    {("13:20:00-05:00"^^xsd:time) func:timezone-from-time "-PT5H"^^xsd:dayTimeDuration} => {:timezone-from-time-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma529> a r:Extraction;
  r:gives {
    {("13:20:00Z"^^xsd:time) func:timezone-from-time "PT0S"^^xsd:dayTimeDuration} => {:timezone-from-time-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma530> a r:Extraction;
  r:gives {
    {("2000-10-30T06:12:00-05:00"^^xsd:dateTime "1999-11-28T09:00:00Z"^^xsd:dateTime) func:subtract-dateTimes "P337DT2H12M"^^xsd:dayTimeDuration} => {:subtract-dateTimes-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma531> a r:Extraction;
  r:gives {
    {("2000-10-30Z"^^xsd:date "1999-11-28Z"^^xsd:date) func:subtract-dates "P337D"^^xsd:dayTimeDuration} => {:subtract-dates-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma532> a r:Extraction;
  r:gives {
    {("11:12:00Z"^^xsd:time "04:00:00-05:00"^^xsd:time) func:subtract-times "PT2H12M"^^xsd:dayTimeDuration} => {:subtract-times-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma533> a r:Extraction;
  r:gives {
    {("11:00:00-05:00"^^xsd:time "21:30:00+05:30"^^xsd:time) func:subtract-times "PT0S"^^xsd:dayTimeDuration} => {:subtract-times-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma534> a r:Extraction;
  r:gives {
    {("17:00:00-06:00"^^xsd:time "08:00:00+09:00"^^xsd:time) func:subtract-times "P1D"^^xsd:dayTimeDuration} => {:subtract-times-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma535> a r:Extraction;
  r:gives {
    {("24:00:00"^^xsd:time "23:59:59"^^xsd:time) func:subtract-times "-PT23H59M59S"^^xsd:dayTimeDuration} => {:subtract-times-4 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma536> a r:Extraction;
  r:gives {
    {("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:add-yearMonthDurations "P6Y2M"^^xsd:yearMonthDuration} => {:add-yearMonthDurations-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma537> a r:Extraction;
  r:gives {
    {("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:subtract-yearMonthDurations "-P4M"^^xsd:yearMonthDuration} => {:subtract-yearMonthDurations-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma538> a r:Extraction;
  r:gives {
    {("P2Y11M"^^xsd:yearMonthDuration 2.3) func:multiply-yearMonthDuration "P6Y9M"^^xsd:yearMonthDuration} => {:multiply-yearMonthDuration-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma539> a r:Extraction;
  r:gives {
    {("P2Y11M"^^xsd:yearMonthDuration 1.5) func:divide-yearMonthDuration "P1Y11M"^^xsd:yearMonthDuration} => {:divide-yearMonthDuration-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma540> a r:Extraction;
  r:gives {
    {("P3Y4M"^^xsd:yearMonthDuration "-P1Y4M"^^xsd:yearMonthDuration) func:divide-yearMonthDuration-by-yearMonthDuration -2.5} => {:divide-yearMonthDuration-by-yearMonthDuration-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma541> a r:Extraction;
  r:gives {
    {("P2DT12H5M"^^xsd:dayTimeDuration "P5DT12H"^^xsd:dayTimeDuration) func:add-dayTimeDurations "P8DT5M"^^xsd:dayTimeDuration} => {:add-dayTimeDurations-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma542> a r:Extraction;
  r:gives {
    {("P2DT12H"^^xsd:dayTimeDuration "P1DT10H30M"^^xsd:dayTimeDuration) func:subtract-dayTimeDurations "P1DT1H30M"^^xsd:dayTimeDuration} => {:subtract-dayTimeDurations-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma543> a r:Extraction;
  r:gives {
    {("PT2H10M"^^xsd:dayTimeDuration 2.1) func:multiply-dayTimeDuration "PT4H33M"^^xsd:dayTimeDuration} => {:multiply-dayTimeDuration-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma544> a r:Extraction;
  r:gives {
    {("P1DT2H30M10.5S"^^xsd:dayTimeDuration 1.5) func:divide-dayTimeDuration "PT17H40M7S"^^xsd:dayTimeDuration} => {:divide-dayTimeDuration-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma545> a r:Extraction;
  r:gives {
    {("PT4H33M"^^xsd:dayTimeDuration "PT2H10M"^^xsd:dayTimeDuration) func:divide-dayTimeDuration-by-dayTimeDuration 2.1} => {:divide-dayTimeDuration-by-dayTimeDuration-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma546> a r:Extraction;
  r:gives {
    {("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-dateTime "2001-12-30T11:12:00Z"^^xsd:dateTime} => {:add-yearMonthDuration-to-dateTime-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma547> a r:Extraction;
  r:gives {
    {("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-date "2001-12-30Z"^^xsd:date} => {:add-yearMonthDuration-to-date-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma548> a r:Extraction;
  r:gives {
    {("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-dateTime "2000-11-02T12:27:00Z"^^xsd:dateTime} => {:add-dayTimeDuration-to-dateTime-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma549> a r:Extraction;
  r:gives {
    {("2004-10-30Z"^^xsd:date "P2DT2H30M0S"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-date "2004-11-01Z"^^xsd:date} => {:add-dayTimeDuration-to-date-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma550> a r:Extraction;
  r:gives {
    {("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-time "12:27:00Z"^^xsd:time} => {:add-dayTimeDuration-to-time-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma551> a r:Extraction;
  r:gives {
    {("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-dateTime "1999-08-30T11:12:00Z"^^xsd:dateTime} => {:subtract-yearMonthDuration-from-dateTime-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma552> a r:Extraction;
  r:gives {
    {("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-date "1999-08-30Z"^^xsd:date} => {:subtract-yearMonthDuration-from-date-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma553> a r:Extraction;
  r:gives {
    {("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-dateTime "2000-10-27T09:57:00Z"^^xsd:dateTime} => {:subtract-dayTimeDuration-from-dateTime-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma554> a r:Extraction;
  r:gives {
    {("2000-10-30Z"^^xsd:date "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-date "2000-10-26Z"^^xsd:date} => {:subtract-dayTimeDuration-from-date-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma555> a r:Extraction;
  r:gives {
    {("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "09:57:00Z"^^xsd:time} => {:subtract-dayTimeDuration-from-time-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma556> a r:Extraction;
  r:gives {
    {("08:20:00-05:00"^^xsd:time "P23DT10H10M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "22:10:00-05:00"^^xsd:time} => {:subtract-dayTimeDuration-from-time-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma557> a r:Extraction;
  r:gives {
    {("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-equal true} => {:dateTime-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma558> a r:Extraction;
  r:gives {
    {("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T23:00:00+06:00"^^xsd:dateTime) pred:dateTime-equal true} => {:dateTime-equal-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma559> a r:Extraction;
  r:gives {
    {("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T17:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false} => {:dateTime-equal-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma560> a r:Extraction;
  r:gives {
    {("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T12:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true} => {:dateTime-equal-4 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma561> a r:Extraction;
  r:gives {
    {("2002-04-02T23:00:00-04:00"^^xsd:dateTime "2002-04-03T02:00:00-01:00"^^xsd:dateTime) pred:dateTime-equal true} => {:dateTime-equal-5 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma562> a r:Extraction;
  r:gives {
    {("1999-12-31T24:00:00-05:00"^^xsd:dateTime "2000-01-01T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true} => {:dateTime-equal-6 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma563> a r:Extraction;
  r:gives {
    {("2005-04-04T24:00:00-05:00"^^xsd:dateTime "2005-04-04T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false} => {:dateTime-equal-7 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma564> a r:Extraction;
  r:gives {
    {("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than true} => {:dateTime-less-than-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma565> a r:Extraction;
  r:gives {
    {("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than true} => {:dateTime-greater-than-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma566> a r:Extraction;
  r:gives {
    {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-equal false} => {:date-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma567> a r:Extraction;
  r:gives {
    {("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-equal true} => {:date-equal-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma568> a r:Extraction;
  r:gives {
    {("2004-12-25Z"^^xsd:date "2004-12-25-05:00"^^xsd:date) pred:date-less-than true} => {:date-less-than-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma569> a r:Extraction;
  r:gives {
    {("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-less-than false} => {:date-less-than-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma570> a r:Extraction;
  r:gives {
    {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than true} => {:date-greater-than-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma571> a r:Extraction;
  r:gives {
    {("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-greater-than false} => {:date-greater-than-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma572> a r:Extraction;
  r:gives {
    {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-equal false} => {:time-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma573> a r:Extraction;
  r:gives {
    {("21:30:00+10:30"^^xsd:time "06:00:00-05:00"^^xsd:time) pred:time-equal true} => {:time-equal-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma574> a r:Extraction;
  r:gives {
    {("24:00:00+01:00"^^xsd:time "00:00:00+01:00"^^xsd:time) pred:time-equal true} => {:time-equal-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma575> a r:Extraction;
  r:gives {
    {("12:00:00-05:00"^^xsd:time "23:00:00+06:00"^^xsd:time) pred:time-less-than false} => {:time-less-than-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma576> a r:Extraction;
  r:gives {
    {("11:00:00-05:00"^^xsd:time "17:00:00Z"^^xsd:time) pred:time-less-than true} => {:time-less-than-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma577> a r:Extraction;
  r:gives {
    {("23:59:59-05:00"^^xsd:time "24:00:00-05:00"^^xsd:time) pred:time-less-than false} => {:time-less-than-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma578> a r:Extraction;
  r:gives {
    {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than false} => {:time-greater-than-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma579> a r:Extraction;
  r:gives {
    {("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-equal true} => {:duration-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma580> a r:Extraction;
  r:gives {
    {("PT24H"^^xsd:duration "P1D"^^xsd:duration) pred:duration-equal true} => {:duration-equal-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma581> a r:Extraction;
  r:gives {
    {("P1Y"^^xsd:duration "P365D"^^xsd:duration) pred:duration-equal false} => {:duration-equal-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma582> a r:Extraction;
  r:gives {
    {("P2Y0M0DT0H0M0S"^^xsd:duration "P24M"^^xsd:duration) pred:duration-equal true} => {:duration-equal-4 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma583> a r:Extraction;
  r:gives {
    {("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than true} => {:dayTimeDuration-less-than-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma584> a r:Extraction;
  r:gives {
    {("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than false} => {:dayTimeDuration-greater-than-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma585> a r:Extraction;
  r:gives {
    {("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than true} => {:yearMonthDuration-less-than-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma586> a r:Extraction;
  r:gives {
    {("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than false} => {:yearMonthDuration-greater-than-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma587> a r:Extraction;
  r:gives {
    {("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-not-equal false} => {:dateTime-not-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma588> a r:Extraction;
  r:gives {
    {("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than-or-equal true} => {:dateTime-less-than-or-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma589> a r:Extraction;
  r:gives {
    {("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than-or-equal true} => {:dateTime-greater-than-or-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma590> a r:Extraction;
  r:gives {
    {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-not-equal true} => {:date-not-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma591> a r:Extraction;
  r:gives {
    {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-less-than-or-equal false} => {:date-less-than-or-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma592> a r:Extraction;
  r:gives {
    {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than-or-equal true} => {:date-greater-than-or-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma593> a r:Extraction;
  r:gives {
    {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-not-equal true} => {:time-not-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma594> a r:Extraction;
  r:gives {
    {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-less-than-or-equal true} => {:time-less-than-or-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma595> a r:Extraction;
  r:gives {
    {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than-or-equal false} => {:time-greater-than-or-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma596> a r:Extraction;
  r:gives {
    {("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-not-equal false} => {:duration-not-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma597> a r:Extraction;
  r:gives {
    {("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than-or-equal true} => {:dayTimeDuration-less-than-or-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma598> a r:Extraction;
  r:gives {
    {("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than-or-equal false} => {:dayTimeDuration-greater-than-or-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma599> a r:Extraction;
  r:gives {
    {("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than-or-equal true} => {:yearMonthDuration-less-than-or-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma600> a r:Extraction;
  r:gives {
    {("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than-or-equal false} => {:yearMonthDuration-greater-than-or-equal-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma601> a r:Extraction;
  r:gives {
    {("Family Guy") func:PlainLiteral-from-string-lang "Family Guy"} => {:PlainLiteral-from-string-lang-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma602> a r:Extraction;
  r:gives {
    {("Family Guy" "EN") func:PlainLiteral-from-string-lang "Family Guy"@en} => {:PlainLiteral-from-string-lang-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma603> a r:Extraction;
  r:gives {
    {("Family Guy") func:string-from-PlainLiteral "Family Guy"} => {:string-from-PlainLiteral-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma604> a r:Extraction;
  r:gives {
    {("Family Guy"@en) func:string-from-PlainLiteral "Family Guy"} => {:string-from-PlainLiteral-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma605> a r:Extraction;
  r:gives {
    {("Family Guy") func:lang-from-PlainLiteral ""} => {:lang-from-PlainLiteral-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma606> a r:Extraction;
  r:gives {
    {("Family Guy"@en) func:lang-from-PlainLiteral "en"} => {:lang-from-PlainLiteral-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma607> a r:Extraction;
  r:gives {
    {("Family Guy" "Mother") func:PlainLiteral-compare -1} => {:PlainLiteral-compare-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma608> a r:Extraction;
  r:gives {
    {("Family Guy"@en "Brother"@en) func:PlainLiteral-compare 1} => {:PlainLiteral-compare-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma609> a r:Extraction;
  r:gives {
    {("Family Guy") func:PlainLiteral-length 10} => {:PlainLiteral-length-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma610> a r:Extraction;
  r:gives {
    {("Family Guy"@en) func:PlainLiteral-length 10} => {:PlainLiteral-length-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma611> a r:Extraction;
  r:gives {
    {("Family Guy"@en "en") pred:matches-language-range true} => {:matches-language-range-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma612> a r:Extraction;
  r:gives {
    {("Family Guy"@en-US "en-*") pred:matches-language-range true} => {:matches-language-range-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma613> a r:Extraction;
  r:gives {
    {((:a :b :c :d)) pred:is-list true} => {:is-list-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma614> a r:Extraction;
  r:gives {
    {((:a :b :c :d) :b) pred:list-contains true} => {:list-contains-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma615> a r:Extraction;
  r:gives {
    {(:a :b :c :d) func:make-list (:a :b :c :d)} => {:make-list-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma616> a r:Extraction;
  r:gives {
    {((:a :b :c :d)) func:count 4} => {:count-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma617> a r:Extraction;
  r:gives {
    {((:a :b :c :d) 3) func:get :d} => {:get-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma618> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) 0 0) func:sublist ()} => {:sublist-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma619> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) 0 1) func:sublist (0)} => {:sublist-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma620> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) 0 4) func:sublist (0 1 2 3)} => {:sublist-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma621> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) 0 5) func:sublist (0 1 2 3 4)} => {:sublist-4 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma622> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) 0 10) func:sublist (0 1 2 3 4)} => {:sublist-5 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma623> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) 0 -2) func:sublist (0 1 2)} => {:sublist-6 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma624> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) 2 4) func:sublist (2 3)} => {:sublist-7 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma625> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) 2 -2) func:sublist (2)} => {:sublist-9 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma626> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) 3) func:sublist (3 4)} => {:sublist-10 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma627> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) -2) func:sublist (3 4)} => {:sublist-11 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma628> a r:Extraction;
  r:gives {
    {((0 1 2) 3) func:append (0 1 2 3)} => {:append-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma629> a r:Extraction;
  r:gives {
    {((0 1 2) 3 4) func:append (0 1 2 3 4)} => {:append-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma630> a r:Extraction;
  r:gives {
    {((1 1) (1) (1) ((1))) func:append (1 1 (1) (1) ((1)))} => {:append-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma631> a r:Extraction;
  r:gives {
    {(() 1) func:append (1)} => {:append-4 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma632> a r:Extraction;
  r:gives {
    {((0 1 2) (3 4 5)) func:concatenate (0 1 2 3 4 5)} => {:concatenate-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma633> a r:Extraction;
  r:gives {
    {((1 1) (1) (1)) func:concatenate (1 1 1 1)} => {:concatenate-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma634> a r:Extraction;
  r:gives {
    {(()) func:concatenate ()} => {:concatenate-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma635> a r:Extraction;
  r:gives {
    {(() (1) () (2) ((3))) func:concatenate (1 2 (3))} => {:concatenate-4 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma636> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) 0 99) func:insert-before (99 0 1 2 3 4)} => {:insert-before-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma637> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) 1 99) func:insert-before (0 99 1 2 3 4)} => {:insert-before-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma638> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) -1 99) func:insert-before (0 1 2 3 99 4)} => {:insert-before-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma639> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) -5 99) func:insert-before (99 0 1 2 3 4)} => {:insert-before-4 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma640> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) 0) func:remove (1 2 3 4)} => {:remove-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma641> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) 1) func:remove (0 2 3 4)} => {:remove-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma642> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) 4) func:remove (0 1 2 3)} => {:remove-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma643> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) -1) func:remove (0 1 2 3)} => {:remove-4 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma644> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) -5) func:remove (1 2 3 4)} => {:remove-5 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma645> a r:Extraction;
  r:gives {
    {((0 1 2 3 4)) func:reverse (4 3 2 1 0)} => {:reverse-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma646> a r:Extraction;
  r:gives {
    {((1)) func:reverse (1)} => {:reverse-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma647> a r:Extraction;
  r:gives {
    {(()) func:reverse ()} => {:reverse-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma648> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) 2) func:index-of (2)} => {:index-of-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma649> a r:Extraction;
  r:gives {
    {((0 1 2 3 4 5 2 2) 2) func:index-of (2 6 7)} => {:index-of-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma650> a r:Extraction;
  r:gives {
    {((2 2 3 4 5 2 2) 2) func:index-of (0 1 5 6)} => {:index-of-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma651> a r:Extraction;
  r:gives {
    {((2 2 3 4 5 2 2) 1) func:index-of ()} => {:index-of-4 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma652> a r:Extraction;
  r:gives {
    {((0 1 2 4) (3 4 5 6)) func:union (0 1 2 4 3 5 6)} => {:union-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma653> a r:Extraction;
  r:gives {
    {((0 1 2 3) (4)) func:union (0 1 2 3 4)} => {:union-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma654> a r:Extraction;
  r:gives {
    {((0 1 2 3) (3)) func:union (0 1 2 3)} => {:union-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma655> a r:Extraction;
  r:gives {
    {((0 2 1 0)) func:union (0 2 1)} => {:union-4 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma656> a r:Extraction;
  r:gives {
    {((0 1 2 3 4)) func:distinct-values (0 1 2 3 4)} => {:distinct-values-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma657> a r:Extraction;
  r:gives {
    {((0 1 2 3 4 0 4)) func:distinct-values (0 1 2 3 4)} => {:distinct-values-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma658> a r:Extraction;
  r:gives {
    {((3 3 3)) func:distinct-values (3)} => {:distinct-values-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma659> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) (1 3)) func:intersect (1 3)} => {:intersect-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma660> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) (3 1)) func:intersect (1 3)} => {:intersect-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma661> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) ()) func:intersect ()} => {:intersect-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma662> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) (0 1 2 3 4 5 6)) func:intersect (0 1 2 3 4)} => {:intersect-4 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma663> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) (1 3)) func:except (0 2 4)} => {:except-1 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma664> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) ()) func:except (0 1 2 3 4)} => {:except-2 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

<#lemma665> a r:Extraction;
  r:gives {
    {((0 1 2 3 4) (0 1 2 3 4)) func:except ()} => {:except-3 :result true}.
  };
  r:because [ a r:Parsing; r:source <http://josd.github.io/brain/rif/rifP.n3>].

#2020-02-22T21:52:45.270Z in=224 out=222 ent=443 step=1776 brake=4 inf=1859338 sec=0.846 inf/sec=2197799
#ENDS

