name: Validate

on:
  push:
    branches: ["master"]
  pull_request:
  workflow_dispatch:

env:
  FORCE_COLOR: 1
  XDG_CACHE_HOME: ${{ github.workspace }}/cache
  DEFAULT_PYTHON: "3.7"

jobs:
  validate:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - {
              python-version: "3.7",
              os: ubuntu-latest,
              extensive-tests: true,
            }
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/setup-java@v2
        if: ${{ matrix.extensive-tests }}
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Get pip cache dir
        id: pip-cache
        shell: bash
        run: |
          python -m ensurepip --upgrade
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}-v1-${{
            hashFiles('**/setup.py', '**/requirements*.txt') }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}-v1-
      - name: Cache xdg
        uses: actions/cache@v2
        with:
          path: ${{ env.XDG_CACHE_HOME }}
          key: ${{ matrix.os }}-xdg-v1-${{ hashFiles('**/with-fuseki.sh') }}
          restore-keys: |
            ${{ matrix.os }}-xdg-v1-
      - name: Install dependencies
        shell: bash
        run: |
          pip install --default-timeout 60 -r requirements.txt
          pip install --default-timeout 60 -r requirements.dev.txt
          python setup.py install
      - name: Install extra dev dependencies
        if: ${{ matrix.extensive-tests }}
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]
          then
              sudo apt-get install -y libdb-dev
          elif [ "${{ matrix.os }}" == "macos-latest" ]
          then
              brew install berkeley-db@4
              export BERKELEYDB_DIR=$(brew --prefix berkeley-db@4)
          fi
          pip install --default-timeout 60 -r requirements.dev-extra.txt
      - name: Validate
        shell: bash
        run: |
          test_harness=()
          if "${{ matrix.extensive-tests || false }}" && [ "${{ matrix.os }}" != "windows-latest" ]
          then
            1>&2 echo "Running with fuseki"
            test_harness+="./with-fuseki.sh"
          fi
          black --config pyproject.toml --check --diff ./rdflib || true
          isort --check-only --diff . || true
          flake8 --exit-zero rdflib
          mypy --show-error-context --show-error-codes
          "${test_harness[@]}" pytest -ra --cov
  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{env.DEFAULT_PYTHON}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{env.DEFAULT_PYTHON}}
      - name: Get pip cache dir
        id: pip-cache
        shell: bash
        run: |
          python -m ensurepip --upgrade
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: docs-pip-v1-${{
            hashFiles('**/setup.py', '**/requirements*.txt') }}
          restore-keys: |
            docs-pip-v1-
      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install tox
      - name: Build docs
        shell: bash
        run: |
          python -m tox -e docs
